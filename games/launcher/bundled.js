/*
 * File: app/model/CountryModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.CountryModel', {
  extend: 'Ext.data.Model',

  idProperty: 'id',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    }
  ],

  validations: [
    {
      type: 'presence',
      field: 'id'
    },
    {
      type: 'presence',
      field: 'name'
    }
  ]
});
/*
 * File: app/store/CountryStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.CountryStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.CountryModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      autoLoad: true,
      storeId: 'CountryStore',
      model: 'BigBrainzLauncher.model.CountryModel',
      proxy: {
        type: 'ajax',
        url: 'routes/routes.php?url=/countries',
        reader: {
          type: 'json',
          getResponseData: function(response) {
            try {
              var data = Ext.decode(response.responseText);
            }
            catch (ex) {
              //throw 'Ext.data.JsonReader.getResponseData: invalid json';
              var win = Ext.create('BigBrainzLauncher.view.ReportErrorWindow');
              var report = '';  
              report += 'Error parsing JSON: ' + Ext.encode(ex) + '\n';  
              Ext.getCmp('error_report_textarea').setValue(report);
              win.show();
            }
            if (!data) {
              throw 'Ext.data.JsonReader.getResponseData: JSON object not found';
            }

            return data;
          },
          root: 'data'
        },
        listeners: {
          exception: {
            fn: me.onAjaxproxyException,
            scope: me
          }
        }
      },
      sorters: {
        sorterFn: function(first, second) {
          first = first.get('name');
          second = second.get('name');
          if (first == "United States") return -1;
          if (second == "United States") return 1;
          if (first == "United Kingdom") return -1;
          if (second == "United Kingdom") return 1;
          if (first == "Canada") return -1;
          if (second == "Canada") return 1;
          return first > second ? 1 : (first < second ? -1 : 0);
        }
      }
    }, cfg)]);
  },

  onAjaxproxyException: function(server, response, operation, options) {
    //var win = Ext.create('BigBrainzLauncher.view.ReportErrorWindow');
    //var report = '';
    //report += 'Requested URL: ' + server.url + '\n';
    //report += 'Status: ' + response.status + '\n';
    //report += 'Status Text: ' + response.statusText + '\n';
    //report += 'Response Headers: ' + response.getAllResponseHeaders() + '\n';
    //report += 'Response Text: ' + response.responseText + '\n';

    //Ext.getCmp('error_report_textarea').setValue(report);
    //win.show();

    //console.log(server);
    //console.log(response);
    //console.log(operation);
    //console.log(options);
    //console.log(response.getAllResponseHeaders());
  }

});
/*
 * File: app/model/StateModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.StateModel', {
  extend: 'Ext.data.Model',

  idProperty: 'id',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    }
  ],

  validations: [
    {
      type: 'presence',
      field: 'id'
    },
    {
      type: 'presence',
      field: 'name'
    }
  ]
});
/*
 * File: app/store/StateStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.StateStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.StateModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'StateStore',
      model: 'BigBrainzLauncher.model.StateModel',
      proxy: {
        type: 'ajax',
        url: 'http://ec2-23-22-15-51.compute-1.amazonaws.com:4567/countries/123/states',
        reader: {
          type: 'json',
          getResponseData: function(response) {
            try {
              var data = Ext.decode(response.responseText);
            }
            catch (ex) {
              throw 'Ext.data.JsonReader.getResponseData: invalid json';
              //var win = Ext.create('BigBrainzLauncher.view.ReportErrorWindow');
              //var report = '';  
              //report += 'Error parsing JSON: ' + Ext.encode(ex) + '\n';  
              //Ext.getCmp('error_report_textarea').setValue(report);
              //win.show();
            }
            if (!data) {
              throw 'Ext.data.JsonReader.getResponseData: JSON object not found';
            }

            return data;
          },
          root: 'data'
        },
        listeners: {
          exception: {
            fn: me.onAjaxproxyException,
            scope: me
          }
        }
      },
      sorters: {
        property: 'name'
      }
    }, cfg)]);
  },

  onAjaxproxyException: function(server, response, operation, options) {
    //var win = Ext.create('BigBrainzLauncher.view.ReportErrorWindow');
    //var report = '';
    //report += 'Requested URL: ' + server.url + '\n';
    //report += 'Status: ' + response.status + '\n';
    //report += 'Status Text: ' + response.statusText + '\n';
    //report += 'Response Headers: ' + Ext.encode(response.getAllResponseHeaders()) + '\n';
    //report += 'Response Text: ' + response.responseText + '\n';

    //Ext.getCmp('error_report_textarea').setValue(report);
    //win.show();
  }

});
/*
 * File: app/model/DistrictModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.DistrictModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    },
    {
      name: 'UseLogin'
    }
  ],

  validations: [
    {
      type: 'presence',
      field: 'id'
    },
    {
      type: 'presence',
      field: 'name'
    }
  ]
});
/*
 * File: app/store/DistrictStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.DistrictStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.DistrictModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'DistrictStore',
      model: 'BigBrainzLauncher.model.DistrictModel',
      proxy: {
        type: 'ajax',
        url: 'http://ec2-23-22-15-51.compute-1.amazonaws.com:4567/countries/123/districts',
        reader: {
          type: 'json',
          root: 'data'
        }
      },
      sorters: {
        property: 'name'
      }
    }, cfg)]);
  }
});
/*
 * File: app/model/SchoolModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.SchoolModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    },
    {
      name: 'Password'
    },
    {
      name: 'DefaultStudentPassword'
    },
    {
      name: 'status'
    },
    {
      name: 'cEmail'
    },
    {
      name: 'cName'
    },
    {
      name: 'cPhone'
    },
    {
      name: 'HasPassword'
    },
    {
      name: 'messages_read'
    },
    {
      name: 'purchase_status'
    },
    {
      name: 'weekly_progress_ta9'
    },
    {
      name: 'weekly_progress_addsub'
    },
    {
      name: 'weekly_progress_division'
    },
    {
      name: 'pretests_ta9'
    },
    {
      name: 'posttests_ta9'
    },
    {
      name: 'pretests_division'
    },
    {
      name: 'posttests_division'
    },
    {
      name: 'pretests_addsub'
    },
    {
      name: 'posttests_addsub'
    }
  ],

  validations: [
    {
      type: 'presence',
      field: 'id'
    },
    {
      type: 'presence',
      field: 'name'
    }
  ]
});
/*
 * File: app/store/SchoolStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.SchoolStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.SchoolModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'SchoolStore',
      model: 'BigBrainzLauncher.model.SchoolModel',
      proxy: {
        type: 'ajax',
        url: 'http://bigbrainz.com/games/launcher/routes/routes.php?url=/schools/BB02691691445219511848020091007190846561510/DefaultStudentPassword',
        reader: {
          type: 'json',
          root: 'data'
        }
      },
      sorters: {
        sorterFn: function(first, second) {
          first = first.get('name');
          second = second.get('name');
          if (first == "District Overview") return -1;
          if (second == "District Overview") return 1;

          return first > second ? 1 : (first < second ? -1 : 0);
        },
        property: 'name'
      }
    }, cfg)]);
  }
});
/*
 * File: app/model/ClassModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.ClassModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    },
    {
      name: 'email'
    },
    {
      name: 'game_count'
    },
    {
      name: 'PilotClass'
    },
    {
      name: 'SizeLimit'
    },
    {
      name: 'm_pretest_taken'
    },
    {
      name: 'm_pretest_avg'
    },
    {
      name: 'm_posttest_taken'
    },
    {
      name: 'm_posttest_avg'
    },
    {
      name: 'm_total_hours'
    },
    {
      name: 'm_avg_time'
    },
    {
      name: 'm_10'
    },
    {
      name: 'm_20'
    },
    {
      name: 'm_30'
    },
    {
      name: 'm_40'
    },
    {
      name: 'm_50'
    },
    {
      name: 'm_60'
    },
    {
      name: 'm_70'
    },
    {
      name: 'm_80'
    },
    {
      name: 'm_90'
    },
    {
      name: 'd_10'
    },
    {
      name: 'd_20'
    },
    {
      name: 'd_30'
    },
    {
      name: 'd_40'
    },
    {
      name: 'd_50'
    },
    {
      name: 'd_60'
    },
    {
      name: 'd_70'
    },
    {
      name: 'd_80'
    },
    {
      name: 'd_90'
    },
    {
      name: 'd_pretest_taken'
    },
    {
      name: 'd_pretest_avg'
    },
    {
      name: 'd_posttest_taken'
    },
    {
      name: 'd_posttest_avg'
    },
    {
      name: 'd_total_hours'
    },
    {
      name: 'd_avg_time'
    },
    {
      name: 'as_pretest_taken'
    },
    {
      name: 'as_pretest_avg'
    },
    {
      name: 'as_posttest_taken'
    },
    {
      name: 'as_posttest_avg'
    },
    {
      name: 'as_total_hours'
    },
    {
      name: 'as_avg_time'
    },
    {
      name: 'as_10'
    },
    {
      name: 'as_20'
    },
    {
      name: 'as_30'
    },
    {
      name: 'as_40'
    },
    {
      name: 'as_50'
    },
    {
      name: 'as_60'
    },
    {
      name: 'as_70'
    },
    {
      name: 'as_80'
    },
    {
      name: 'as_90'
    },
    {
      name: 'PizzaPartyClass'
    }
  ]
});
/*
 * File: app/store/ClassStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.ClassStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.ClassModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'ClassStore',
      model: 'BigBrainzLauncher.model.ClassModel',
      proxy: {
        type: 'ajax',
        url: 'http://bigbrainz.com/games/launcher/routes/routes.php?url=/schools/BB029775160829726550220120224162416192635/classes&_dc=1344636638292&page=1&start=0&limit=25&sort=%5B%7B%22property%22%3A%22name%22%2C%22direction%22%3A%22ASC%22%7D%5D',
        reader: {
          type: 'json',
          root: 'data'
        }
      },
      sorters: {
        property: 'name'
      }
    }, cfg)]);
  }
});
/*
 * File: app/model/GameModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.GameModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    },
    {
      name: 'progress',
      type: 'int'
    },
    {
      name: 'password'
    },
    {
      name: 'TA9_pretest'
    },
    {
      name: 'TA9_progress'
    },
    {
      name: 'TA9_posttest'
    },
    {
      name: 'addsubtract_pretest'
    },
    {
      name: 'addsubtract_progress'
    },
    {
      name: 'addsubtract_posttest'
    },
    {
      name: 'multiplication_pretest'
    },
    {
      name: 'multiplication_progress'
    },
    {
      name: 'multiplication_posttest'
    },
    {
      name: 'Division_pretest'
    },
    {
      name: 'Division_progress'
    },
    {
      name: 'Division_posttest'
    },
    {
      name: 'addsubtract_minutes'
    },
    {
      name: 'multiplication_minutes'
    },
    {
      name: 'Division_minutes'
    }
  ]
});
/*
 * File: app/store/GameStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.GameStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.GameModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'GameStore',
      model: 'BigBrainzLauncher.model.GameModel',
      proxy: {
        type: 'ajax',
        url: 'http://bigbrainz.com/games/launcher/routes/routes.php?url=/classes/BB0559fa3d8bf052425598f34b5566c5e0ab0/children',
        reader: {
          type: 'json',
          root: 'data'
        }
      },
      sorters: {
        property: 'name'
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/AddGameStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.AddGameStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.GameModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'MyArrayStore',
      model: 'BigBrainzLauncher.model.GameModel',
      proxy: {
        type: 'ajax',
        reader: {
          type: 'array'
        }
      }
    }, cfg)]);
  }
});
/*
 * File: app/model/SubjectModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.SubjectModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'name'
    },
    {
      name: 'appid'
    }
  ]
});
/*
 * File: app/store/SubjectStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.SubjectStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.SubjectModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      autoLoad: true,
      storeId: 'SubjectStore',
      model: 'BigBrainzLauncher.model.SubjectModel',
      proxy: {
        type: 'ajax',
        url: 'http://bigbrainz.com/games/launcher/routes/subjects.json',
        reader: {
          type: 'json',
          root: 'data'
        }
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/AddClassStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.AddClassStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.ClassModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'MyArrayStore1',
      model: 'BigBrainzLauncher.model.ClassModel',
      proxy: {
        type: 'ajax',
        url: '',
        reader: {
          type: 'array'
        }
      }
    }, cfg)]);
  }
});
/*
 * File: app/model/TreeModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.TreeModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'id'
    },
    {
      name: 'text'
    },
    {
      name: 'leaf'
    },
    {
      name: 'cls'
    },
    {
      name: 'loaded',
      defaultValue: false
    },
    {
      name: 'expanded',
      defaultValue: false
    },
    {
      name: 'Properties'
    },
    {
      name: 'icon'
    }
  ]
});
/*
 * File: app/store/SchoolTreeStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.SchoolTreeStore', {
  extend: 'Ext.data.TreeStore',

  requires: [
    'BigBrainzLauncher.model.TreeModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'school_tree_store',
      model: 'BigBrainzLauncher.model.TreeModel',
      folderSort: true,
      root: {
        text: 'School',
        id: '0',
        expanded: true,
        iconCls: 'school-icon'
      },
      proxy: {
        type: 'ajax',
        url: 'http://bigbrainz.com/games/launcher/routes/school_tree.json',
        reader: {
          type: 'json'
        }
      },
      sorters: {
        property: 'text'
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/WeeklyProgressStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.WeeklyProgressStore', {
  extend: 'Ext.data.Store',

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'MyArrayStore2',
      fields: [
        {
          name: 'date'
        },
        {
          name: 'f',
          type: 'int'
        },
        {
          name: 'p',
          type: 'int'
        },
        {
          name: 'np',
          type: 'int'
        },
        {
          name: 'dnp'
        }
      ],
      sorters: {
        sorterFn: function(first, second) {

          var first_split = first.get('date').split('/');
          var second_split = second.get('date').split('/');

          var first_year = 2012;
          var second_year = 2012;

          if (first_split[0] < 7) first_year = 2013;
          if (second_split[0] < 7) second_year = 2013;

          var first_date = new Date(first_year, first_split[0], first_split[1]);
          var second_date = new Date(second_year, second_split[0], second_split[1]);

          return first_date > second_date;
        }
      }
    }, cfg)]);
  }
});
/*
 * File: app/model/TestModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.TestModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'percent',
      type: 'int'
    },
    {
      name: 'value',
      type: 'int',
      useNull: false
    }
  ]
});
/*
 * File: app/store/PosttestScoresStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.PosttestScoresStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.TestModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'SchoolPosttestScoresStore',
      model: 'BigBrainzLauncher.model.TestModel'
    }, cfg)]);
  }
});
/*
 * File: app/store/StudentWeeklyMinutes.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.StudentWeeklyMinutes', {
  extend: 'Ext.data.Store',

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'StudentWeeklyMinutes',
      fields: [
        {
          name: 'week_number'
        },
        {
          name: 'minutes'
        }
      ]
    }, cfg)]);
  }
});
/*
 * File: app/model/GameDataModel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.model.GameDataModel', {
  extend: 'Ext.data.Model',

  fields: [
    {
      name: 'weekly_time'
    }
  ]
});
/*
 * File: app/store/GameDataStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.GameDataStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.GameDataModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'GameDataStore',
      model: 'BigBrainzLauncher.model.GameDataModel',
      proxy: {
        type: 'ajax',
        reader: {
          type: 'json',
          root: 'data'
        }
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/ClassPasswordsStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.ClassPasswordsStore', {
  extend: 'Ext.data.Store',

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'ClassPasswordsStore',
      proxy: {
        type: 'ajax',
        reader: {
          type: 'json',
          root: 'data'
        }
      },
      fields: [
        {
          name: 'name'
        },
        {
          name: 'password'
        }
      ]
    }, cfg)]);
  }
});
/*
 * File: app/store/DistrictReportStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.DistrictReportStore', {
  extend: 'Ext.data.Store',

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'DistrictReportStore',
      fields: [
        {
          name: 'name'
        },
        {
          name: 'pretest_taken'
        },
        {
          name: 'pretest_avg'
        },
        {
          name: '_10'
        },
        {
          name: '_20'
        },
        {
          name: '_30'
        },
        {
          name: '_40'
        },
        {
          name: '_50'
        },
        {
          name: '_60'
        },
        {
          name: '_70'
        },
        {
          name: '_80'
        },
        {
          name: '_90'
        },
        {
          name: 'posttest_taken'
        },
        {
          name: 'posttest_avg'
        },
        {
          name: 'total_hours'
        },
        {
          name: 'avg_hours'
        }
      ],
      sorters: {
        direction: 'DESC',
        property: 'pretest_taken'
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/DistrictTreeStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.DistrictTreeStore', {
  extend: 'Ext.data.TreeStore',

  requires: [
    'BigBrainzLauncher.model.TreeModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'DistrictTreeStore',
      model: 'BigBrainzLauncher.model.TreeModel',
      folderSort: true,
      root: {
        text: 'District',
        id: '0',
        expanded: true,
        iconCls: 'treenode-no-icon'
      },
      proxy: {
        type: 'ajax',
        url: 'http://bigbrainz.com/games/launcher/routes/school_tree.json',
        reader: {
          type: 'json'
        }
      },
      sorters: {
        property: 'text'
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/PretestChartStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.PretestChartStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.TestModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'PretestChartStore',
      model: 'BigBrainzLauncher.model.TestModel',
      proxy: {
        type: 'ajax',
        reader: {
          type: 'json'
        }
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/PosttestChartStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.PosttestChartStore', {
  extend: 'Ext.data.Store',

  requires: [
    'BigBrainzLauncher.model.TestModel'
  ],

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'PosttestChartStore',
      model: 'BigBrainzLauncher.model.TestModel',
      proxy: {
        type: 'ajax',
        reader: {
          type: 'json'
        }
      }
    }, cfg)]);
  }
});
/*
 * File: app/store/AverageImprovementStore.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.store.AverageImprovementStore', {
  extend: 'Ext.data.Store',

  constructor: function(cfg) {
    var me = this;
    cfg = cfg || {};
    me.callParent([Ext.apply({
      storeId: 'MyArrayStore8',
      fields: [
        {
          name: 'grade'
        },
        {
          name: 'pretest_avg'
        },
        {
          name: 'posttest_avg'
        }
      ]
    }, cfg)]);
  }
});
/*
 * File: app/view/AddClassesWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.AddClassesWindow', {
  extend: 'Ext.window.Window',

  height: 584,
  id: 'add_classes_window',
  width: 713,
  layout: {
    align: 'stretch',
    type: 'vbox'
  },
  title: 'Add Classes',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          flex: 20,
          layout: {
            align: 'stretch',
            type: 'hbox'
          },
          title: '',
          items: [
            {
              xtype: 'gridpanel',
              flex: 1,
              id: 'add_classes_grid',
              title: 'Preview',
              columns: [
                {
                  xtype: 'gridcolumn',
                  dataIndex: 'name',
                  text: 'Class Name'
                }
              ],
              viewConfig: {

              },
              plugins: [
                Ext.create('Ext.grid.plugin.RowEditing', {
                  ptype: 'rowediting',
                  listeners: {
                    edit: {
                      fn: me.onGridroweditingpluginEdit,
                      scope: me
                    }
                  }
                })
              ]
            },
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                type: 'fit'
              },
              title: 'Type in or paste a list of class names',
              items: [
                {
                  xtype: 'textareafield',
                  id: 'add_classes_textarea',
                  fieldLabel: '',
                  emptyText: 'Type in or paste a list of classes',
                  grow: false,
                  listeners: {
                    change: {
                      fn: me.onAdd_students_textareaChange,
                      scope: me
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      dockedItems: [
        {
          xtype: 'toolbar',
          flex: 1,
          dock: 'bottom',
          style: 'border: solid 1px #99BBE8; margin: 0',
          ui: 'footer',
          items: [
            {
              xtype: 'tbspacer',
              flex: 2
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                if ('undefined' === typeof(Ext.getCmp("add_classes_textarea").value) || Ext.getCmp("add_classes_textarea").value === '') {
                  Ext.MessageBox.alert('Big Brainz', 'Enter in at least one class name.');
                  return; 
                }
                var class_records = Ext.getCmp('add_classes_textarea').value.split(/\r\n?|\n/g);
                var length = class_records.length;
                if (length < 1) {
                  Ext.MessageBox.alert('Big Brainz', 'Enter in at least one class name.');
                  return; 
                }
                var classes_url = "[";
                var school_id = school_data.id;
                if (school_id === "" || school_id === undefined) {
                  school_id = Ext.util.Cookies.get('__school_id_saved');
                }
                for (i = 0; i < length; i++) {
                  if (class_records[i] === '') continue;
                  var class_name = class_records[i];
                  class_name = class_name.replace(/\t/g, ' ');
                  classes_url += '{"DisplayableName":"' +class_name + '", "ParentID":"'+school_id+'"},';
                }
                classes_url = classes_url.slice(0, -1);
                classes_url += ']';
                Ext.getCmp('add_classes_window').disable();
                Ext.Ajax.request({
                  method: 'POST',
                  url: 'routes/routes.php?url=/classes&method=post',
                  params: {new_classes:classes_url},
                  success: function(result) {    
                    var res = Ext.decode(result.responseText);
                    if (res.success) {
                      setTimeout(function() {
                        var delNode;
                        var treePanel = Ext.getCmp('school_tree');
                        while (delNode = treePanel.getRootNode().childNodes[0]) {
                          treePanel.getRootNode().removeChild(delNode);
                        }
                        Ext.getStore("ClassStore").load();
                        Ext.getStore("SchoolTreeStore").load();
                        Ext.getCmp('add_classes_window').hide();
                        Ext.getCmp('add_classes_window').destroy();
                      },1000);
                    } else {
                      Ext.getCmp('add_classes_window').enable();
                      Ext.MessageBox.show({
                        title   : 'Could not add classes',
                        msg     : res.error
                      });
                    }
                  },
                  failure: function() {
                    Ext.Msg.alert("Could not add classes.  Please try again.");
                    Ext.getCmp('add_classes_window').enable();
                  }
                });
              },
              disabled: false,
              height: 50,
              id: 'add_class_button',
              width: 200,
              text: 'Add'
            },
            {
              xtype: 'tbspacer',
              flex: 2
            }
          ]
        }
      ],
      listeners: {
        afterrender: {
          fn: me.onAdd_classes_windowAfterRender,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onGridroweditingpluginEdit: function(editor, e, options) {
    var records = Ext.getCmp('add_classes_grid').store.data.items;
    var classes = "";
    for(var i = 0; i < records.length; i++) {
      classes += records[i].get('name') + "\n";  
    }
    Ext.getCmp('add_classes_textarea').setValue(classes);
  },

  onAdd_students_textareaChange: function(field, newValue, oldValue, options) {
    Ext.getCmp('add_classes_grid').store.removeAll();
    records = newValue.split('\n');
    var length = records.length;
    for (i = 0; i < length; i++) {
      if (records[i] === '') continue;
      _class = Ext.create('BigBrainzLauncher.model.ClassModel', 
      {    
        name : Ext.util.Format.trim(records[i]),
        id  : i
      });
      Ext.getCmp('add_classes_grid').store.add(_class);
    }
  },

  onAdd_classes_windowAfterRender: function(abstractcomponent, options) {
    setTimeout(function() {Ext.getCmp('add_classes_textarea').focus();Ext.getCmp('add_classes_grid').store.removeAll();}, 250);
  }

});
/*
 * File: app/view/AddStudentsWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.AddStudentsWindow', {
  extend: 'Ext.window.Window',

  height: 584,
  id: 'add_students_window',
  width: 713,
  layout: {
    align: 'stretch',
    type: 'vbox'
  },
  title: 'Add Students',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          flex: 20,
          layout: {
            align: 'stretch',
            type: 'hbox'
          },
          title: '',
          items: [
            {
              xtype: 'gridpanel',
              flex: 1,
              id: 'add_students_grid',
              title: 'Preview',
              store: 'AddGameStore',
              columnLines: true,
              columns: [
                {
                  xtype: 'gridcolumn',
                  dataIndex: 'name',
                  flex: 2,
                  text: 'Name',
                  editor: {
                    xtype: 'textfield'
                  }
                },
                {
                  xtype: 'gridcolumn',
                  dataIndex: 'password',
                  flex: 1,
                  text: 'Password',
                  editor: {
                    xtype: 'textfield'
                  }
                }
              ],
              viewConfig: {

              },
              plugins: [
                Ext.create('Ext.grid.plugin.RowEditing', {
                  ptype: 'rowediting',
                  listeners: {
                    edit: {
                      fn: me.onGridroweditingpluginEdit,
                      scope: me
                    }
                  }
                })
              ]
            },
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                type: 'fit'
              },
              title: 'Type in or paste a list of students.',
              items: [
                {
                  xtype: 'textareafield',
                  id: 'add_students_textarea',
                  fieldLabel: '',
                  emptyText: 'Type in or paste a list of students. Unique passwords are not required.  If you DO include unique student passwords use a semicolon to separate student names from their passwords.  i.e. Suzy Smith; susm5',
                  grow: false,
                  listeners: {
                    change: {
                      fn: me.onAdd_students_textareaChange,
                      scope: me
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      dockedItems: [
        {
          xtype: 'toolbar',
          flex: 1,
          dock: 'bottom',
          style: 'border: solid 1px #99BBE8; margin: 0',
          ui: 'footer',
          items: [
            {
              xtype: 'tbspacer',
              flex: 2
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                if ('undefined' === typeof(Ext.getCmp("add_students_textarea").value) || Ext.getCmp("add_students_textarea").value === '') {
                  Ext.MessageBox.alert('Big Brainz', 'Enter in at least one student name.');
                  return; 
                }
                var class_selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
                var class_record = Ext.getStore('ClassStore').data.items[Ext.getStore('ClassStore').find('id', class_selected[0].data.id)];
                var class_size_limit = class_record.data.SizeLimit;
                var class_current_size = Ext.getStore('GameStore').data.items.length;
                var records = Ext.getCmp('add_students_textarea').value.split(/\r\n?|\n/g);
                var length = records.length;
                if (length < 1) {
                  Ext.MessageBox.alert('Big Brainz', 'Enter in at least one student name.');
                  return; 
                }
                if (class_size_limit && (length > class_size_limit - class_current_size)) {
                  Ext.MessageBox.show({
                    title   : 'Could not add students',
                    msg     : 'Could not add students because you are adding more than the maximum('+class_size_limit+') is allowed for this class.'
                  });
                  return;
                }
                var games_url = "[";
                for (i = 0; i < length; i++) {
                  if (records[i] === '') continue;
                  var data = records[i].split(';');
                  if (data[0] === '') continue;
                  var password = data[1];
                  if(password === undefined) {
                    password = "";
                  } else {
                    password = Ext.util.Format.trim(password);
                  }
                  var game_name = data[0];
                  game_name = game_name.replace(/\t/g, ' ');
                  games_url += '{"DisplayableName":"' + game_name + '", "Password":"' + password + '", "ParentID":"'+class_selected[0].data.id+'"},';
                }
                games_url = games_url.slice(0, -1);
                games_url += ']';
                Ext.getCmp('add_students_window').disable();
                Ext.Ajax.request({
                  method: 'POST',
                  url: 'routes/routes.php?url=/games&method=post',
                  params: {new_games:games_url},
                  success: function(result) {
                    var res = Ext.decode(result.responseText);
                    if (res.success) {
                      setTimeout(function() {
                        var delNode;
                        var treePanel = Ext.getCmp('school_tree');
                        while (delNode = treePanel.getRootNode().childNodes[0]) {
                          treePanel.getRootNode().removeChild(delNode);
                        }

                        Ext.getStore("SchoolTreeStore").load();
                        Ext.getStore("GameStore").load();
                        Ext.getCmp('add_students_window').hide();
                        Ext.getCmp('add_students_window').destroy();
                      },1000);      
                    } else {
                      Ext.getCmp('add_students_window').enable();
                      Ext.MessageBox.show({
                        title   : 'Could not add students',
                        msg     : res.error
                      });
                    }
                  },
                  failure: function() {
                    Ext.Msg.alert("Could not add students.  Please try again.");
                    Ext.getCmp('add_students_window').enable();
                  }
                });
              },
              disabled: false,
              height: 50,
              id: 'add_student_button',
              width: 200,
              text: 'Add'
            },
            {
              xtype: 'tbspacer',
              flex: 2
            }
          ]
        }
      ],
      listeners: {
        destroy: {
          fn: me.onAdd_students_windowDestroy,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onGridroweditingpluginEdit: function(editor, e, options) {
    var records = Ext.getCmp('add_students_grid').store.data.items;
    var games = "";
    for(var i = 0; i < records.length; i++) {
      games += records[i].get('name') + "; " + records[i].get('password') + "\n";  
    }
    Ext.getCmp('add_students_textarea').setValue(games);
  },

  onAdd_students_textareaChange: function(field, newValue, oldValue, options) {
    Ext.getCmp('add_students_grid').store.removeAll();
    var records = newValue.split('\n');
    var length = records.length;
    if (length > 0) {
      Ext.getCmp('add_student_button').enable();
    } else {
      Ext.getCmp('add_student_button').disable();
    }
    for (i = 0; i < length; i++) {
      if (records[i] === '') continue;
      var record = records[i].split(';'); 
      if (record[1] === undefined || Ext.util.Format.trim(record[1]) === "") record[1] = Ext.getStore('SchoolStore').data.items[0].data.DefaultStudentPassword;
      game = Ext.create('BigBrainzLauncher.model.GameModel', 
      {    
        name : Ext.util.Format.trim(record[0]),
        id  : i,
        password : Ext.util.Format.trim(record[1])
      });
      Ext.getCmp('add_students_grid').store.add(game);
    }
  },

  onAdd_students_windowDestroy: function(abstractcomponent, options) {
    Ext.getStore('AddGameStore').removeAll();
  }

});
/*
 * File: app/view/EditStudentsWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.EditStudentsWindow', {
  extend: 'Ext.window.Window',

  height: 500,
  id: 'change_passwords_window',
  width: 697,
  autoScroll: true,
  title: 'Edit Student Names/Passwords',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'displayfield',
          padding: 10,
          width: 674,
          value: 'Select the class you want to edit from the menu on the left. Double-click on a student\'s name or password to change it.',
          fieldLabel: 'Note',
          hideLabel: true
        },
        {
          xtype: 'label',
          margin: '10px',
          width: 388,
          text: 'If the password is blank, it will automatically be set to the default password.'
        },
        {
          xtype: 'gridpanel',
          margin: 10,
          preventHeader: true,
          title: 'Edit Individual Students',
          store: 'GameStore',
          columns: [
            {
              xtype: 'gridcolumn',
              dataIndex: 'name',
              flex: 1,
              text: 'Name',
              editor: {
                xtype: 'textfield'
              }
            },
            {
              xtype: 'gridcolumn',
              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                if (value == undefined || value == null || value == "") {
                  return "(default password)";
                }
                else {
                  return value;
                }
              },
              dataIndex: 'password',
              flex: 1,
              text: 'Password',
              editor: {
                xtype: 'textfield'
              }
            }
          ],
          plugins: [
            Ext.create('Ext.grid.plugin.CellEditing', {
              ptype: 'cellediting',
              listeners: {
                edit: {
                  fn: me.onGridcelleditingpluginEdit,
                  scope: me
                }
              }
            })
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onGridcelleditingpluginEdit: function(editor, e, options) {
    var student_id = e.record.data.id;
    var field = e.field;
    var skip = false;
    var params_obj = {ItemName: student_id};
    if (field === "name") {
      params_obj.DisplayableName = e.value;
    }
    else if (field === "password") {
      if (e.value !== "(default password)") {
        params_obj.Password = e.value;
      }
      else {
        Ext.MessageBox.alert("Error", "Cannot use '(default password)' as a password.");
        skip = true;
      }
    }
    else {
      Ext.MessageBox.alert('Error', 'Error editing student information.'); 
      skip = true;
    }

    if (!skip) {
      Ext.Ajax.request({
        method: 'POST',
        url: 'routes/routes.php?url=/games&method=put',
        params: params_obj,
        success: function(result) {
          var res = Ext.decode(result.responseText);
          if (res.success) {
            Ext.Msg.alert("Success", "Update successful.");
          } else {
            Ext.Msg.alert("Could not update.", "Please try again.");
          }
        },
        failure: function() {
          Ext.Msg.alert("Could not update.", "Please try again.");
        }
      });

      // update the student names in the tree
      if (field === "name") {
        var delNode;
        var treePanel = Ext.getCmp('school_tree');
        while (delNode = treePanel.getRootNode().childNodes[0]) {
          treePanel.getRootNode().removeChild(delNode);
        }

        Ext.getStore("SchoolTreeStore").load();
        Ext.getStore("GameStore").load();
      }
    }


  }

});
/*
 * File: app/view/BigBrainzSetup.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.BigBrainzSetup', {
  extend: 'Ext.window.Window',

  height: 290,
  hidden: false,
  id: 'setup_school_window',
  width: 492,
  layout: {
    type: 'fit'
  },
  title: 'Big Brainz Setup',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          layout: {
            type: 'accordion'
          },
          title: '',
          items: [
            {
              xtype: 'panel',
              height: 200,
              collapsed: false,
              title: '1. Contact Info',
              items: [
                {
                  xtype: 'container',
                  height: 200,
                  layout: {
                    align: 'center',
                    pack: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        if (value.length < 1) return "Required";
                        return true;
                      },
                      id: 'name_txt',
                      fieldLabel: 'Name',
                      listeners: {
                        change: {
                          fn: me.onName_txtChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        if (value.length < 1) return "Required";
                        return true;
                      },
                      id: 'role_txt',
                      fieldLabel: 'Role',
                      listeners: {
                        change: {
                          fn: me.onRole_txtChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        if (value.length < 1) return "Required.";
                        return true;
                      },
                      id: 'email_txt',
                      fieldLabel: 'Email',
                      regex: /^([\w\-\'\-]+)(\.[\w-\'\-]+)*@([\w\-]+\.){1,5}([A-Za-z]){2,4}$/,
                      listeners: {
                        change: {
                          fn: me.onEmail_txtChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'textfield',
                      id: 'phone_txt',
                      fieldLabel: 'Phone #',
                      emptyText: '(optional)',
                      maskRe: /[\(\)\d-]/,
                      listeners: {
                        change: {
                          fn: me.onPhone_txtChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'container',
                      flex: 1,
                      padding: '0 0 0 200',
                      items: [
                        {
                          xtype: 'button',
                          handler: function(button, event) {
                            Ext.getCmp('password_setup').enable();
                            Ext.getCmp('password_setup').expand();
                          },
                          disabled: true,
                          id: 'next_btn',
                          padding: '',
                          text: 'Next'
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              disabled: true,
              id: 'password_setup',
              collapsed: true,
              title: '2. Password Setup',
              items: [
                {
                  xtype: 'container',
                  height: 200,
                  layout: {
                    align: 'center',
                    pack: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        if (value.length < 1) return false;
                        return true;
                      },
                      id: 'edu_pass',
                      fieldLabel: 'Educator Password',
                      labelAlign: 'right',
                      labelWidth: 160,
                      emptyText: '(at least 6 characters)',
                      minLength: 6,
                      listeners: {
                        change: {
                          fn: me.onEdu_passChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        if (Ext.getCmp('edu_pass').value != value) {
                          return "Mismatch Passwords";
                        } else {
                          return true;
                        }
                      },
                      id: 'edu_pass_conf',
                      fieldLabel: 'Confirm Educator Password',
                      labelAlign: 'right',
                      labelWidth: 160,
                      minLength: 6,
                      listeners: {
                        change: {
                          fn: me.onEdu_pass_confChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        if (value.length < 3) return false;
                        return true;
                      },
                      id: 'stu_pass',
                      fieldLabel: 'Student Password',
                      labelAlign: 'right',
                      labelWidth: 160,
                      emptyText: '(at least 3 characters)',
                      minLength: 3,
                      listeners: {
                        change: {
                          fn: me.onStu_passChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        if (Ext.getCmp('stu_pass').value != value) {
                          return "Mismatch Passwords";
                        } else {
                          return true;
                        }
                      },
                      id: 'stu_pass_conf',
                      fieldLabel: 'Confirm Student Password',
                      labelAlign: 'right',
                      labelWidth: 160,
                      minLength: 3,
                      listeners: {
                        change: {
                          fn: me.onStu_pass_confChange,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'container',
                      flex: 1,
                      padding: '0 0 0 275',
                      items: [
                        {
                          xtype: 'button',
                          handler: function(button, event) {
                            var id = Ext.util.Cookies.get('__school_id_saved');
                            var cName  = Ext.getCmp('name_txt').value;
                            var cRole = Ext.getCmp('role_txt').value;
                            var cPhone = Ext.getCmp('phone_txt').value;
                            var cEmail = Ext.getCmp('email_txt').value;

                            var edu_pass = Ext.getCmp('edu_pass').value;
                            var stu_pass = Ext.getCmp('stu_pass').value;

                            var ts = new Date().getTime();
                            var timestamp = Math.floor(ts/1000);


                            Ext.Ajax.request({
                              method: 'POST',
                              url: 'routes/routes.php?url=/schools&method=put',
                              params: {ItemName:id, Contacts_EmailAddress:cEmail, Contacts_Role:cRole, Contacts_Name:cName, Contacts_PhoneNumber:cPhone, Timestamp_PasswordFirstSet :timestamp, DefaultStudentPassword:stu_pass, Password:edu_pass},
                              success: function(result) {
                                res = Ext.decode(result.responseText);
                                Ext.getCmp('school_selection_window').destroy();
                                Ext.getCmp('setup_school_window').destroy();
                                var edu_view = Ext.create('BigBrainzLauncher.view.EducatorTreeViewport');

                                var data = Ext.getStore('SchoolStore').data.items[Ext.getStore('SchoolStore').find('id',id)].data;
                                data.cName = cName;
                                data.cEmail = cEmail;
                                data.cPhone = cPhone;
                              },
                              failure: function() {
                                Ext.Msg.alert("Could not setup school.  Please try again.");
                              }
                            });
                          },
                          disabled: true,
                          id: 'finish_btn',
                          text: 'Finish'
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onName_txtChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('next_btn').enable();
    } else {
      Ext.getCmp('next_btn').disable();
      Ext.getCmp('password_setup').disable();
    }

  },

  onRole_txtChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('next_btn').enable();
    } else {
      Ext.getCmp('next_btn').disable();
      Ext.getCmp('password_setup').disable();
    }

  },

  onEmail_txtChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('next_btn').enable();
    } else {
      Ext.getCmp('next_btn').disable();
      Ext.getCmp('password_setup').disable();
    }

  },

  onPhone_txtChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('next_btn').enable();
    } else {
      Ext.getCmp('next_btn').disable();
    }

  },

  onEdu_passChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('edu_pass').validate()) validated = false;
    if (!Ext.getCmp('edu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('stu_pass').validate()) validated = false;
    if (!Ext.getCmp('stu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('finish_btn').enable();
    } else {
      Ext.getCmp('finish_btn').disable();
    }

  },

  onEdu_pass_confChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('edu_pass').validate()) validated = false;
    if (!Ext.getCmp('edu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('stu_pass').validate()) validated = false;
    if (!Ext.getCmp('stu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('finish_btn').enable();
    } else {
      Ext.getCmp('finish_btn').disable();
    }

  },

  onStu_passChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('edu_pass').validate()) validated = false;
    if (!Ext.getCmp('edu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('stu_pass').validate()) validated = false;
    if (!Ext.getCmp('stu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('finish_btn').enable();
    } else {
      Ext.getCmp('finish_btn').disable();
    }

  },

  onStu_pass_confChange: function(field, newValue, oldValue, options) {
    var validated = true;
    if (!Ext.getCmp('edu_pass').validate()) validated = false;
    if (!Ext.getCmp('edu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('stu_pass').validate()) validated = false;
    if (!Ext.getCmp('stu_pass_conf').validate()) validated = false;
    if (!Ext.getCmp('name_txt').validate()) validated = false;
    if (!Ext.getCmp('role_txt').validate()) validated = false;
    if (!Ext.getCmp('email_txt').validate()) validated = false;
    if (!Ext.getCmp('phone_txt').validate()) validated = false;
    if (validated) {
      Ext.getCmp('finish_btn').enable();
    } else {
      Ext.getCmp('finish_btn').disable();
    }

  }

});
/*
 * File: app/view/BigBrainzSchoolReports.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.BigBrainzSchoolReports', {
  extend: 'Ext.container.Viewport',

  id: 'BigBrainzEducatorViewport',
  layout: {
    type: 'fit'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'tabpanel',
          height: 250,
          width: 400,
          activeTab: 0,
          items: [
            {
              xtype: 'panel',
              height: 473,
              width: 536,
              title: 'Multiplication',
              items: [
                {
                  xtype: 'gridpanel',
                  id: 'SchoolWideReportGrid',
                  store: 'SchoolWideReportStore',
                  viewConfig: {

                  },
                  columns: [
                    {
                      xtype: 'gridcolumn',
                      dataIndex: 'name',
                      flex: 3,
                      text: 'Name'
                    },
                    {
                      xtype: 'gridcolumn',
                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        correct = parseInt(value, "10");
                        percent = correct/66.0;
                        color = get_color_string(value, 66);
                        if (color === "") {
                          color = "ffffff";
                        }
                        results =  '<div style="background-color:#'+color+';">' + Math.round(percent) + '%</div>';
                        return results;
                      },
                      dataIndex: 'avg_pretest',
                      flex: 1,
                      text: 'Avg. Pretest Score'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'num_pretest',
                      flex: 1,
                      text: 'Number of Pretests',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p1',
                      flex: 1,
                      text: '10%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p2',
                      flex: 1,
                      text: '20%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p3',
                      flex: 1,
                      text: '30%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p4',
                      flex: 1,
                      text: '40%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p5',
                      flex: 1,
                      text: '50%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p6',
                      flex: 1,
                      text: '60%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p7',
                      flex: 1,
                      text: '70%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p8',
                      flex: 1,
                      text: '80%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'p9',
                      flex: 1,
                      text: '90%',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'num_posttest',
                      flex: 1,
                      text: 'Number of Posttests',
                      format: '0,000'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'avg_posttest',
                      flex: 1,
                      text: 'Avg. Posttest Score',
                      format: '000.0'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              title: 'Division',
              items: [
                {
                  xtype: 'gridpanel',
                  id: 'SchoolWideReportGrid',
                  title: 'My Grid Panel',
                  viewConfig: {

                  },
                  columns: [
                    {
                      xtype: 'gridcolumn',
                      dataIndex: 'string',
                      flex: 5,
                      text: 'Name'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'number',
                      flex: 1,
                      text: 'Avg. Pretest Score'
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'number',
                      flex: 1,
                      text: 'Number of Pretests'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '10%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '20%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '30%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '40%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '50%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '60%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '70%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '80%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: '90%'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: 'Number of Posttests'
                    },
                    {
                      xtype: 'numbercolumn',
                      flex: 1,
                      text: 'Avg. Posttest Score'
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  }

});
/*
 * File: app/view/PilotDeluxeFreeWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.PilotDeluxeFreeWindow', {
  extend: 'Ext.window.Window',

  height: 454,
  hidden: false,
  id: 'pilot_deluxe_free_window',
  width: 796,
  layout: {
    type: 'fit'
  },
  title: 'Pilot Deluxe Version',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          layout: {
            align: 'stretch',
            type: 'vbox'
          },
          title: '',
          items: [
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'vbox'
              },
              title: '',
              items: [
                {
                  xtype: 'label',
                  flex: 1,
                  style: 'text-align:center',
                  text: 'Pilot Deluxe Version--Free'
                },
                {
                  xtype: 'label',
                  flex: 1,
                  style: 'text-align:center',
                  text: 'Follow these 4 implementation guidelines and all the students you add to the "Deluxe" class (up to 30) can Pilot our incredible Deluxe Version for free until they finish or stop playing regularly.  Enjoy!'
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'label',
                      text: '1)'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  layout: {
                    align: 'stretch',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'label',
                      flex: 1,
                      margins: '10',
                      text: 'Is this the person responsible for fluency at your school?'
                    },
                    {
                      xtype: 'container',
                      flex: 1,
                      layout: {
                        align: 'stretch',
                        type: 'hbox'
                      },
                      items: [
                        {
                          xtype: 'textfield',
                          validator: function(value) {
                            if (value === "") {
                              return false;
                            } else {
                              return true;
                            }
                          },
                          flex: 1,
                          id: 'cnInput',
                          fieldLabel: '',
                          emptyText: 'Contact\'s Name',
                          listeners: {
                            change: {
                              fn: me.onTextfieldChange,
                              scope: me
                            }
                          }
                        },
                        {
                          xtype: 'textfield',
                          validator: function(value) {
                            if (value === "") {
                              return false;
                            } else {
                              return true;
                            }
                          },
                          flex: 1,
                          id: 'ceInput',
                          fieldLabel: '',
                          emptyText: 'Contact\'s Email',
                          regex: /^([\w\-\'\-]+)(\.[\w-\'\-]+)*@([\w\-]+\.){1,5}([A-Za-z]){2,4}$/,
                          listeners: {
                            change: {
                              fn: me.onCeInputChange,
                              scope: me
                            }
                          }
                        },
                        {
                          xtype: 'textfield',
                          validator: function(value) {
                            if (value === "") {
                              return false;
                            } else {
                              return true;
                            }
                          },
                          flex: 1,
                          id: 'cpInput',
                          fieldLabel: '',
                          emptyText: 'Contact\'s Phone Number',
                          maskRe: /[\(\)\d-]/,
                          listeners: {
                            change: {
                              fn: me.onCpInputChange,
                              scope: me
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        if (newVal) {
                          checkbox.getEl().setStyle('background-color', 'white');
                        }else {
                          checkbox.getEl().setStyle('background-color', 'red');
                        }

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      id: 'contactResponsibleCheckbox',
                      style: 'background-color:red;',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'label',
                      text: '2)'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  margins: '10',
                  items: [
                    {
                      xtype: 'label',
                      text: 'Is the principal aware and supportive of this program?'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        if (newVal) {
                          checkbox.getEl().setStyle('background-color', 'white');
                        }else {
                          checkbox.getEl().setStyle('background-color', 'red');
                        }

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      id: 'principalAwareCheckbox',
                      style: 'background-color:red;',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'label',
                      text: '3)'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  margins: '10',
                  layout: {
                    align: 'stretch',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'label',
                      flex: 1,
                      text: 'Is Timez Attack installed and functioning smoothly on your system?'
                    },
                    {
                      xtype: 'label',
                      flex: 1,
                      text: '(If you need any help, please email support@bigbrainz.com or call us (877) 356-7040!)'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        if (newVal) {
                          checkbox.getEl().setStyle('background-color', 'white');
                        }else {
                          checkbox.getEl().setStyle('background-color', 'red');
                        }

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      id: 'runningCheckbox',
                      style: 'background-color:red;',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'label',
                      text: '4)'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  margins: '10',
                  items: [
                    {
                      xtype: 'label',
                      text: 'Do you agree to schedule roughly 30 minutes of computer time each week for each student that starts the game -- until they are finished?'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        if (newVal) {
                          checkbox.getEl().setStyle('background-color', 'white');
                        }else {
                          checkbox.getEl().setStyle('background-color', 'red');
                        }

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      id: 'scheduleCheckbox',
                      style: 'background-color:red;',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                }
              ]
            }
          ],
          dockedItems: [
            {
              xtype: 'toolbar',
              flex: 1,
              dock: 'bottom',
              items: [
                {
                  xtype: 'tbspacer',
                  flex: 1
                },
                {
                  xtype: 'buttongroup',
                  title: '',
                  columns: 2,
                  layout: {
                    columns: 2,
                    type: 'table'
                  },
                  items: [
                    {
                      xtype: 'button',
                      disabled: true,
                      id: 'pilotBtn',
                      text: 'Pilot'
                    },
                    {
                      xtype: 'button',
                      text: 'Finish Later'
                    }
                  ]
                },
                {
                  xtype: 'tbspacer',
                  flex: 1
                }
              ]
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onTextfieldChange: function(field, newValue, oldValue, options) {
    if (Ext.getCmp('cnInput').validate() &&
    Ext.getCmp('ceInput').validate() &&
    Ext.getCmp('cpInput').validate() &&
    Ext.getCmp('contactResponsibleCheckbox').value &&
    Ext.getCmp('principalAwareCheckbox').value &&
    Ext.getCmp('runningCheckbox').value &&
    Ext.getCmp('scheduleCheckbox').value) {
      Ext.getCmp('pilotBtn').enable();
    } else {
      Ext.getCmp('pilotBtn').disable();
    }
  },

  onCeInputChange: function(field, newValue, oldValue, options) {
    if (Ext.getCmp('cnInput').validate() &&
    Ext.getCmp('ceInput').validate() &&
    Ext.getCmp('cpInput').validate() &&
    Ext.getCmp('contactResponsibleCheckbox').value &&
    Ext.getCmp('principalAwareCheckbox').value &&
    Ext.getCmp('runningCheckbox').value &&
    Ext.getCmp('scheduleCheckbox').value) {
      Ext.getCmp('pilotBtn').enable();
    } else {
      Ext.getCmp('pilotBtn').disable();
    }
  },

  onCpInputChange: function(field, newValue, oldValue, options) {
    if (Ext.getCmp('cnInput').validate() &&
    Ext.getCmp('ceInput').validate() &&
    Ext.getCmp('cpInput').validate() &&
    Ext.getCmp('contactResponsibleCheckbox').value &&
    Ext.getCmp('principalAwareCheckbox').value &&
    Ext.getCmp('runningCheckbox').value &&
    Ext.getCmp('scheduleCheckbox').value) {
      Ext.getCmp('pilotBtn').enable();
    } else {
      Ext.getCmp('pilotBtn').disable();
    }
  }

});
/*
 * File: app/view/StartupMessageWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.StartupMessageWindow', {
  extend: 'Ext.window.Window',

  height: 291,
  id: 'startup_message_window',
  width: 813,
  layout: {
    align: 'center',
    type: 'vbox'
  },
  title: 'Startup Message',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          flex: 1,
          style: '{font-size:250%;}',
          text: 'Welcome to the newest version of Big Brainz'
        },
        {
          xtype: 'container',
          flex: 4,
          width: 731,
          layout: {
            type: 'vbox'
          },
          items: [
            {
              xtype: 'label',
              flex: 1,
              text: '1.  If you\'re starting a new school year, we suggest deleting all your old classes and starting fresh.'
            },
            {
              xtype: 'label',
              flex: 1,
              text: '2.  Pasting in your classes and students is quick and easy, but we can also import an Excel or .csv file for you. '
            },
            {
              xtype: 'label',
              flex: 1,
              width: 674,
              text: '3.  Unlock your Deluxe License / Pilot the Deluxe Version / by pressing the red button above and following the simple checklist that will ensure an effective implementation at your school.'
            }
          ]
        }
      ],
      dockedItems: [
        {
          xtype: 'toolbar',
          flex: 1,
          dock: 'bottom',
          items: [
            {
              xtype: 'tbspacer',
              flex: 1
            },
            {
              xtype: 'tbseparator'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                var id = Ext.util.Cookies.get('__school_id_saved');
                var store = Ext.getStore('SchoolStore');
                var messages_read = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.messages_read);
                messages_read.push(0);

                var params = {ItemName:id, messages_read:JSON.stringify(messages_read)};
                Ext.Ajax.request({
                  method: 'POST',
                  url: 'routes/routes.php?url=/schools&method=put',
                  params: params,
                  success: function(result) {
                    Ext.getCmp('startup_message_window').destroy();
                  },
                  failure: function() {
                    Ext.Msg.alert("Could not dave preference.  Please try again.");
                  }
                });
              },
              text: 'Okay, I\'ve read and understand this'
            },
            {
              xtype: 'tbseparator'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                Ext.getCmp('startup_message_window').destroy();
              },
              text: 'Remind me next time I log in.'
            },
            {
              xtype: 'tbseparator'
            },
            {
              xtype: 'tbspacer',
              flex: 1
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  }

});
/*
 * File: app/view/StudentNeedPassword.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.StudentNeedPassword', {
  extend: 'Ext.window.Window',

  height: 220,
  id: 'student_need_password',
  width: 400,
  title: 'Need Password?',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      listeners: {
        beforeadd: {
          fn: me.onStudent_need_passwordBeforeAdd,
          scope: me
        }
      },
      items: [
        {
          xtype: 'container',
          height: 200,
          layout: {
            align: 'center',
            type: 'vbox'
          },
          items: [
            {
              xtype: 'label',
              flex: 1,
              id: 'contact_intro_label',
              text: 'You will need to contact your school contact person who is'
            },
            {
              xtype: 'label',
              flex: 1,
              id: 'contact_info',
              text: '[Contact Info]'
            },
            {
              xtype: 'label',
              flex: 1,
              id: 'contact_ending_label',
              text: 'to get this schools password.'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onStudent_need_passwordBeforeAdd: function(abstractcontainer, component, index, options) {
    var school_id = Ext.util.Cookies.get('__school_id_saved');
    var idx = Ext.getStore('SchoolStore').find('id', school_id);
    var rec = Ext.getStore('SchoolStore').data.items[idx].data;

    Ext.getCmp('contact_info').setText(rec.cName + ' at ' + rec.cEmail);
  }

});
/*
 * File: app/view/SchoolSelectionWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.SchoolSelectionWindow', {
  extend: 'Ext.window.Window',

  height: 362,
  hidden: false,
  id: 'school_selection_window',
  width: 400,
  layout: {
    type: 'fit'
  },
  title: 'Select Your School',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          layout: {
            type: 'accordion'
          },
          title: '',
          titleCollapse: true,
          items: [
            {
              xtype: 'panel',
              id: 'selectCountry',
              layout: {
                type: 'fit'
              },
              collapsed: false,
              collapsible: true,
              title: 'Select Your Country',
              items: [
                {
                  xtype: 'combobox',
                  id: 'comboCountry',
                  readOnly: false,
                  displayField: 'name',
                  forceSelection: true,
                  queryMode: 'local',
                  store: 'CountryStore',
                  valueField: 'id',
                  listeners: {
                    select: {
                      fn: me.onComboCountrySelect,
                      scope: me
                    }
                  }
                }
              ],
              listeners: {
                expand: {
                  fn: me.onSelectCountryExpand,
                  scope: me
                }
              }
            },
            {
              xtype: 'panel',
              disabled: true,
              id: 'selectState',
              layout: {
                type: 'fit'
              },
              collapsed: true,
              collapsible: true,
              title: 'Select Your State',
              items: [
                {
                  xtype: 'combobox',
                  id: 'comboState',
                  readOnly: false,
                  fieldLabel: '',
                  displayField: 'name',
                  forceSelection: true,
                  queryMode: 'local',
                  store: 'StateStore',
                  valueField: 'id',
                  listeners: {
                    select: {
                      fn: me.onComboStateSelect,
                      scope: me
                    }
                  }
                }
              ],
              listeners: {
                expand: {
                  fn: me.onSelectStateExpand,
                  scope: me
                }
              }
            },
            {
              xtype: 'panel',
              disabled: true,
              id: 'selectDistrict',
              layout: {
                type: 'fit'
              },
              collapsed: true,
              collapsible: true,
              title: 'Select Your District',
              listeners: {
                expand: {
                  fn: me.onSelectDistrictExpand,
                  scope: me
                },
                collapse: {
                  fn: me.onSelectDistrictCollapse,
                  scope: me
                }
              },
              items: [
                {
                  xtype: 'container',
                  id: 'district_select_container',
                  layout: {
                    type: 'fit'
                  },
                  items: [
                    {
                      xtype: 'combobox',
                      id: 'comboDistrict',
                      readOnly: false,
                      fieldLabel: '',
                      displayField: 'name',
                      forceSelection: true,
                      queryMode: 'local',
                      store: 'DistrictStore',
                      valueField: 'id',
                      listeners: {
                        select: {
                          fn: me.onComboDistrictSelect,
                          scope: me
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              disabled: true,
              id: 'selectSchool',
              layout: {
                type: 'fit'
              },
              collapsed: true,
              collapsible: true,
              title: 'Select Your School',
              items: [
                {
                  xtype: 'combobox',
                  id: 'comboSchool',
                  readOnly: false,
                  fieldLabel: '',
                  displayField: 'name',
                  forceSelection: true,
                  queryMode: 'local',
                  store: 'SchoolStore',
                  valueField: 'id',
                  listeners: {
                    select: {
                      fn: me.onComboSchoolSelect,
                      scope: me
                    }
                  }
                }
              ],
              listeners: {
                expand: {
                  fn: me.onSelectSchoolExpand,
                  scope: me
                },
                collapse: {
                  fn: me.onSelectSchoolCollapse,
                  scope: me
                }
              }
            },
            {
              xtype: 'panel',
              hidden: false,
              id: 'school_login_panel',
              collapsed: true,
              collapsible: true,
              title: '',
              items: [
                {
                  xtype: 'container',
                  height: 198,
                  hidden: false,
                  id: 'school_with_password',
                  layout: {
                    align: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'container',
                      flex: 1
                    },
                    {
                      xtype: 'textfield',
                      validator: function(value) {
                        return (value.length >= 1) ? true : false;
                      },
                      height: 30,
                      id: 'school_password',
                      padding: '',
                      width: 300,
                      inputType: 'password',
                      fieldLabel: 'Password',
                      labelWidth: 60,
                      minLength: 1,
                      minLengthText: 'You must enter in a password.'
                    },
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        /*
                        var password = Ext.getCmp("school_password").value;
                        Ext.Ajax.request({
                        method: 'POST',
                        url: 'routes/routes.php?url=/login&method=post',
                        params: {id:school_data.id, password: password},
                        success: function(result) {
                        var res = Ext.decode(result.responseText);
                        if (res.success) {
                        if (Ext.getCmp('school_selection_window') === undefined) {

                        } else {
                        Ext.getCmp('school_selection_window').destroy();
                        }
                        if (res.access == "educator") {        
                        var edu_view = Ext.create('BigBrainzLauncher.view.EducatorTreeViewport');
                        } else {
                        Ext.define('StudentPassword', {
                        singleton: true,
                        password: password
                        });
                        var stu_view = Ext.create('BigBrainzLauncher.view.StudentViewport');
                        }
                        } else {
                        Ext.Msg.alert(res.errors.reason); 
                        }
                        },
                        failure: function() {
                        Ext.Msg.alert("Could not log in.  Please try again.");
                        }
                        });
                        */
                      },
                      height: 30,
                      id: 'login_btn',
                      padding: '',
                      width: 100,
                      text: 'Login',
                      listeners: {
                        click: {
                          fn: me.onLogin_btnClick,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'container',
                      padding: '10 0 0 0',
                      width: 400,
                      items: [
                        {
                          xtype: 'container',
                          height: 20,
                          layout: {
                            align: 'center',
                            type: 'vbox'
                          },
                          items: [
                            {
                              xtype: 'label',
                              flex: 1,
                              height: 14,
                              style: '{text-align:center;}',
                              text: 'Please enter a teacher or student password.'
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          height: 20,
                          layout: {
                            align: 'center',
                            type: 'vbox'
                          },
                          items: [
                            {
                              xtype: 'label',
                              flex: 1,
                              style: '{\ntext-align:center;\ncolor:blue;\n}',
                              text: 'If you don\'t know your password, click here.',
                              listeners: {
                                afterrender: {
                                  fn: me.onLabelAfterRender,
                                  scope: me
                                }
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      xtype: 'container',
                      flex: 1
                    }
                  ],
                  listeners: {
                    afterlayout: {
                      fn: me.onSchool_with_passwordAfterLayout,
                      scope: me
                    },
                    afterrender: {
                      fn: me.onSchool_with_passwordAfterRender,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'container',
                  hidden: true,
                  id: 'school_without_password',
                  layout: {
                    align: 'middle',
                    type: 'hbox'
                  },
                  items: [
                    {
                      xtype: 'container',
                      flex: 1,
                      layout: {
                        type: 'hbox'
                      },
                      items: [
                        {
                          xtype: 'container',
                          flex: 1,
                          height: 50,
                          layout: {
                            align: 'center',
                            pack: 'center',
                            type: 'vbox'
                          },
                          items: [
                            {
                              xtype: 'button',
                              handler: function(button, event) {
                                var view = Ext.create('BigBrainzLauncher.view.BigBrainzSetup');
                                view.show();

                              },
                              flex: 1,
                              id: 'educator_without_password',
                              text: 'Educator'
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          flex: 1,
                          height: 50,
                          layout: {
                            align: 'center',
                            pack: 'center',
                            type: 'vbox'
                          },
                          items: [
                            {
                              xtype: 'button',
                              handler: function(button, event) {
                                Ext.MessageBox.alert('Big Brainz', 'Please contact your school and ask them to set a schoolwide password.  When a password is set, then you will be able to play.');
                              },
                              flex: 1,
                              id: 'student_without_password',
                              text: 'Student'
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      listeners: {
        afterrender: {
          fn: me.onSchool_selection_windowAfterRender,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onComboCountrySelect: function(combo, records, options) {
    setTimeout(function() {
      Ext.getCmp("selectState").enable();
      Ext.getCmp("selectCountry").collapse();
    }, 250);

    var today = new Date();
    var next_year = new Date(today.getFullYear() + 1, today.getMonth(), today.getDay());
    Ext.util.Cookies.set('__country_id_saved', records[0].data.id, next_year);
    Ext.util.Cookies.set('__country_name_saved', records[0].data.name, next_year);
    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.set('country_id', records[0].data.id);
      local_store.set('country_name', records[0].data.name);
    } catch(err) {

    }
    country_data.id = records[0].data.id;
    country_data.name = records[0].data.name;
    Ext.getCmp('selectCountry').setTitle(records[0].data.name);



  },

  onSelectCountryExpand: function(p, options) {
    Ext.getCmp("selectCountry").setTitle('Select Your Country');
    Ext.getCmp("selectState").setTitle('Select Your State');
    Ext.getCmp("selectDistrict").setTitle('Select Your District');
    Ext.getCmp("selectSchool").setTitle('Select Your School');


    Ext.getCmp("selectState").disable();
    Ext.getCmp("selectDistrict").disable();
    Ext.getCmp("selectSchool").disable();



    Ext.getCmp("school_login_panel").hide();
    Ext.getCmp("school_with_password").hide();
    Ext.getCmp("school_without_password").hide();

    Ext.util.Cookies.clear('__country_id_saved');
    Ext.util.Cookies.clear('__country_name_saved');

    Ext.util.Cookies.clear('__state_id_saved');
    Ext.util.Cookies.clear('__state_name_saved');

    Ext.util.Cookies.clear('__district_id_saved');
    Ext.util.Cookies.clear('__district_name_saved');

    Ext.util.Cookies.clear('__school_id_saved');
    Ext.util.Cookies.clear('__school_name_saved');

    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.clear('school_id');
      local_store.clear('school_name');
      local_store.clear('district_id');
      local_store.clear('district_name');
      local_store.clear('state_id');
      local_store.clear('state_name');
      local_store.clear('country_id');
      local_store.clear('country_name');
    } catch(err) {

    }

    Ext.getCmp('comboState').getStore().clearFilter();
  },

  onComboStateSelect: function(combo, records, options) {
    var today = new Date();
    var next_year = new Date(today.getFullYear() + 1, today.getMonth(), today.getDay());
    Ext.util.Cookies.set('__state_id_saved', records[0].data.id, next_year);
    Ext.util.Cookies.set('__state_name_saved', records[0].data.name, next_year);

    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.set('state_id', records[0].data.id);
      local_store.set('state_name', records[0].data.name);
    } catch(err) {

    }
    state_data.name = records[0].data.name;
    state_data.id = records[0].data.id;



    Ext.getCmp('selectState').setTitle(records[0].data.name);

    setTimeout(function() {
      Ext.getCmp("selectDistrict").enable();
      Ext.getCmp("selectState").collapse();
    }, 250);

  },

  onSelectStateExpand: function(p, options) {
    Ext.getCmp("selectState").setTitle('Select Your State');
    Ext.getCmp("selectDistrict").setTitle('Select Your District');
    Ext.getCmp("selectSchool").setTitle('Select Your School');
    Ext.getCmp("selectDistrict").disable();
    Ext.getCmp("selectSchool").disable();



    Ext.getCmp("school_login_panel").hide();
    Ext.getCmp("school_with_password").hide();
    Ext.getCmp("school_without_password").hide();
    Ext.util.Cookies.clear('__state_id_saved');
    Ext.util.Cookies.clear('__state_name_saved');
    Ext.util.Cookies.clear('__district_id_saved');
    Ext.util.Cookies.clear('__district_name_saved');
    Ext.util.Cookies.clear('__school_id_saved');
    Ext.util.Cookies.clear('__school_name_saved');

    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.clear('school_id');
      local_store.clear('school_name');
      local_store.clear('district_id');
      local_store.clear('district_name');
      local_store.clear('state_id');
      local_store.clear('state_name');
    } catch(err) {

    }

    Ext.getStore("StateStore").proxy.url = "routes/routes.php?url=/countries/"+country_data.id+"/children";
    Ext.getCmp('comboState').expand();
    Ext.getCmp('comboState').focus();
    setTimeout(function() {
      Ext.getStore('StateStore').load({
        callback: function(r, options, success) {
          Ext.getCmp("comboDistrict").setValue("");
        }
      });
    }, 250);
  },

  onSelectDistrictExpand: function(p, options) {
    Ext.getCmp("selectDistrict").setTitle('Select Your District');
    Ext.getCmp("selectSchool").setTitle('Select Your School');


    Ext.util.Cookies.clear('__district_id_saved');
    Ext.util.Cookies.clear('__district_name_saved');
    Ext.util.Cookies.clear('__school_id_saved');
    Ext.util.Cookies.clear('__school_name_saved');

    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.clear('district_id');
      local_store.clear('district_name');
      local_store.clear('school_id');
      local_store.clear('school_name');
    } catch(err) {

    }

    Ext.getStore("DistrictStore").proxy.url = "routes/routes.php?url=/states/"+state_data.id+"/children";

    Ext.getCmp("comboDistrict").expand();
    Ext.getCmp('comboDistrict').focus();
    setTimeout(function() {
      Ext.getStore('DistrictStore').load({
        callback: function(r, options, success) {
          Ext.getCmp("comboSchool").setValue("");
        }
      });
    }, 250);

  },

  onSelectDistrictCollapse: function(p, options) {
    Ext.getCmp('comboDistrict').setValue();
    Ext.getStore('DistrictStore').clearFilter();
    Ext.getStore('DistrictStore').clearData();
  },

  onComboDistrictSelect: function(combo, records, options) {
    setTimeout(function() {
      Ext.getCmp("selectSchool").enable();
      Ext.getCmp("selectDistrict").collapse();
    }, 250);

    var today = new Date();
    var next_year = new Date(today.getFullYear() + 1, today.getMonth(), today.getDay());
    Ext.util.Cookies.set('__district_id_saved', records[0].data.id, next_year);
    Ext.util.Cookies.set('__district_name_saved', records[0].data.name, next_year);
    district_data.id = records[0].data.id;
    district_data.name = records[0].data.name;
    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.set('district_id', records[0].data.id);
      local_store.set('district_name', records[0].data.name);
    } catch(err) {

    }
    if (records[0].data.UseLogin) {
      Ext.getCmp('school_selection_window').hide();
      var win = Ext.create("BigBrainzLauncher.view.LoginWindow");  
      win.show();  
      return;
    }
    Ext.getCmp('selectDistrict').setTitle(records[0].data.name);


  },

  onComboSchoolSelect: function(combo, records, options) {
    if (records[0].data.name == "District Overview") {
      var district_password_input = Ext.MessageBox.prompt('District Password', 'Please enter your district password.  If you don\'t know it, please call Big Brainz:', function(btn, password) {    
        if (btn == 'ok') {
          Ext.Ajax.request({
            method: 'POST',
            url: 'routes/routes.php?url=/login/district&method=post',
            params: {id:district_data.id, password: password},
            success: function(result) {
              var res = Ext.decode(result.responseText);
              if (res.success) {
                Ext.getCmp('school_selection_window').destroy();        
                Ext.create('BigBrainzLauncher.view.DistrictOverview'); 
              } else {
                Ext.Msg.alert('Incorrect Password', res.message); 
                Ext.getCmp("comboSchool").setValue("");
              }
            },
            failure: function() {
              Ext.Msg.alert("Could not log in.  Please try again.");
              Ext.getCmp("comboSchool").setValue("");
            }
          });      
        } else {
          Ext.getCmp("comboSchool").setValue("");      
        }      
      });  

      district_password_input.textField.inputEl.dom.type = 'password';  
      return;
    }
    var today = new Date();
    var next_year = new Date(today.getFullYear() + 1, today.getMonth(), today.getDay());
    Ext.util.Cookies.set('__school_id_saved', records[0].data.id, next_year);
    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.set('school_id', records[0].data.id);
      local_store.set('school_name', records[0].data.name);
    } catch(err) {

    }
    school_data.id = records[0].data.id;
    Ext.util.Cookies.set('__school_name_saved', records[0].data.name, next_year);
    Ext.getStore("ClassStore").proxy.url = "routes/routes.php?url=/schools/"+records[0].data.id+"/children";
    Ext.getStore("ClassStore").load();


    Ext.getStore("SchoolStore").proxy.url = "routes/routes.php?url=/schools/"+records[0].data.id+"/login_info";
    Ext.getStore("SchoolStore").load({
      callback: function(r, options, success) {
        var record = Ext.getStore('SchoolStore').data.items[0];
        Ext.getCmp("school_login_panel").expand();

        Ext.getCmp("school_login_panel").expand();
        Ext.getCmp("school_login_panel").show();
        if (record.data.HasPassword) {
          setTimeout(function() {        
            Ext.getCmp("school_with_password").show();
            Ext.getCmp("school_without_password").hide();
          }, 250);
        } else {
          setTimeout(function() {    
            Ext.getCmp("school_without_password").show();
            Ext.getCmp("school_with_password").hide();
          }, 250);  
        }
        Ext.getCmp('selectSchool').setTitle(record.data.name);
      }
    });
  },

  onSelectSchoolExpand: function(p, options) {
    Ext.getCmp("selectSchool").setTitle('Select Your School');

    Ext.getCmp("school_login_panel").hide();
    Ext.getCmp("school_with_password").hide();
    Ext.getCmp("school_without_password").hide();

    Ext.util.Cookies.clear('__school_id_saved');
    Ext.util.Cookies.clear('__school_name_saved');
    Ext.getCmp("comboSchool").setValue("");
    try {
      var local_store = Ext.state.LocalStorageProvider.create();   
      local_store.clear('school_id');
      local_store.clear('school_name');
    } catch(err) {

    }
    Ext.getStore("SchoolStore").proxy.url = "routes/routes.php?url=/districts/"+district_data.id+"/children";
    Ext.getCmp("comboSchool").expand();
    Ext.getCmp('comboSchool').focus();  
    setTimeout(function() {
      Ext.getStore('SchoolStore').load({
        callback: function(r, options, success) {
        }
      });
    }, 250);
  },

  onSelectSchoolCollapse: function(p, options) {
    Ext.getCmp('comboSchool').setValue();
    Ext.getStore('SchoolStore').clearFilter();
    Ext.getStore('SchoolStore').clearData();
  },

  onLogin_btnClick: function(button, e, options) {
    if (!LoginAttempt.active) {
      if (!Ext.getCmp('school_password').validate())
      {
        Ext.Msg.alert("Please enter in a password.");
        return;
      }
      LoginAttempt.active = true;
      var password = Ext.getCmp("school_password").value;
      Ext.Ajax.request({
        method: 'POST',
        url: 'routes/routes.php?url=/login&method=post',
        params: {id:school_data.id, password: password},
        success: function(result) {
          var res = Ext.decode(result.responseText);
          if (res.success) {
            if (Ext.getCmp('school_selection_window') === undefined) {

            } else {
              Ext.getCmp('school_selection_window').destroy();
            }
            if (res.access == "educator") {        
              var edu_view = Ext.create('BigBrainzLauncher.view.EducatorTreeViewport');
            } else {
              Ext.define('StudentPassword', {
                singleton: true,
                password: password
              });
              var stu_view = Ext.create('BigBrainzLauncher.view.StudentViewport');
            }
          } else {
            Ext.Msg.alert(res.errors.reason); 
          }
          LoginAttempt.active = false;
        },
        failure: function() {
          LoginAttempt.active = false;
          Ext.Msg.alert("Could not log in.  Please try again.");
        }
      });
    }
  },

  onLabelAfterRender: function(abstractcomponent, options) {
    abstractcomponent.getEl().on({
      click: function(el){
        var win = Ext.create("BigBrainzLauncher.view.StudentNeedPassword");
        win.show();
      },
      scope: abstractcomponent
    });
  },

  onSchool_with_passwordAfterLayout: function(abstractcontainer, layout, options) {
    Ext.getCmp('school_password').focus();
    Ext.getCmp('school_password').on('specialkey', function (el, e) {
      if(e.keyCode == e.ENTER) {
        Ext.getCmp('login_btn').fireEvent('click', {});
      } 
    });
  },

  onSchool_with_passwordAfterRender: function(abstractcomponent, options) {
    // the LoginAttempt singleton was added to eliminate errors when multiple login attempts are made at the same time
    Ext.define('LoginAttempt', {
      singleton: true,
      active: false
    });

    try {
      var bookmark = Ext.urlDecode(document.URL.split('?')[1]);
      school_pass = bookmark.school_pass;

      if (school_pass !== "" && school_pass !== undefined) {
        Ext.getCmp("school_password").setValue(school_pass);
        Ext.getCmp('login_btn').fireEvent('click', {});
      }
    } catch(err) {
      // exit, nothing else needs to be done
    }
  },

  onSchool_selection_windowAfterRender: function(abstractcomponent, options) {
    Ext.define('country_data', {
      singleton: true,
      id : '',
      name : ''
    });
    Ext.define('state_data', {
      singleton: true,
      id : '',
      name : ''
    });
    Ext.define('district_data', {
      singleton: true,
      id : '',
      name : ''
    });
    Ext.define('school_data', {
      singleton: true,
      id : '',
      name: ''
    });
    Ext.define('class_data', {
      singleton: true,
      id : '',
      name : ''
    });

    Ext.define('student_data', {
      singleton: true,
      id : '',
      name : '',
      username: ''
    });
    Ext.define('Ext.chart.theme.Fancy', {
      extend: 'Ext.chart.theme.Base',

      constructor: function(config) {
        this.callParent([Ext.apply({     
          colors: ['#66CC00', '#0066cc', '#FFFF00', '#FF0000']
        }, config)]);
      }
    });
    String.prototype.endsWith = function(suffix) {
      return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };

    var school_id = '';
    var district_id = '';
    var state_id = '';
    var country_id = '';

    var school_name = '';
    var district_name = '';
    var state_name = '';
    var country_name = '';


    try {
      var bookmark = Ext.urlDecode(document.URL.split('?')[1]);
      school_id = bookmark.school_id;
      district_id = bookmark.district_id;
      district_data.id = bookmark.district_id;
      state_id = bookmark.state_id;  
      country_id = bookmark.country_id;  

      school_name = bookmark.school_name;
      district_name = bookmark.district_name;
      district_data.name = bookmark.district_name;
      state_name = bookmark.state_name;
      country_name = bookmark.country_name;
    } catch(err) {

    }
    if (school_id === '' || school_id === undefined) {
      school_id = Ext.util.Cookies.get('__school_id_saved');
      school_name = Ext.util.Cookies.get('__school_name_saved');
      school_data.id = school_id;
    }
    if (school_id !== '' && school_id !== null && school_id !== undefined && district_id === '' && state_id === '' && country_id === '') {
      school_id = Ext.util.Cookies.get('__school_id_saved');
      school_name = Ext.util.Cookies.get('__school_name_saved');  

      district_id = Ext.util.Cookies.get('__district_id_saved');
      district_name = Ext.util.Cookies.get('__district_name_saved');
      district_data.id = Ext.util.Cookies.get('__district_id_saved');
      district_data.name = Ext.util.Cookies.get('__district_name_saved');

      state_id = Ext.util.Cookies.get('__state_id_saved');  
      state_name = Ext.util.Cookies.get('__state_name_saved');  
      state_data.id = state_id;
      state_data.name = state_name;

      country_id = Ext.util.Cookies.get('__country_id_saved');
      country_name = Ext.util.Cookies.get('__country_name_saved');
      country_data.id = country_id;
      country_data.name = country_name;
    }
    if (school_id !== '' && school_id !== null && school_id !== undefined)  {
      school_data.id = school_id;

      Ext.getCmp("selectSchool").setTitle(school_name);
      Ext.getCmp("selectDistrict").setTitle(district_name);
      Ext.getCmp("selectState").setTitle(state_name);  
      Ext.getCmp("selectCountry").setTitle(country_name);

      Ext.getCmp("selectCountry").enable();
      Ext.getCmp("selectState").enable();
      Ext.getCmp("selectDistrict").enable();
      Ext.getCmp("selectSchool").enable();

      Ext.getStore("SchoolStore").proxy.url = "routes/routes.php?url=/schools/"+school_data.id+"/login_info";
      Ext.getStore("SchoolStore").load({callback: function(r, options, success)  {
        Ext.getCmp("comboSchool").select(Ext.util.Cookies.get('__school_id_saved'));
        var record = Ext.getCmp("comboSchool").findRecord('id', school_id);

        Ext.getCmp("school_login_panel").expand();
        Ext.getCmp("school_login_panel").show();
        if (record.data.HasPassword) {
          setTimeout(function() {    
            Ext.getCmp("school_with_password").show();
          }, 250);      
        } else {
          setTimeout(function() {
            Ext.getCmp("school_without_password").show();
          }, 250);  
        }

      }});  
      Ext.getStore("ClassStore").proxy.url = "routes/routes.php?url=/schools/"+school_id+"/children";
      Ext.getStore("ClassStore").load();
    } else if (district_id !== '' && district_id !== null && district_id !== undefined) {
      Ext.Ajax.request({
        method: 'GET',
        url: 'routes/routes.php?url=/districts/' + district_data.id + '/login_info&method=get',
        success: function(result) {
          var res = Ext.decode(result.responseText);
          if (res.use_login) {
            Ext.getCmp('school_selection_window').hide();
            var win = Ext.create("BigBrainzLauncher.view.LoginWindow");  
            win.show();  
            return;
          }
        },
        failure: function() {
        }
      });
      Ext.getCmp("selectDistrict").setTitle(district_name);
      Ext.getCmp("selectState").setTitle(state_name);  
      Ext.getCmp("selectCountry").setTitle(country_name);

      Ext.getCmp("selectCountry").enable();
      Ext.getCmp("selectState").enable();
      Ext.getCmp("selectDistrict").enable();

      Ext.getStore("SchoolStore").proxy.url = "routes/routes.php?url=/districts/"+district_data.id+"/children";
      setTimeout(function() {
        Ext.getCmp("selectSchool").enable();
        Ext.getCmp("selectSchool").expand();
      }, 500);
    } else {
      Ext.getCmp("selectCountry").setTitle("United States");
      Ext.getCmp("selectState").enable();
      //Ext.getStore("StateStore").proxy.url = "http://bigbrainz.com/games/launcher/routes/us_states.json";
      Ext.getStore("StateStore").proxy.url = "routes/routes.php?url=/countries/BB01NOIP82414221620080617T170530968Z/children";  
      country_data.id = 'BB01NOIP82414221620080617T170530968Z';
      country_data.name = 'United States';
      Ext.getCmp("selectCountry").collapse();
      setTimeout(function () { Ext.getCmp("comboState").expand(); Ext.getCmp('comboState').focus();}, 250);

    }
  }

});
/*
 * File: app/view/StudentViewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.StudentViewport', {
  extend: 'Ext.container.Viewport',

  id: 'student_viewport',
  layout: {
    type: 'fit'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'container',
          layout: {
            align: 'stretch',
            type: 'vbox'
          },
          items: [
            {
              xtype: 'container',
              height: 90,
              html: '<div id="banner">\r\n	<div id="banner-left"></div>\r\n    <div id="banner-content"></div>\r\n	<div id="banner-right"></div>\r\n</div>\r\n<div id="logo"></div>\r\n<div id="pizza"></div>',
              id: 'unlock_container',
              maxHeight: 90,
              minHeight: 90,
              minWidth: 200,
              width: 200
            },
            {
              xtype: 'panel',
              flex: 1,
              hidden: false,
              id: 'student_classes_panel',
              autoScroll: true,
              maintainFlex: true,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: 'You are logged in as a student',
              items: [
                {
                  xtype: 'panel',
                  flex: 1,
                  id: 'student_class_list',
                  minWidth: 580,
                  autoScroll: true,
                  maintainFlex: false,
                  layout: {
                    type: 'fit'
                  },
                  dockedItems: [
                    {
                      xtype: 'toolbar',
                      dock: 'top',
                      height: 35,
                      items: [
                        {
                          xtype: 'combobox',
                          id: 'student_class_combobox',
                          width: 200,
                          fieldLabel: 'Class',
                          labelWidth: 50,
                          displayField: 'name',
                          store: 'ClassStore',
                          valueField: 'id',
                          listeners: {
                            select: {
                              fn: me.onComboboxSelect,
                              scope: me
                            }
                          }
                        },
                        {
                          xtype: 'tbspacer',
                          flex: 1
                        }
                      ]
                    }
                  ],
                  items: [
                    {
                      xtype: 'gridpanel',
                      id: 'student_classes_games_grid',
                      autoScroll: true,
                      title: '',
                      store: 'GameStore',
                      columns: [
                        {
                          xtype: 'gridcolumn',
                          dataIndex: 'name',
                          flex: 2,
                          text: 'Name'
                        }
                      ],
                      viewConfig: {

                      },
                      listeners: {
                        selectionchange: {
                          fn: me.onStudent_classes_games_gridSelectionChange,
                          scope: me
                        }
                      }
                    }
                  ]
                },
                {
                  xtype: 'panel',
                  flex: 2,
                  id: 'student_classes_details_panel',
                  autoScroll: false,
                  maintainFlex: true,
                  layout: {
                    type: 'fit'
                  },
                  dockedItems: [
                    {
                      xtype: 'toolbar',
                      dock: 'top',
                      height: 35,
                      items: [
                        {
                          xtype: 'label',
                          flex: 1,
                          margins: '1',
                          id: 'student_details_title',
                          text: 'Student Details'
                        },
                        {
                          xtype: 'tbspacer'
                        }
                      ]
                    }
                  ],
                  items: [
                    {
                      xtype: 'tabpanel',
                      hidden: true,
                      id: 'student_view_details',
                      activeTab: 0,
                      items: [
                        {
                          xtype: 'panel',
                          layout: {
                            type: 'fit'
                          },
                          title: 'Multiplication',
                          items: [
                            {
                              xtype: 'container',
                              hidden: false,
                              id: 'student_view_multiplication_container',
                              autoScroll: true,
                              layout: {
                                align: 'center',
                                pack: 'center',
                                type: 'vbox'
                              },
                              items: [
                                {
                                  xtype: 'chart',
                                  height: 250,
                                  id: 'student_view_multiplication_gauge',
                                  width: 400,
                                  animate: true,
                                  insetPadding: 20,
                                  store: 'GameStore',
                                  axes: [
                                    {
                                      position: 'gauge',
                                      type: 'Gauge',
                                      margin: 8,
                                      maximum: 100,
                                      minimum: 0
                                    }
                                  ],
                                  series: [
                                    {
                                      type: 'gauge',
                                      angleField: 'multiplication_progress',
                                      donut: 50
                                    }
                                  ]
                                },
                                {
                                  xtype: 'container',
                                  html: '<div id = \'play_multiplication\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayMultiplication_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayMultiplicationHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayMultiplication_150.png\'"/>\r\n</div>',
                                  style: 'cursor: pointer;',
                                  listeners: {
                                    afterrender: {
                                      fn: me.onContainerAfterRender2,
                                      scope: me
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          xtype: 'panel',
                          layout: {
                            type: 'fit'
                          },
                          title: 'Division',
                          items: [
                            {
                              xtype: 'container',
                              hidden: false,
                              id: 'student_view_division_container',
                              autoScroll: true,
                              layout: {
                                align: 'center',
                                pack: 'center',
                                type: 'vbox'
                              },
                              items: [
                                {
                                  xtype: 'chart',
                                  height: 250,
                                  id: 'student_view_division_gauge',
                                  width: 400,
                                  animate: true,
                                  insetPadding: 20,
                                  store: 'GameStore',
                                  axes: [
                                    {
                                      position: 'gauge',
                                      type: 'Gauge',
                                      margin: 8,
                                      maximum: 100,
                                      minimum: 0
                                    }
                                  ],
                                  series: [
                                    {
                                      type: 'gauge',
                                      angleField: 'Division_progress',
                                      donut: 50
                                    }
                                  ]
                                },
                                {
                                  xtype: 'container',
                                  html: '<div id = \'play_division\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayDivision_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayDivisionHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayDivision_150.png\'"/>\r\n</div>',
                                  style: 'cursor: pointer;',
                                  listeners: {
                                    afterrender: {
                                      fn: me.onContainerAfterRender12,
                                      scope: me
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        {
                          xtype: 'panel',
                          layout: {
                            type: 'fit'
                          },
                          title: 'Addition/Subtraction',
                          items: [
                            {
                              xtype: 'container',
                              hidden: false,
                              id: 'student_view_addsub_container',
                              autoScroll: true,
                              layout: {
                                align: 'center',
                                pack: 'center',
                                type: 'vbox'
                              },
                              items: [
                                {
                                  xtype: 'chart',
                                  height: 250,
                                  id: 'student_view_addsub_gauge',
                                  width: 400,
                                  animate: true,
                                  insetPadding: 20,
                                  store: 'GameStore',
                                  axes: [
                                    {
                                      position: 'gauge',
                                      type: 'Gauge',
                                      margin: 8,
                                      maximum: 100,
                                      minimum: 0
                                    }
                                  ],
                                  series: [
                                    {
                                      type: 'gauge',
                                      angleField: 'addsubtract_progress',
                                      donut: 50
                                    }
                                  ]
                                },
                                {
                                  xtype: 'container',
                                  html: '<div id = \'play_addsub\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayAddSub_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayAddSubHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayAddSub_150.png\'"/>\r\n</div>',
                                  style: 'cursor: pointer;',
                                  listeners: {
                                    afterrender: {
                                      fn: me.onContainerAfterRender121,
                                      scope: me
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              listeners: {
                afterrender: {
                  fn: me.onStudent_classes_panelAfterRender,
                  scope: me
                }
              }
            }
          ]
        }
      ],
      listeners: {
        afterrender: {
          fn: me.onStudent_viewportAfterRender,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onComboboxSelect: function(combo, records, options) {
    Ext.getCmp('student_view_details').hide();
    Ext.getStore("GameStore").proxy.url = "routes/routes.php?url=/classes/"+records[0].data.id+"/children";
    Ext.getCmp('student_classes_games_grid').store.load({
      scope   : this,
      callback: function(records, operation, success) {
        Ext.getStore('GameStore').filterBy(function(record, id){

          // password is not set, check against default password
          if (record.get('password') === '') {
            return Ext.getStore("SchoolStore").data.items[0].data.DefaultStudentPassword === Ext.util.Format.trim(StudentPassword.password);
          }

          // check password (not default)
          return Ext.util.Format.trim(record.get('password')) === Ext.util.Format.trim(StudentPassword.password);
        });
      }
    });

  },

  onStudent_classes_games_gridSelectionChange: function(tablepanel, selections, options) {
    if(Ext.getCmp('student_classes_games_grid').getSelectionModel().getSelection().length < 1) return;
    var name = Ext.getCmp('student_classes_games_grid').getSelectionModel().getSelection()[0].data.name;
    var id = Ext.getCmp('student_classes_games_grid').getSelectionModel().getSelection()[0].data.id;
    Ext.getCmp('student_details_title').setText(name);




    var store = new Ext.data.JsonStore({
      model: 'BigBrainzLauncher.model.GameModel'                                          
    });
    var data = Ext.getCmp('student_classes_games_grid').getSelectionModel().getSelection()[0].data;
    store.loadRawData(data);
    Ext.getCmp('student_view_multiplication_gauge').store = store;
    Ext.getCmp('student_view_division_gauge').store = store;
    Ext.getCmp('student_view_addsub_gauge').store = store;
    Ext.getCmp('student_view_details').show();
  },

  onContainerAfterRender2: function(abstractcomponent, options) {
    Ext.get('play_multiplication').on('click', function(eventObj, elRef) {
      var app_id = 'turbo';
      var idx = Ext.getStore('ClassStore').find('id', Ext.getCmp('student_class_combobox').value);
      var class_name = Ext.getStore('ClassStore').data.items[idx].data.name;
      if(class_name == 'Ninja Apprentice') {
        app_id = 'ninja1';
      } else if (class_name == 'Ninja') {
        app_id = 'ninja2';
      } else if (class_name == 'Ninja Master') {
        app_id = 'ninja3';
      } else if (class_name == 'Ninja Calculated' || class_name.endsWith('_*')) {
        app_id = 'ninjaC';
      }
      window.location.href = 'play.php?appid=' + app_id + '&school_id='+school_data.id+'&id='+Ext.getCmp('student_classes_games_grid').getSelectionModel().getSelection()[0].data.id;
    });
    setTimeout(function() {
      Ext.getCmp('student_view_multiplication_container').layout.layout();  
    }, 100);
  },

  onContainerAfterRender12: function(abstractcomponent, options) {
    Ext.get('play_division').on('click', function(eventObj, elRef) {
      window.location.href = 'play.php?appid=division&school_id='+school_data.id+'&id='+Ext.getCmp('student_classes_games_grid').getSelectionModel().getSelection()[0].data.id;
    });
    setTimeout(function() {
      Ext.getCmp('student_view_division_container').layout.layout();  
    }, 100);
  },

  onContainerAfterRender121: function(abstractcomponent, options) {
    Ext.get('play_addsub').on('click', function(eventObj, elRef) {
      window.location.href = 'play.php?appid=addsubtract&school_id='+school_data.id+'&id='+'&id='+Ext.getCmp('student_classes_games_grid').getSelectionModel().getSelection()[0].data.id;
    });
    setTimeout(function() {
      Ext.getCmp('student_view_addsub_container').layout.layout();  
    }, 100);
  },

  onStudent_classes_panelAfterRender: function(abstractcomponent, options) {
    height = Ext.getCmp('student_viewport').height;
    width = Ext.getCmp('student_class_list').width;
    Ext.getCmp('student_class_list').setSize(width, height-100);
    Ext.getCmp('student_class_combobox').expand();
    //grid_height = Ext.getCmp('educator_classes_games_grid').height;
    //grid_width = Ext.getCmp('educator_classes_games_grid').width;
    //Ext.getCmp('educator_classes_games_grid').setSize(width*.95, height);
  },

  onStudent_viewportAfterRender: function(abstractcomponent, options) {
    var status = Ext.getStore('SchoolStore').getById(school_data.id).data.status;
    if (status === "pizza_offer") {
      Ext.get('pizza').on('click', function(eventObj, elRef) {
        Ext.Msg.show({
          title:'Big Brainz',
          msg: 'Little Caesars is offering a free pizza party\nto the first 3rd-grade class at your school\nto finish Timez Attack this year!\n\nTo get started, just invite your Principal to login.',
          buttons: Ext.Msg.OK,
          animEl: 'elId'
        });
      });
    } else {
      Ext.get('pizza').hide(); 
    }
  }

});
/*
 * File: app/view/UnlockDeluxeWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.UnlockDeluxeWindow', {
  extend: 'Ext.window.Window',

  height: 576,
  hidden: false,
  id: 'unlock_deluxe_free_window',
  width: 796,
  layout: {
    type: 'fit'
  },
  title: 'Unlock Your Deluxe License',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          layout: {
            align: 'stretch',
            type: 'vbox'
          },
          title: '',
          items: [
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  layout: {
                    align: 'center',
                    pack: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        //if (newVal) {
                        //  checkbox.getEl().setStyle('background-color', 'white');
                        //}else {
                        //  checkbox.getEl().setStyle('background-color', 'red');
                        //}

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      flex: 1,
                      id: 'contactResponsibleCheckbox',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  layout: {
                    align: 'stretch',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'label',
                      flex: 1,
                      margins: '10',
                      padding: '20 0 0 0',
                      style: 'font-weight:bold;',
                      text: '#1 Is this the person responsible for fluency at your school?'
                    },
                    {
                      xtype: 'container',
                      flex: 1,
                      layout: {
                        align: 'stretch',
                        type: 'hbox'
                      },
                      items: [
                        {
                          xtype: 'textfield',
                          validator: function(value) {
                            if (value === "") {
                              return false;
                            } else {
                              return true;
                            }
                          },
                          flex: 1,
                          id: 'cnInput',
                          fieldLabel: '',
                          emptyText: 'Contact\'s Name',
                          listeners: {
                            change: {
                              fn: me.onTextfieldChange,
                              scope: me
                            }
                          }
                        },
                        {
                          xtype: 'textfield',
                          validator: function(value) {
                            if (value === "") {
                              return false;
                            } else {
                              return true;
                            }
                          },
                          flex: 1,
                          id: 'ceInput',
                          fieldLabel: '',
                          emptyText: 'Contact\'s Email',
                          regex: /^([\w\-\'\-]+)(\.[\w-\'\-]+)*@([\w\-]+\.){1,5}([A-Za-z]){2,4}$/,
                          listeners: {
                            change: {
                              fn: me.onCeInputChange,
                              scope: me
                            }
                          }
                        },
                        {
                          xtype: 'textfield',
                          validator: function(value) {
                            if (value === "") {
                              return false;
                            } else {
                              return true;
                            }
                          },
                          flex: 1,
                          id: 'cpInput',
                          fieldLabel: '',
                          emptyText: 'Contact\'s Phone Number',
                          maskRe: /[\(\)\d-]/,
                          listeners: {
                            change: {
                              fn: me.onCpInputChange,
                              scope: me
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  layout: {
                    align: 'center',
                    pack: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        //if (newVal) {
                        //  checkbox.getEl().setStyle('background-color', 'white');
                        //}else {
                        //  checkbox.getEl().setStyle('background-color', 'red');
                        //}

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      flex: 1,
                      id: 'principalAwareCheckbox',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  margins: '10',
                  layout: {
                    align: 'stretch',
                    pack: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'label',
                      flex: 1,
                      style: 'font-weight:bold;\ncursor:pointer;',
                      text: '#2 Has the Principal watched the “Principal’s Video” at http://www.bigbrainz.com/Implementation.php?',
                      listeners: {
                        afterrender: {
                          fn: me.onLabelAfterRender,
                          scope: me
                        }
                      }
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1.13,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  layout: {
                    align: 'center',
                    pack: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        //if (newVal) {
                        //  checkbox.getEl().setStyle('background-color', 'white');
                        //}else {
                        //  checkbox.getEl().setStyle('background-color', 'red');
                        //}

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      flex: 1,
                      id: 'runningCheckbox',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  margins: '10',
                  layout: {
                    align: 'stretch',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'label',
                      flex: 2,
                      padding: '30 0 0 0',
                      style: 'font-weight:bold;',
                      text: '#3 Is Timez Attack installed and functioning smoothly on your system?'
                    },
                    {
                      xtype: 'label',
                      flex: 1,
                      text: '(If you need any help, please email support@bigbrainz.com or call us (877) 356-7040!)'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1.25,
              layout: {
                align: 'stretch',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'container',
                  flex: 1,
                  margins: '10',
                  layout: {
                    align: 'center',
                    pack: 'center',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'checkboxfield',
                      handler: function(checkbox, newVal) {
                        //if (newVal) {
                        //  checkbox.getEl().setStyle('background-color', 'white');
                        //}else {
                        //  checkbox.getEl().setStyle('background-color', 'red');
                        //}

                        if (Ext.getCmp('cnInput').validate() &&
                        Ext.getCmp('ceInput').validate() &&
                        Ext.getCmp('cpInput').validate() &&
                        Ext.getCmp('contactResponsibleCheckbox').value &&
                        Ext.getCmp('principalAwareCheckbox').value &&
                        Ext.getCmp('runningCheckbox').value &&
                        Ext.getCmp('scheduleCheckbox').value) {
                          Ext.getCmp('pilotBtn').enable();
                        } else {
                          Ext.getCmp('pilotBtn').disable();
                        }
                      },
                      flex: 1,
                      id: 'scheduleCheckbox',
                      fieldLabel: '',
                      boxLabel: 'Yes'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 10,
                  margins: '10',
                  layout: {
                    align: 'stretch',
                    type: 'vbox'
                  },
                  items: [
                    {
                      xtype: 'label',
                      flex: 1,
                      padding: '30 0 0 0',
                      style: 'font-weight:bold;',
                      text: '#4 Have you scheduled enough computer time for students to play 30 minutes per week until finished?'
                    },
                    {
                      xtype: 'label',
                      flex: 1,
                      padding: '5 0 0 0',
                      text: '(You can obviously adapt this step to your needs, but it\'s proven far more effective to let one class or grade finish at a time rather than unleashing an entire school at once.)'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              flex: 1.5,
              layout: {
                align: 'stretch',
                type: 'vbox'
              },
              title: '',
              items: [
                {
                  xtype: 'label',
                  flex: 2,
                  id: 'deluxe_offer_title',
                  padding: '10 0 0 0',
                  style: 'text-align:center;\nfont-size:200%;\nfont-weight:bold;\nfont-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;',
                  text: 'Unlock Your Deluxe License'
                },
                {
                  xtype: 'label',
                  flex: 0.6,
                  id: 'intro_one',
                  style: 'text-align:center',
                  text: 'Because you have invested precious dollars in this program, we now share an obligation to ensure your students become fluent.'
                },
                {
                  xtype: 'label',
                  flex: 0.6,
                  id: 'intro_two',
                  style: 'text-align:center',
                  text: 'Please follow these 4 simple steps to ensure we accomplish that goal.'
                },
                {
                  xtype: 'label',
                  flex: 0.6,
                  id: 'intro_three',
                  style: 'text-align:center',
                  text: 'Teachers will also be invited to unlock their own class.  This feature can be disabled under options if necessary.'
                },
                {
                  xtype: 'label',
                  flex: 0.25,
                  style: 'text-align:center',
                  text: ''
                }
              ]
            }
          ],
          dockedItems: [
            {
              xtype: 'toolbar',
              flex: 1,
              dock: 'bottom',
              items: [
                {
                  xtype: 'tbspacer',
                  flex: 1
                },
                {
                  xtype: 'buttongroup',
                  title: '',
                  columns: 2,
                  layout: {
                    columns: 2,
                    type: 'table'
                  },
                  items: [
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        var id = school_data.id;
                        var cName  = Ext.getCmp('cnInput').value;
                        var cPhone = Ext.getCmp('cpInput').value;
                        var cEmail = Ext.getCmp('ceInput').value;
                        var ts = new Date().getTime();
                        var unlockedDate = Math.floor(ts/1000);


                        var store = Ext.getStore('SchoolStore');
                        var record = store.data.items[store.find('id', id)];


                        var subject = "Unlocking School";
                        var message = "Please unlock the deluxe version for:  http://james-pc:4567/schools/" + id;
                        if (record.data.status == 'offer_pilot') {
                          subject = "Unlocking Free School";
                          message = "Please free deluxe version for:  http://james-pc:4567/schools/" + id;
                        }

                        Ext.Ajax.request({
                          method: 'POST',
                          url: 'routes/routes.php?url=/emails&method=post',
                          params: {to:"clay@bigbrainz.com", from:cEmail, subject:subject, message:message},
                          success: function(result) {
                          },
                          failure: function() {    
                          }
                        });


                        var params = {ItemName:id, Contacts_EmailAddress:cEmail, Contacts_Name:cName, Contacts_PhoneNumber:cPhone, UnlockedDateTheir:unlockedDate};
                        if (record.data.status == 'offer_pilot') {
                          params.UnlockedDateOur = unlockedDate;
                        }

                        Ext.Ajax.request({
                          method: 'POST',
                          url: 'routes/routes.php?url=/schools&method=put',
                          params: params,
                          success: function(result) {
                            if (Ext.getDom('deluxe')) {
                              Ext.getDom('deluxe').id = "deluxeunlocked";
                              Ext.get('deluxeunlocked').on('click', function(eventObj, elRef) {});
                            }
                            if (Ext.getDom('pilotdeluxe')) {
                              Ext.getDom('pilotdeluxe').id = "pilotunlocked";
                              Ext.get('pilotunlocked').on('click', function(eventObj, elRef) {});
                            }
                            res = Ext.decode(result.responseText);
                            Ext.getCmp('unlock_deluxe_free_window').destroy();
                            var message = '<div style="text-align:center">Congratulations-your Deluxe License is now unlocked!<br />Once your students begin, please ensure they get roughly 30 minutes per week, until they are finished.</div>';
                            if (record.data.status == 'offer_pilot') {
                              message = '<div styel="text-align:center">Congratulations-you now have a Deluxe “PILOT CLASS” with slots for up to 30 students.<br />Please ensure that Pilot students play roughly 30 min each week until finished.<br /><br />(To Pilot our Deluxe Version with more than these 30 students, please call us.)</div>';
                            }
                            Ext.Msg.show({title:'Big Brainz',msg:message,button:Ext.Msg.OK,icon:Ext.Msg.INFO,width:500});
                          },
                          failure: function() {
                            Ext.Msg.alert("Could not unlock deluxe version.  Please try again.");
                          }
                        });
                        if (record.data.status == 'offer_pilot') {
                          record.data.status = 'deluxe';
                          var classes_url = "[";
                          classes_url += '{"DisplayableName":"Pilot Class", "PilotClass":"true","SizeLimit":"30", "ParentID":"'+id+'"}';
                          classes_url += ']';



                          Ext.Ajax.request({
                            method: 'POST',
                            url: 'routes/routes.php?url=/classes&method=post',
                            params: {new_classes:classes_url},
                            success: function(result) {    
                              var res = Ext.decode(result.responseText);
                              if (res.success) {
                                setTimeout(function() {
                                  var delNode;
                                  var treePanel = Ext.getCmp('school_tree');
                                  while (delNode = treePanel.getRootNode().childNodes[0]) {
                                    treePanel.getRootNode().removeChild(delNode);
                                  }

                                  Ext.getStore("ClassStore").load();
                                  Ext.getStore("SchoolTreeStore").load();          
                                },1000);
                              } else {
                                Ext.MessageBox.show({
                                  title   : 'Could not add classes',
                                  msg     : res.error
                                });
                              }
                            },
                            failure: function() {
                              Ext.Msg.alert("Could not unlock deluxe version.  Please try again.");
                            }
                          });
                        }
                      },
                      disabled: true,
                      id: 'pilotBtn',
                      text: 'Unlock Deluxe License'
                    },
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        Ext.getCmp('unlock_deluxe_free_window').destroy();
                      },
                      text: 'Finish Later'
                    }
                  ]
                },
                {
                  xtype: 'tbspacer',
                  flex: 1
                }
              ]
            }
          ],
          listeners: {
            afterrender: {
              fn: me.onPanelAfterRender,
              scope: me
            }
          }
        }
      ]
    });

    me.callParent(arguments);
  },

  onTextfieldChange: function(field, newValue, oldValue, options) {
    if (Ext.getCmp('cnInput').validate() &&
    Ext.getCmp('ceInput').validate() &&
    Ext.getCmp('cpInput').validate() &&
    Ext.getCmp('contactResponsibleCheckbox').value &&
    Ext.getCmp('principalAwareCheckbox').value &&
    Ext.getCmp('runningCheckbox').value &&
    Ext.getCmp('scheduleCheckbox').value) {
      Ext.getCmp('pilotBtn').enable();
    } else {
      Ext.getCmp('pilotBtn').disable();
    }
  },

  onCeInputChange: function(field, newValue, oldValue, options) {
    if (Ext.getCmp('cnInput').validate() &&
    Ext.getCmp('ceInput').validate() &&
    Ext.getCmp('cpInput').validate() &&
    Ext.getCmp('contactResponsibleCheckbox').value &&
    Ext.getCmp('principalAwareCheckbox').value &&
    Ext.getCmp('runningCheckbox').value &&
    Ext.getCmp('scheduleCheckbox').value) {
      Ext.getCmp('pilotBtn').enable();
    } else {
      Ext.getCmp('pilotBtn').disable();
    }
  },

  onCpInputChange: function(field, newValue, oldValue, options) {
    if (Ext.getCmp('cnInput').validate() &&
    Ext.getCmp('ceInput').validate() &&
    Ext.getCmp('cpInput').validate() &&
    Ext.getCmp('contactResponsibleCheckbox').value &&
    Ext.getCmp('principalAwareCheckbox').value &&
    Ext.getCmp('runningCheckbox').value &&
    Ext.getCmp('scheduleCheckbox').value) {
      Ext.getCmp('pilotBtn').enable();
    } else {
      Ext.getCmp('pilotBtn').disable();
    }
  },

  onLabelAfterRender: function(abstractcomponent, options) {
    abstractcomponent.getEl().on({
      click: function(el){
        var newwindow=window.open('http://www.bigbrainz.com/Implementation.php');
        if (window.focus) {newwindow.focus();}
        return false;
      },
      scope: abstractcomponent
    });
  },

  onPanelAfterRender: function(abstractcomponent, options) {
    var cName = "";
    var cEmail = "";
    var cPhone = "";

    var record_idx = Ext.getStore("SchoolStore").find('id', school_data.id);
    var record = Ext.getStore("SchoolStore").data.items[record_idx];
    Ext.getCmp('cnInput').setValue(record.data.cName);  
    Ext.getCmp('ceInput').setValue(record.data.cEmail);  
    Ext.getCmp('cpInput').setValue(record.data.cPhone);  
    if(record.data.status == 'offer_pilot') {
      Ext.getCmp('deluxe_offer_title').setText('Pilot the Deluxe Version');
      Ext.getCmp('intro_one').setText('Welcome! Our Pilot program will upgrade an entire class, up to 30 students, to our Deluxe Version.');
      Ext.getCmp('intro_two').setText('Please follow these 4 simple steps to begin your Pilot and ensure it will be successful.');
      Ext.getCmp('intro_three').setText('Students who play roughly 30 minutes per week will remain unlocked until they finish!');
    }
  }

});
/*
 * File: app/view/ReportErrorWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.ReportErrorWindow', {
  extend: 'Ext.window.Window',

  height: 690,
  id: 'report_error_window',
  width: 670,
  layout: {
    align: 'center',
    type: 'vbox'
  },
  title: 'Report Error',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          style: 'text-align:center;\r\nfont-weight:bold;\r\nfont-size:200%;',
          text: 'Oops!'
        },
        {
          xtype: 'container',
          height: 30
        },
        {
          xtype: 'label',
          style: 'text-align:center',
          text: 'Your last internet message didn\'t go through.  This could be due to a network issue.  If it is a network issue you should close and restart this program in about 5-10 minutes and it should work.'
        },
        {
          xtype: 'container',
          height: 25
        },
        {
          xtype: 'label',
          style: 'text-align:center',
          text: 'If this error pops up every time, you may have a firewall or a filter blocking our communications.  Please email the following report to support@bigbrainz.com:'
        },
        {
          xtype: 'container',
          height: 12
        },
        {
          xtype: 'textareafield',
          flex: 1,
          id: 'error_report_textarea',
          width: 500,
          fieldLabel: '',
          labelWidth: 0
        },
        {
          xtype: 'container',
          height: 30,
          width: 630,
          layout: {
            pack: 'end',
            type: 'hbox'
          },
          items: [
            {
              xtype: 'button',
              handler: function(button, event) {
                Ext.getCmp('report_error_window').close();
              },
              text: 'Close'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  }

});
/*
 * File: app/view/LoginWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.LoginWindow', {
  extend: 'Ext.window.Window',

  height: 222,
  id: 'login_window',
  width: 488,
  layout: {
    align: 'center',
    pack: 'center',
    type: 'vbox'
  },
  title: 'Login',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          padding: '20 20 0 20',
          style: 'text-align:center;',
          text: 'This district requires you to use a username and password.'
        },
        {
          xtype: 'label',
          padding: '5 20 20 20',
          text: 'If you do not have this information, please ask your teacher.'
        },
        {
          xtype: 'textfield',
          id: 'login_username',
          fieldLabel: 'Username'
        },
        {
          xtype: 'textfield',
          id: 'login_password',
          inputType: 'password',
          fieldLabel: 'Password',
          minLength: 1,
          minLengthText: 'Password field must not be blank.'
        },
        {
          xtype: 'container',
          width: 250,
          layout: {
            type: 'hbox'
          },
          items: [
            {
              xtype: 'container',
              flex: 1
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                Ext.define('student_data', {
                  singleton: true,
                  id : '',
                  name : '',
                  username: ''
                });

                var username = Ext.getCmp('login_username').value;
                var password = Ext.getCmp('login_password').value;

                Ext.Ajax.request({
                  method: 'POST',
                  url: 'routes/routes.php?url=/login/student&method=post',
                  params: {username:username, password: password},
                  success: function(result) {
                    var res = Ext.decode(result.responseText);
                    if (res.success) {
                      if (Ext.getCmp('login_window') === undefined) {

                      } else {
                        Ext.getCmp('login_window').destroy();                
                      }
                      if (Ext.getCmp('school_selection_window') === undefined) {

                      } else {
                        Ext.getCmp('school_selection_window').destroy();
                      }
                      student_data.id = res.data[0].id;
                      student_data.name = res.data[0].name;
                      student_data.username = res.data[0].name;
                      school_data.id = res.data[0].school_id;      
                      Ext.getStore('GameStore').loadRawData(res);      
                      var stu_view = Ext.create('BigBrainzLauncher.view.StudentLoginViewport');
                    } else {
                      Ext.Msg.alert("Could not log in.  Please try again.");
                    }
                  },
                  failure: function() {
                    Ext.Msg.alert("Could not log in.  Please try again.");
                  }
                });
              },
              text: 'Login'
            }
          ]
        },
        {
          xtype: 'container',
          width: 450,
          layout: {
            type: 'hbox'
          },
          items: [
            {
              xtype: 'container',
              flex: 1
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                var district_password_input = Ext.MessageBox.prompt('District Password', 'Please enter your district password.  If you don\'t know it, please call Big Brainz:', function(btn, password) {    
                  if (btn == 'ok') {
                    Ext.Ajax.request({
                      method: 'POST',
                      url: 'routes/routes.php?url=/login/district&method=post',
                      params: {id:district_data.id, password: password},
                      success: function(result) {
                        var res = Ext.decode(result.responseText);
                        if (res.success) {
                          Ext.getCmp('login_window').destroy();        
                          Ext.create('BigBrainzLauncher.view.DistrictOverview'); 
                        } else {
                          Ext.Msg.alert('Incorrect Password', res.message); 
                          Ext.getCmp("comboSchool").setValue("");
                        }
                      },
                      failure: function() {
                        Ext.Msg.alert("Could not log in.  Please try again.");
                        Ext.getCmp("comboSchool").setValue("");
                      }
                    });      
                  } else {
                    Ext.getCmp("comboSchool").setValue("");
                  }      
                });  
                district_password_input.textField.inputEl.dom.type = 'password';
                return;
              },
              hidden: true,
              text: 'View District Progress'
            }
          ]
        }
      ],
      listeners: {
        beforeclose: {
          fn: me.onLogin_windowBeforeClose,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onLogin_windowBeforeClose: function(panel, options) {
    Ext.getCmp('selectDistrict').expand();
    Ext.getCmp('school_selection_window').show();

  }

});
/*
 * File: app/view/StudentLoginViewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.StudentLoginViewport', {
  extend: 'Ext.container.Viewport',

  layout: {
    type: 'fit'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          id: 'student_classes_details_panel',
          autoScroll: false,
          maintainFlex: true,
          layout: {
            type: 'fit'
          },
          items: [
            {
              xtype: 'tabpanel',
              hidden: false,
              id: 'student_view_details',
              activeTab: 0,
              items: [
                {
                  xtype: 'panel',
                  layout: {
                    type: 'fit'
                  },
                  title: 'Multiplication',
                  items: [
                    {
                      xtype: 'container',
                      hidden: false,
                      id: 'student_view_multiplication_container',
                      autoScroll: true,
                      layout: {
                        align: 'center',
                        pack: 'center',
                        type: 'vbox'
                      },
                      items: [
                        {
                          xtype: 'chart',
                          height: 250,
                          id: 'student_view_multiplication_gauge',
                          width: 400,
                          animate: true,
                          insetPadding: 20,
                          store: 'GameStore',
                          axes: [
                            {
                              position: 'gauge',
                              type: 'Gauge',
                              margin: 8,
                              maximum: 100,
                              minimum: 0
                            }
                          ],
                          series: [
                            {
                              type: 'gauge',
                              angleField: 'multiplication_progress',
                              donut: 50
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          flex: 1,
                          id: 'progress_table'
                        },
                        {
                          xtype: 'container',
                          html: '<div id = \'play_multiplication\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayMultiplication_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayMultiplicationHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayMultiplication_150.png\'"/>\r\n</div>',
                          style: 'cursor: pointer;',
                          listeners: {
                            afterrender: {
                              fn: me.onContainerAfterRender,
                              scope: me
                            }
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  xtype: 'panel',
                  layout: {
                    type: 'fit'
                  },
                  title: 'Division',
                  items: [
                    {
                      xtype: 'container',
                      hidden: false,
                      id: 'student_view_division_container',
                      autoScroll: true,
                      layout: {
                        align: 'center',
                        pack: 'center',
                        type: 'vbox'
                      },
                      items: [
                        {
                          xtype: 'chart',
                          height: 250,
                          id: 'student_view_division_gauge',
                          width: 400,
                          animate: true,
                          insetPadding: 20,
                          store: 'GameStore',
                          axes: [
                            {
                              position: 'gauge',
                              type: 'Gauge',
                              margin: 8,
                              maximum: 100,
                              minimum: 0
                            }
                          ],
                          series: [
                            {
                              type: 'gauge',
                              angleField: 'Division_progress',
                              donut: 50
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          html: '<div id = \'play_division\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayDivision_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayDivisionHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayDivision_150.png\'"/>\r\n</div>',
                          style: 'cursor: pointer;',
                          listeners: {
                            afterrender: {
                              fn: me.onContainerAfterRender1,
                              scope: me
                            }
                          }
                        }
                      ]
                    }
                  ],
                  listeners: {
                    activate: {
                      fn: me.onPanelActivate,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'panel',
                  layout: {
                    type: 'fit'
                  },
                  title: 'Addition/Subtraction',
                  items: [
                    {
                      xtype: 'container',
                      hidden: false,
                      id: 'student_view_addsub_container',
                      autoScroll: true,
                      layout: {
                        align: 'center',
                        pack: 'center',
                        type: 'vbox'
                      },
                      items: [
                        {
                          xtype: 'chart',
                          height: 250,
                          id: 'student_view_addsub_gauge',
                          width: 400,
                          animate: true,
                          insetPadding: 20,
                          store: 'GameStore',
                          axes: [
                            {
                              position: 'gauge',
                              type: 'Gauge',
                              margin: 8,
                              maximum: 100,
                              minimum: 0
                            }
                          ],
                          series: [
                            {
                              type: 'gauge',
                              angleField: 'addsubtract_progress',
                              donut: 50
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          html: '<div id = \'play_addsub\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayAddSub_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayAddSubHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayAddSub_150.png\'"/>\r\n</div>',
                          style: 'cursor: pointer;',
                          listeners: {
                            afterrender: {
                              fn: me.onContainerAfterRender11,
                              scope: me
                            }
                          }
                        }
                      ]
                    }
                  ],
                  listeners: {
                    activate: {
                      fn: me.onPanelActivate1,
                      scope: me
                    }
                  }
                }
              ]
            }
          ],
          listeners: {
            afterlayout: {
              fn: me.onStudent_classes_details_panelAfterLayout,
              scope: me
            }
          }
        }
      ]
    });

    me.callParent(arguments);
  },

  onContainerAfterRender: function(abstractcomponent, options) {
    Ext.get('play_multiplication').on('click', function(eventObj, elRef) {
      window.location.href = 'play.php?appid=turbo&school_id='+school_data.id+'&id='+student_data.id;
    });
  },

  onContainerAfterRender1: function(abstractcomponent, options) {
    Ext.get('play_division').on('click', function(eventObj, elRef) {
      window.location.href = 'play.php?appid=division&school_id='+school_data.id+'&id='+student_data.id;
    });
  },

  onPanelActivate: function(abstractcomponent, options) {
    setTimeout(function() {Ext.getCmp('student_view_division_container').layout.layout();}, 100);
  },

  onContainerAfterRender11: function(abstractcomponent, options) {
    Ext.get('play_addsub').on('click', function(eventObj, elRef) {
      window.location.href = 'play.php?appid=addsubtract&school_id='+school_data.id+'&id='+student_data.id;
    });
  },

  onPanelActivate1: function(abstractcomponent, options) {
    setTimeout(function() {Ext.getCmp('student_view_addsub_container').layout.layout();}, 100);
  },

  onStudent_classes_details_panelAfterLayout: function(abstractcontainer, layout, options) {
    setTimeout(function() {
      Ext.getCmp('student_view_multiplication_container').layout.layout();  
    }, 100);
  }

});
/*
 * File: app/view/PizzaPartySignup.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.PizzaPartySignup', {
  extend: 'Ext.window.Window',

  height: 718,
  id: 'PizzaPartySignup',
  width: 815,
  autoScroll: false,
  title: 'Pizza Party',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'container',
          height: 800,
          layout: {
            align: 'center',
            type: 'vbox'
          },
          items: [
            {
              xtype: 'label',
              padding: 10,
              style: 'font-size:300%;text-align:center;font-weight:bold;',
              text: 'Finish Timez Attack—Get a Pizza Party!'
            },
            {
              xtype: 'label',
              padding: 10,
              style: 'font-size:150%;text-align:justify;font-weight:bold;',
              text: 'Big Brainz and Little Caesars have teamed up to help every 3rd-grader in Utah master their multiplication facts this year by giving a free pizza party to the first 3rd-grade class in the school to finish Timez Attack!'
            },
            {
              xtype: 'form',
              height: 147,
              padding: 10,
              width: 766,
              layout: {
                align: 'stretch',
                pack: 'center',
                padding: '',
                type: 'vbox'
              },
              bodyPadding: 10,
              items: [
                {
                  xtype: 'textfield',
                  id: 'principal_name',
                  fieldLabel: 'Principal Name'
                },
                {
                  xtype: 'textfield',
                  id: 'principal_email',
                  fieldLabel: 'Principal Email'
                },
                {
                  xtype: 'textfield',
                  id: 'address',
                  width: 600,
                  fieldLabel: 'Address to mail pizza party certificate to',
                  labelWidth: 250
                },
                {
                  xtype: 'fieldcontainer',
                  layout: {
                    align: 'stretchmax',
                    type: 'hbox'
                  },
                  fieldLabel: '',
                  labelAlign: 'right',
                  items: [
                    {
                      xtype: 'textfield',
                      id: 'city',
                      width: 266,
                      fieldLabel: 'City',
                      labelWidth: 50
                    },
                    {
                      xtype: 'textfield',
                      id: 'state',
                      width: 227,
                      fieldLabel: 'State',
                      labelAlign: 'right',
                      labelWidth: 50
                    },
                    {
                      xtype: 'textfield',
                      id: 'zip',
                      width: 230,
                      fieldLabel: 'Zip',
                      labelAlign: 'right',
                      labelWidth: 50
                    }
                  ]
                }
              ],
              listeners: {
                afterrender: {
                  fn: me.onFormAfterRender,
                  scope: me
                }
              }
            },
            {
              xtype: 'form',
              height: 200,
              id: 'class_list_checkbox',
              width: 747,
              layout: {
                align: 'stretchmax',
                type: 'vbox'
              },
              bodyPadding: 10,
              title: '',
              items: [
                {
                  xtype: 'label',
                  style: 'font-size:150%;text-align:center;',
                  width: 710,
                  text: 'Classes that will need to become fluent:'
                },
                {
                  xtype: 'label',
                  style: 'color:red;text-align:center;',
                  width: 710,
                  text: 'Please ensure that all 3rd-grade classes are set up and selected before submitting.'
                },
                {
                  xtype: 'container',
                  flex: 1,
                  id: 'class_list_signup',
                  style: 'border-style:solid;\r\nborder-width:1px;',
                  tpl: [
                    '<table style="margin-left: auto;margin-right: auto;">',
                    '  <tpl for=".">',
                    '    <tpl if="(xindex - 1) &lt; (xcount / 2)">',
                    '      <tr>',
                    '        <td>',
                    '          <input type="checkbox" id ="{id}_checkbox" /> {name}',
                    '        </td>',
                    '        <tpl if="parent[xindex - 1 + Math.ceil(xcount / 2)] != undefined">',
                    '          <td width = "20"></td>',
                    '          <td>',
                    '            <input type="checkbox" id ="{[parent[xindex - 1 + Math.ceil(xcount / 2)].id]}_checkbox" /> {[parent[xindex - 1 + Math.ceil(xcount / 2)].name]} ',
                    '          </td>',
                    '        </tpl>      ',
                    '      </tr>			',
                    '    </tpl>',
                    '  </tpl>',
                    '</table>'
                  ],
                  width: 722,
                  autoScroll: true,
                  listeners: {
                    afterrender: {
                      fn: me.onContainerAfterRender,
                      scope: me
                    }
                  }
                }
              ]
            },
            {
              xtype: 'checkboxfield',
              id: 'principal_checkbox',
              fieldLabel: '',
              boxLabel: 'I am the Principal and we would like to shoot for the pizza party.  Thanks!'
            },
            {
              xtype: 'container',
              minHeight: 30,
              width: 778,
              layout: {
                align: 'stretchmax',
                pack: 'center',
                type: 'hbox'
              },
              items: [
                {
                  xtype: 'button',
                  handler: function(button, event) {
                    var name    = Ext.getCmp('principal_name').value;
                    var email   = Ext.getCmp('principal_email').value;
                    var address = Ext.getCmp('address').value;
                    var city    = Ext.getCmp('city').value;
                    var state   = Ext.getCmp('state').value;
                    var zip     = Ext.getCmp('zip').value;

                    if (name === "" || email === "" || address === "" || city === "" || state === "" || zip === "" ||
                    name === undefined || email === undefined || address === undefined || city === undefined || state === undefined || zip === undefined) {
                      Ext.Msg.show({
                        title:'Big Brainz',
                        msg: 'Oops, we\'re missing some contact info.',
                        buttons: Ext.Msg.OK,
                        animEl: 'elId'
                      });
                      return;
                    }
                    var class_ids = [];
                    Ext.each(Ext.query('input[id^=BB]'), function( item ) {
                      if(item.checked) {
                        class_ids.push(item.id.substring(0, item.id.length-9));
                        var p_id = item.id.substring(0, item.id.length-9);
                        var p_node = Ext.getStore('SchoolTreeStore').getNodeById(p_id);
                        var p_d = Ext.get(Ext.getCmp('school_tree').view.getNode(p_node))
                        Ext.get(p_d.id).addCls("pizzaclassred")
                      }
                    });
                    if(class_ids.length < 1) {
                      Ext.Msg.show({
                        title:'Big Brainz',
                        msg: 'Oops, please select all your 3rd-grade classes.',
                        buttons: Ext.Msg.OK,
                        animEl: 'elId'
                      });
                      return;
                    }
                    if(class_ids.length < 1) {
                      Ext.Msg.show({
                        title:'Big Brainz',
                        msg: 'Oops, please confirm that you are the principal.',
                        buttons: Ext.Msg.OK,
                        animEl: 'elId'
                      });
                      return;
                    }
                    if(!Ext.getCmp('principal_checkbox').checked) {
                      Ext.Msg.show({
                        title:'Big Brainz',
                        msg: 'Please check off that you are the principal of this school.',
                        buttons: Ext.Msg.OK,
                        animEl: 'elId'
                      });
                      return;
                    }

                    var params = {};
                    params.id = school_data.id;
                    params.school_name = school_data.name;
                    if (params.school_name === '') {
                      params.school_name = Ext.util.Cookies.get('__school_name_saved'); 
                    }

                    params.name = name;
                    params.email = email;
                    params.address = address;
                    params.city = city;
                    params.state = state;
                    params.zip = zip;

                    params.class_ids = Ext.encode(class_ids);

                    Ext.Ajax.request({
                      method: 'POST',
                      url: 'routes/routes.php?url=/pizzapartysignup&method=post',
                      params: params,
                      callback: function(options, success, response) {
                        if (!success) {

                        } else {
                          Ext.getDom('pizza').id = "deluxeunlocked"; 
                          Ext.Msg.show({
                            title:'Big Brainz',
                            msg: 'Congratulations--You\'re on your way to a pizza party!',
                            buttons: Ext.Msg.OK,
                            animEl: 'elId'
                          });
                          Ext.getCmp('PizzaPartySignup').close();
                        }
                      }
                    });         
                  },
                  text: 'Submit'
                },
                {
                  xtype: 'container',
                  width: 30
                },
                {
                  xtype: 'button',
                  handler: function(button, event) {
                    Ext.getCmp('PizzaPartySignup').close();
                  },
                  text: 'Cancel'
                }
              ]
            },
            {
              xtype: 'label',
              padding: '10 0 0 0',
              style: 'font-size:90%',
              text: 'DETAILS AND CUSTOMIZATION'
            },
            {
              xtype: 'label',
              padding: '0 10 10 10',
              style: 'font-size:90%;text-align:justify;',
              text: 'Little Caesars is donating a pizza party for one 3rd-grade class to invited schools only. Consolation parties for the other classes are strongly encouraged, but are at your own discretion. You may adapt these requirements as you see fit if some students in the class have special needs. Also, if you are still targeting fluency in 4th-grade you may switch these requirements to that grade. When you’re done, call Big Brainz (877) 356-7040 to verify your success and claim your pizza certificates. This promotion assumes normal class sizes of roughly 20 to 30 students. Please allow 2 to 4 weeks for processing your pizza certificates before the end of the school year. Schools will be responsible for picking up the pizzas from participating franchises, so please double-check that there is a Little Caesars close enough to you.'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onFormAfterRender: function(abstractcomponent, options) {
    var url = 'routes/routes.php?url=/pizzapartysignup/' + school_data.id + '&method=get';
    Ext.Ajax.request({
      method: 'GET',
      url: url,
      success: function(response){
        var resp = Ext.decode(response.responseText);
        Ext.getCmp('principal_name').setValue(resp.principal_name);
        Ext.getCmp('principal_email').setValue(resp.principal_email);
        Ext.getCmp('address').setValue(resp.address);
        Ext.getCmp('city').setValue(resp.city);
        Ext.getCmp('state').setValue(resp.state);
        Ext.getCmp('zip').setValue(resp.zip);
      }  
    });
  },

  onContainerAfterRender: function(abstractcomponent, options) {
    var data = [];
    var store = Ext.getStore('ClassStore');
    var class_size = store.data.items.length;
    for (var i = 0; i < class_size; i++) {
      data.push({id:store.data.items[i].data.id,name:store.data.items[i].data.name});
    }
    Ext.getCmp('class_list_signup').update(data);
  }

});
/*
 * File: app/view/DeleteMultipleClasses.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.DeleteMultipleClasses', {
  extend: 'Ext.window.Window',

  height: 500,
  id: 'delete_multiple_classes_window',
  width: 400,
  autoScroll: true,
  title: 'Delete Multiple Classes',
  modal: true,

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'container',
          autoScroll: true,
          layout: {
            type: 'fit'
          },
          items: [
            {
              xtype: 'container',
              height: 259,
              width: 492,
              autoScroll: false,
              items: [
                {
                  xtype: 'gridpanel',
                  id: 'advance_settings_grid',
                  maxHeight: 300,
                  autoScroll: false,
                  store: 'ClassStore',
                  columns: [
                    {
                      xtype: 'gridcolumn',
                      dataIndex: 'name',
                      text: 'Class Name'
                    }
                  ],
                  viewConfig: {

                  },
                  selModel: Ext.create('Ext.selection.CheckboxModel', {

                  })
                }
              ]
            }
          ]
        }
      ],
      dockedItems: [
        {
          xtype: 'toolbar',
          dock: 'top',
          minHeight: 110,
          autoScroll: false,
          items: [
            {
              xtype: 'tbseparator'
            },
            {
              xtype: 'button',
              handler: function(button, event) {
                var selected = Ext.getCmp('advance_settings_grid').getSelectionModel().getSelection();
                if (selected.length < 1) {
                  Ext.MessageBox.alert('Big Brainz', 'Please select classes to delete.');
                }

                var length = selected.length;
                var term = 'classes';
                if (length == 1) term = 'class';


                Ext.MessageBox.confirm('Delete Classes?', 'Are you sure you want to delete ' + length + ' ' + term + '?', function(btn) {
                  if (btn == "yes") {
                    var ids = [];
                    for (i = 0; i < length; i++) {
                      if (selected[i].data.PilotClass) {
                        continue;
                      }
                      ids.push(selected[i].data.id);      
                    }              
                    Ext.getCmp('delete_multiple_classes_window').getEl().mask();
                    Ext.getCmp('delete_multiple_classes_window').delete_classes(ids, function() {
                      setTimeout(function() {
                        var delNode;
                        var treePanel = Ext.getCmp('school_tree');
                        while (delNode = treePanel.getRootNode().childNodes[0]) {
                          treePanel.getRootNode().removeChild(delNode);
                        }
                        Ext.getStore("ClassStore").load();
                        Ext.getStore("SchoolTreeStore").load();
                        Ext.getCmp('delete_multiple_classes_window').getEl().unmask();
                      } , 1000);
                    });
                  }
                });
              },
              text: 'Delete'
            },
            {
              xtype: 'tbseparator'
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  delete_classes: function(ids, callback) {
    var failed_deleted_ids = [];
    _delete_classes(ids);
    function _delete_classes(ids) {  
      if(ids.length)
      {
        var id = ids.shift();
        var ts = new Date().getTime();
        ts = Math.floor(ts/1000);
        var params = {ItemName:id, DeletionDate:ts};
        Ext.Ajax.request({
          method: 'POST',
          url: 'routes/routes.php?url=/classes&method=put',
          params: params,
          callback: function(options, success, response) {
            if (!success) {
              failed_deleted_ids.push(id);
            }
            _delete_classes(ids);
          }
        });         
      } else {
        callback(failed_deleted_ids);
      }
    }
  }

});
/*
 * File: app/view/EducatorViewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.EducatorViewport', {
  extend: 'Ext.container.Viewport',

  id: 'educator_viewport',
  autoScroll: false,
  layout: {
    type: 'fit'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'panel',
          autoScroll: true,
          dockedItems: [
            {
              xtype: 'toolbar',
              dock: 'top',
              autoScroll: false,
              items: [
                {
                  xtype: 'buttongroup',
                  title: '',
                  columns: 4,
                  layout: {
                    columns: 4,
                    type: 'table'
                  },
                  items: [
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        if (Ext.getCmp("classes_button").pressed) Ext.getCmp("classes_button").toggle();
                        if (Ext.getCmp("reports_button").pressed) Ext.getCmp("reports_button").toggle();
                        if (Ext.getCmp("profile_button").pressed) Ext.getCmp("profile_button").toggle();
                        Ext.getCmp("educator_home_panel").show();
                        Ext.getCmp("educator_classes_panel").hide();
                        Ext.getCmp("educator_settings_panel").hide();
                        Ext.getCmp("educator_reports_panel").hide();
                      },
                      id: 'home_button',
                      enableToggle: true,
                      text: 'Home'
                    },
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        if (Ext.getCmp("home_button").pressed) Ext.getCmp("home_button").toggle();
                        if (Ext.getCmp("reports_button").pressed) Ext.getCmp("reports_button").toggle();
                        if (Ext.getCmp("profile_button").pressed) Ext.getCmp("profile_button").toggle();
                        Ext.getCmp("educator_home_panel").hide();
                        Ext.getCmp("educator_classes_panel").show();
                        Ext.getCmp("educator_settings_panel").hide();
                        Ext.getCmp("educator_reports_panel").hide();
                      },
                      id: 'classes_button',
                      enableToggle: true,
                      text: 'Classes'
                    },
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        if (Ext.getCmp("home_button").pressed) Ext.getCmp("home_button").toggle();
                        if (Ext.getCmp("classes_button").pressed) Ext.getCmp("classes_button").toggle();
                        if (Ext.getCmp("profile_button").pressed) Ext.getCmp("profile_button").toggle();

                        Ext.getCmp("educator_reports_panel").show();
                        Ext.getCmp("educator_home_panel").hide();
                        Ext.getCmp("educator_classes_panel").hide();
                        Ext.getCmp("educator_settings_panel").hide();

                      },
                      id: 'reports_button',
                      enableToggle: true,
                      text: 'Reports'
                    },
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        if (Ext.getCmp("home_button").pressed) Ext.getCmp("home_button").toggle();
                        if (Ext.getCmp("classes_button").pressed) Ext.getCmp("classes_button").toggle();
                        if (Ext.getCmp("reports_button").pressed) Ext.getCmp("reports_button").toggle();
                        Ext.getCmp("educator_home_panel").hide();
                        Ext.getCmp("educator_classes_panel").hide();
                        Ext.getCmp("educator_settings_panel").show();
                        Ext.getCmp("educator_reports_panel").hide();
                      },
                      id: 'profile_button',
                      enableToggle: true,
                      text: 'Settings'
                    }
                  ]
                },
                {
                  xtype: 'tbspacer',
                  flex: 10
                },
                {
                  xtype: 'button',
                  handler: function(button, event) {
                    var view = Ext.create('BigBrainzLauncher.view.UnlockDeluxeWindow');
                    view.show();
                  },
                  disabled: true,
                  id: 'unlock_btn',
                  text: 'Unlock Deluxe Version',
                  listeners: {
                    afterrender: {
                      fn: me.onUnlock_btnAfterRender,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'button',
                  handler: function(button, event) {
                    Ext.util.Cookies.clear('school_id_saved');
                    window.location.reload();
                  },
                  flex: 1,
                  text: 'Logout'
                }
              ]
            }
          ],
          items: [
            {
              xtype: 'panel',
              id: 'educator_home_panel',
              title: '',
              items: [
                {
                  xtype: 'gridpanel',
                  id: 'educator_classes_grid',
                  title: '',
                  store: 'ClassStore',
                  columns: [
                    {
                      xtype: 'actioncolumn',
                      flex: 1,
                      items: [
                        {
                          handler: function(view, rowIndex, colIndex, item, e) {
                            var grid = Ext.getCmp('educator_classes_grid');
                            var store = grid.store;
                            var rec = store.getAt(rowIndex);
                            var name = rec.data.name;
                            var id = rec.data.id;

                            term = 'class';
                            Ext.MessageBox.confirm('Delete Class?', 'Are you sure you want to delete this ' + name + '?', function(btn) {
                              if (btn == "yes") {    
                                classes_to_delete = "%5b";    
                                classes_to_delete += '%22' + id + '%22,';
                                classes_to_delete = classes_to_delete.slice(0, -1);
                                classes_to_delete += '%5d';
                                Ext.Ajax.request({
                                  method: 'POST',
                                  url: 'routes/routes.php?url=/classes&method=delete',
                                  params: {ids:classes_to_delete},
                                  success: function(result) {
                                    res = Ext.decode(result.responseText);
                                    if (res.success) {
                                      setTimeout(function() {Ext.getStore("ClassStore").load();}, 1000);
                                    } else {
                                      Ext.Msg.alert(res.error); 
                                    }
                                  },
                                  failure: function() {
                                    Ext.Msg.alert("Could not delete class.  Please try again.");
                                  }
                                });
                              }
                            });
                          },
                          altText: 'Delete Class',
                          icon: 'http://icons.iconarchive.com/icons/oxygen-icons.org/oxygen/16/Actions-edit-delete-icon.png',
                          tooltip: 'Delete Class'
                        },
                        {
                          handler: function(view, rowIndex, colIndex, item, e) {
                            var grid = Ext.getCmp('educator_classes_grid');
                            var store = grid.store;
                            var rec = store.getAt(rowIndex);
                            var col = grid.getView().getHeaderCt().getHeaderAtIndex(2);
                            Ext.getCmp('educator_classes_grid').editingPlugin.startEdit(rec, col);
                          },
                          altText: 'Edit Class',
                          icon: 'http://icons.iconarchive.com/icons/oxygen-icons.org/oxygen/16/Actions-document-edit-icon.png',
                          tooltip: 'Edit Class'
                        }
                      ]
                    },
                    {
                      xtype: 'gridcolumn',
                      dataIndex: 'name',
                      flex: 1,
                      text: 'Class Name',
                      editor: {
                        xtype: 'textfield'
                      }
                    },
                    {
                      xtype: 'numbercolumn',
                      dataIndex: 'game_count',
                      flex: 1,
                      text: 'Number of Students',
                      format: '0'
                    }
                  ],
                  viewConfig: {

                  },
                  selModel: Ext.create('Ext.selection.CheckboxModel', {
                    listeners: {
                      selectionchange: {
                        fn: me.onCheckboxselectionmodelSelectionChange1,
                        scope: me
                      }
                    }
                  }),
                  plugins: [
                    Ext.create('Ext.grid.plugin.RowEditing', {
                      ptype: 'rowediting',
                      listeners: {
                        edit: {
                          fn: me.onGridroweditingpluginEdit1,
                          scope: me
                        }
                      }
                    })
                  ]
                }
              ],
              dockedItems: [
                {
                  xtype: 'toolbar',
                  dock: 'bottom',
                  items: [
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        var length = Ext.getCmp('educator_classes_grid').getSelectionModel().selected.items.length;
                        var term = 'classes';
                        if (length == 1) term = 'class';
                        Ext.MessageBox.confirm('Delete Classes?', 'Are you sure you want to delete ' + length + ' ' + term + '?', function(btn) {
                          if (btn == "yes") {    
                            classes_to_delete = "%5b";
                            for (i = 0; i < length; i++) {
                              classes_to_delete += '%22' + Ext.getCmp('educator_classes_grid').getSelectionModel().selected.items[i].data.id + '%22,';
                            }
                            classes_to_delete = classes_to_delete.slice(0, -1);
                            classes_to_delete += '%5d';
                            Ext.Ajax.request({
                              method: 'POST',
                              url: 'routes/routes.php?url=/classes&method=delete',
                              params: {ids:classes_to_delete},
                              success: function(result) {
                                res = Ext.decode(result.responseText);
                                if (res.success) {
                                  setTimeout(function() {Ext.getStore("ClassStore").load();}, 1000);
                                } else {
                                  Ext.Msg.alert(res.error); 
                                }
                              },
                              failure: function() {
                                Ext.Msg.alert("Could not delete classes.  Please try again.");
                              }
                            });
                          }
                        });
                      },
                      disabled: true,
                      id: 'delete_classes_button',
                      text: 'Delete Classes'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              hidden: false,
              id: 'educator_classes_panel',
              autoScroll: true,
              maintainFlex: true,
              layout: {
                align: 'stretchmax',
                type: 'hbox'
              },
              title: '',
              items: [
                {
                  xtype: 'panel',
                  flex: 2,
                  id: 'class_list_panel',
                  autoScroll: true,
                  maintainFlex: true,
                  dockedItems: [
                    {
                      xtype: 'toolbar',
                      dock: 'top',
                      height: 35,
                      items: [
                        {
                          xtype: 'combobox',
                          id: 'educator_class_combobox',
                          width: 200,
                          fieldLabel: 'Class',
                          labelWidth: 50,
                          displayField: 'name',
                          store: 'ClassStore',
                          valueField: 'id',
                          listeners: {
                            select: {
                              fn: me.onComboboxSelect,
                              scope: me
                            }
                          }
                        },
                        {
                          xtype: 'combobox',
                          id: 'SubjectComboBox',
                          width: 200,
                          fieldLabel: 'Subject',
                          labelWidth: 50,
                          emptyText: 'Multiplication',
                          displayField: 'name',
                          store: 'SubjectStore',
                          valueField: 'id',
                          listeners: {
                            select: {
                              fn: me.onSubjectComboBoxSelect,
                              scope: me
                            }
                          }
                        },
                        {
                          xtype: 'buttongroup',
                          title: '',
                          columns: 3,
                          layout: {
                            columns: 3,
                            type: 'table'
                          },
                          items: [
                            {
                              xtype: 'button',
                              handler: function(button, event) {
                                Ext.MessageBox.confirm('Delete Class?', 'Are you sure you want to delete ' + Ext.getCmp('educator_class_combobox').valueModels[0].data.name + '?', function(btn) {
                                  if (btn == "yes") {
                                    Ext.Ajax.request({
                                      method: 'POST',
                                      url: 'routes/routes.php?url=/classes/' +Ext.getCmp('educator_class_combobox').value+'&method=delete',
                                      success: function(result) {
                                        res = Ext.decode(result.responseText);
                                        if (res.success) {
                                          setTimeout(function() {Ext.getStore("ClassStore").load();Ext.getCmp("educator_class_combobox").expand();Ext.getCmp('educator_class_combobox').select();}, 1000);
                                        } else {
                                          Ext.Msg.alert(res.error); 
                                        }
                                      },
                                      failure: function() {
                                        Ext.Msg.alert("Could not add classes.  Please try again.");
                                      }
                                    });
                                  }
                                });
                              },
                              disabled: true,
                              id: 'educator_delete_class_button',
                              text: 'Delete Class'
                            },
                            {
                              xtype: 'button',
                              handler: function(button, event) {
                                win = Ext.create("BigBrainzLauncher.view.AddClassesWindow");
                                win.show();
                              },
                              text: 'Add New Class'
                            }
                          ]
                        }
                      ]
                    },
                    {
                      xtype: 'toolbar',
                      dock: 'bottom',
                      height: 38,
                      items: [
                        {
                          xtype: 'button',
                          handler: function(button, event) {
                            win = Ext.create("BigBrainzLauncher.view.AddStudentsWindow");
                            win.show();
                          },
                          disabled: true,
                          id: 'educator_add_student_button',
                          text: 'Add Students'
                        },
                        {
                          xtype: 'button',
                          handler: function(button, event) {
                            length = Ext.getCmp('educator_classes_games_grid').getSelectionModel().selected.items.length;
                            term = 'students';
                            if (length == 1) term = 'student';
                            Ext.MessageBox.confirm('Delete Students?', 'Are you sure you want to delete ' + length + ' ' + term + '?', function(btn) {
                              if (btn == "yes") {    
                                students_to_delete = "%5b";
                                for (i = 0; i < length; i++) {
                                  students_to_delete += '%22' + Ext.getCmp('educator_classes_games_grid').getSelectionModel().selected.items[i].data.id + '%22,';
                                }
                                students_to_delete = students_to_delete.slice(0, -1);
                                students_to_delete += '%5d';
                                Ext.Ajax.request({
                                  method: 'POST',
                                  url: 'routes/routes.php?url=/games&method=delete',
                                  params: {ids:students_to_delete},
                                  success: function(result) {
                                    res = Ext.decode(result.responseText);
                                    if (res.success) {
                                      setTimeout(function() {Ext.getStore("GameStore").load();}, 1000);
                                    } else {
                                      Ext.Msg.alert(res.error); 
                                    }
                                  },
                                  failure: function() {
                                    Ext.Msg.alert("Could not delete students.  Please try again.");
                                  }
                                });
                              }
                            });
                          },
                          disabled: true,
                          id: 'delete_students_button',
                          text: 'Delete Students'
                        }
                      ]
                    }
                  ],
                  items: [
                    {
                      xtype: 'gridpanel',
                      autoWidth: true,
                      id: 'educator_classes_games_grid',
                      autoScroll: false,
                      title: '',
                      store: 'GameStore',
                      columns: [
                        {
                          xtype: 'actioncolumn',
                          flex: 1,
                          items: [
                            {
                              handler: function(view, rowIndex, colIndex, item, e) {
                                term = 'student';
                                Ext.MessageBox.confirm('Delete Student?', 'Are you sure you want to delete ' + length + ' ' + term + '?', function(btn) {
                                  if (btn == "yes") {    
                                    students_to_delete = "%5b";
                                    for (i = 0; i < length; i++) {
                                      students_to_delete += '%22' + Ext.getCmp('educator_classes_games_grid').getSelectionModel().selected.items[i].data.id + '%22,';
                                    }
                                    students_to_delete = students_to_delete.slice(0, -1);
                                    students_to_delete += '%5d';
                                    Ext.Ajax.request({
                                      method: 'POST',
                                      url: 'routes/routes.php?url=/games&method=delete',
                                      params: {ids:students_to_delete},
                                      success: function(result) {
                                        res = Ext.decode(result.responseText);
                                        if (res.success) {
                                          setTimeout(function() {Ext.getStore("GameStore").load();}, 1000);
                                        } else {
                                          Ext.Msg.alert(res.error); 
                                        }
                                      },
                                      failure: function() {
                                        Ext.Msg.alert("Could not delete student.  Please try again.");
                                      }
                                    });
                                  }
                                });
                              },
                              icon: 'http://icons.iconarchive.com/icons/oxygen-icons.org/oxygen/16/Actions-edit-delete-icon.png',
                              tooltip: 'Delete Student'
                            },
                            {
                              handler: function(view, rowIndex, colIndex, item, e) {
                                var grid = Ext.getCmp('educator_classes_games_grid');
                                var store = grid.store;
                                var rec = store.getAt(rowIndex);
                                var col = grid.getView().getHeaderCt().getHeaderAtIndex(2);
                                Ext.getCmp('educator_classes_games_grid').editingPlugin.startEdit(rec, col);
                              },
                              altText: 'Edit Student',
                              icon: 'http://icons.iconarchive.com/icons/oxygen-icons.org/oxygen/16/Actions-document-edit-icon.png',
                              tooltip: 'Edit Student'
                            }
                          ]
                        },
                        {
                          xtype: 'gridcolumn',
                          dataIndex: 'name',
                          flex: 8,
                          text: 'Student Names',
                          editor: {
                            xtype: 'textfield'
                          }
                        },
                        {
                          xtype: 'gridcolumn',
                          dataIndex: 'password',
                          flex: 2,
                          text: 'Password',
                          editor: {
                            xtype: 'textfield'
                          }
                        }
                      ],
                      viewConfig: {

                      },
                      selModel: Ext.create('Ext.selection.CheckboxModel', {
                        listeners: {
                          selectionchange: {
                            fn: me.onCheckboxselectionmodelSelectionChange,
                            scope: me
                          }
                        }
                      }),
                      listeners: {
                        select: {
                          fn: me.onEducator_classes_games_gridSelect,
                          scope: me
                        },
                        afterlayout: {
                          fn: me.onEducator_classes_games_gridAfterLayout,
                          scope: me
                        }
                      },
                      plugins: [
                        Ext.create('Ext.grid.plugin.RowEditing', {
                          ptype: 'rowediting',
                          listeners: {
                            edit: {
                              fn: me.onGridroweditingpluginEdit,
                              scope: me
                            }
                          }
                        })
                      ]
                    }
                  ]
                },
                {
                  xtype: 'panel',
                  flex: 3,
                  id: 'educator_classes_details_panel',
                  autoScroll: true,
                  maintainFlex: true,
                  layout: {
                    type: 'fit'
                  }
                }
              ]
            },
            {
              xtype: 'panel',
              id: 'educator_settings_panel',
              title: '',
              items: [
                {
                  xtype: 'panel',
                  layout: {
                    type: 'hbox'
                  },
                  title: '',
                  items: [
                    {
                      xtype: 'container',
                      flex: 1,
                      items: [
                        {
                          xtype: 'label',
                          height: 14,
                          style: 'text-align: center',
                          text: 'Password Settings'
                        },
                        {
                          xtype: 'container',
                          layout: {
                            align: 'stretchmax',
                            type: 'hbox'
                          },
                          items: [
                            {
                              xtype: 'textfield',
                              id: 'student_password_texffield',
                              fieldLabel: 'Student Password',
                              labelWidth: 150
                            },
                            {
                              xtype: 'button',
                              text: 'Update'
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          layout: {
                            align: 'stretchmax',
                            type: 'hbox'
                          },
                          items: [
                            {
                              xtype: 'textfield',
                              id: 'student_password_texffield',
                              fieldLabel: 'Educator Password',
                              labelWidth: 150
                            },
                            {
                              xtype: 'button',
                              text: 'Update'
                            }
                          ]
                        }
                      ]
                    },
                    {
                      xtype: 'container',
                      flex: 1,
                      items: [
                        {
                          xtype: 'label',
                          text: 'Contact Settings'
                        },
                        {
                          xtype: 'container',
                          layout: {
                            align: 'stretchmax',
                            type: 'hbox'
                          },
                          items: [
                            {
                              xtype: 'textfield',
                              flex: 1,
                              fieldLabel: 'Contact\'s Name'
                            },
                            {
                              xtype: 'button',
                              flex: 1,
                              text: 'Update'
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          layout: {
                            align: 'stretchmax',
                            type: 'hbox'
                          },
                          items: [
                            {
                              xtype: 'textfield',
                              flex: 1,
                              fieldLabel: 'Contact\'s Role'
                            },
                            {
                              xtype: 'button',
                              flex: 1,
                              text: 'Update'
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          layout: {
                            align: 'stretchmax',
                            type: 'hbox'
                          },
                          items: [
                            {
                              xtype: 'textfield',
                              flex: 1,
                              fieldLabel: 'Contact\'s Email'
                            },
                            {
                              xtype: 'button',
                              flex: 1,
                              text: 'Update'
                            }
                          ]
                        },
                        {
                          xtype: 'container',
                          layout: {
                            align: 'stretchmax',
                            type: 'hbox'
                          },
                          items: [
                            {
                              xtype: 'textfield',
                              flex: 1,
                              fieldLabel: 'Contact\'s Phone'
                            },
                            {
                              xtype: 'button',
                              flex: 1,
                              text: 'Update'
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  xtype: 'panel',
                  layout: {
                    type: 'hbox'
                  },
                  title: '',
                  items: [
                    {
                      xtype: 'container',
                      flex: 1,
                      items: [
                        {
                          xtype: 'label',
                          text: 'Multiplication Settings'
                        },
                        {
                          xtype: 'container',
                          layout: {
                            type: 'hbox'
                          },
                          items: [
                            {
                              xtype: 'checkboxfield',
                              flex: 1,
                              fieldLabel: '',
                              boxLabel: 'Use Turbo'
                            },
                            {
                              xtype: 'button',
                              flex: 1,
                              text: 'Update'
                            }
                          ]
                        }
                      ]
                    },
                    {
                      xtype: 'container',
                      flex: 1
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'panel',
              hidden: true,
              id: 'educator_reports_panel',
              title: '',
              dockedItems: [
                {
                  xtype: 'toolbar',
                  dock: 'top',
                  items: [
                    {
                      xtype: 'combobox',
                      id: 'SubjectComboBox',
                      width: 200,
                      fieldLabel: 'Subject',
                      labelWidth: 50,
                      emptyText: 'Multiplication',
                      displayField: 'name',
                      store: 'SubjectStore',
                      valueField: 'id',
                      listeners: {
                        select: {
                          fn: me.onSubjectComboBoxSelect,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'gridpanel',
                      id: 'school_wide_report',
                      title: 'My Grid Panel',
                      columns: [
                        {
                          xtype: 'gridcolumn',
                          dataIndex: 'string',
                          text: 'Class Name'
                        },
                        {
                          xtype: 'numbercolumn',
                          dataIndex: 'number',
                          text: 'Avg. Pretest Score'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: 'No. of  Pretests Taken'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '10%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '20%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '30%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '40%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '50%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '60%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '70%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '80%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: '90%'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: 'No. of Posttest Taken'
                        },
                        {
                          xtype: 'numbercolumn',
                          text: 'Avg. Posttest Score'
                        }
                      ],
                      viewConfig: {

                      }
                    }
                  ]
                }
              ]
            }
          ],
          listeners: {
            afterrender: {
              fn: me.onPanelAfterRender,
              scope: me
            }
          }
        }
      ]
    });

    me.callParent(arguments);
  },

  onUnlock_btnAfterRender: function(abstractcomponent, options) {
    var length = Ext.getStore("SchoolStore").data.items.length;
    var school_id = Ext.util.Cookies.get('school_id_saved');
    var status = "free";
    for(i = 0; i < length; i++) {
      var id = Ext.getStore("SchoolStore").data.items[i].data.id;  
      if (id == school_id) {
        status = Ext.getStore("SchoolStore").data.items[i].data.status;  
        break; 
      }
    }
    if (status === "offer_pilot") {
      Ext.getCmp("unlock_btn").enable();
    } else if (status === "offer_unlock") {
      Ext.getCmp("unlock_btn").enable();
    }

  },

  onCheckboxselectionmodelSelectionChange1: function(model, selected, options) {
    length = Ext.getCmp('educator_classes_grid').getSelectionModel().selected.items.length;
    if (length > 0) {
      Ext.getCmp('delete_classes_button').enable();
    } else {
      Ext.getCmp('delete_classes_button').disable();
    }
  },

  onGridroweditingpluginEdit1: function(editor, e, options) {
    name = editor.newValues.name;
    //email = editor.newValues.email;
    id = editor.record.data.id;

    Ext.Ajax.request({
      method: 'POST',
      url: 'routes/routes.php?url=/classes&method=put',
      params: {DisplayableName:name,ItemName:id},
      success: function(result) {
        res = Ext.decode(result.responseText);
        if (res.success) {
          setTimeout(function() {Ext.getStore("ClassStore").load();}, 1000);
        } else {
          Ext.Msg.alert(res.error); 
        }
      },
      failure: function() {
        Ext.Msg.alert("Could not update class.  Please try again.");
      }
    });
  },

  onComboboxSelect: function(combo, records, options) {
    Ext.getStore("GameStore").proxy.url = "routes/routes.php?url=/classes/"+records[0].data.id+"/games";
    Ext.getCmp('educator_classes_games_grid').store.load();
    //Ext.getCmp('educator_classes_details_title').setText("Progress for " + records[0].data.name);
    Ext.getCmp('educator_classes_games_grid').store.addListener(
    'load', function() {
      height = Math.max(500, Ext.getCmp('educator_classes_games_grid').getSize().height+50);  
      width = Ext.getCmp('educator_viewport').getWidth() - Ext.getCmp('educator_classes_games_grid').getSize().width;
      Ext.getCmp('class_progress_chart').setSize(width, height);
      Ext.getCmp('educator_viewport').doLayout();
      Ext.getCmp('educator_viewport').doLayout();
    },
    this,
    {delay:0});
    Ext.getCmp('educator_add_student_button').enable();
    Ext.getCmp('educator_delete_class_button').enable();
  },

  onSubjectComboBoxSelect: function(combo, records, options) {
    subject = records[0].data.id;
    Ext.getCmp('class_progress_chart').series.get(0).yField = subject+"_progress";
    Ext.getCmp('class_progress_chart').series.get(0).label.field = subject+"_progress";
    Ext.getCmp('class_progress_chart').refresh();
  },

  onCheckboxselectionmodelSelectionChange: function(model, selected, options) {
    length = Ext.getCmp('educator_classes_games_grid').getSelectionModel().selected.items.length;
    if (length > 0) {
      Ext.getCmp('delete_students_button').enable();
    } else {
      Ext.getCmp('delete_students_button').disable();
    }
  },

  onEducator_classes_games_gridSelect: function(selModel, record, index, options) {
    //Ext.getCmp('educator_classes_details_title').setText("Progress for " + record.data.name);
  },

  onGridroweditingpluginEdit: function(editor, e, options) {
    name = editor.newValues.name;
    password = editor.newValues.password;
    id = editor.record.data.id;

    Ext.Ajax.request({
      method: 'POST',
      url: 'routes/routes.php?url=/games&method=put',
      params: {DisplayableName:name,Password:password,ItemName:id},
      success: function(result) {
        res = Ext.decode(result.responseText);
        if (res.success) {
          setTimeout(function() {Ext.getStore("GameStore").load();}, 1000);
        } else {
          Ext.Msg.alert(res.error); 
        }
      },
      failure: function() {
        Ext.Msg.alert("Could not update students.  Please try again.");
      }
    });
  },

  onEducator_classes_games_gridAfterLayout: function(abstractcontainer, layout, options) {

  },

  onPanelAfterRender: function(abstractcomponent, options) {
    height = Ext.getCmp('educator_viewport').height;
    width = Ext.getCmp('class_list_panel').width;
    Ext.getCmp('class_list_panel').setSize(width, height-100);
    grid_height = Ext.getCmp('educator_classes_games_grid').height;
    grid_width = Ext.getCmp('educator_classes_games_grid').width;
    Ext.getCmp('class_progress_chart').series.get(0).yField = "multiplication_progress";
    Ext.getCmp('class_progress_chart').series.get(0).label.field = "multiplication_progress";
    Ext.getCmp('class_progress_chart').refresh();
    //Ext.getCmp('educator_classes_games_grid').setSize(width*.95, height);
  },

  onSubjectComboBoxSelect: function(combo, records, options) {
    subject = records[0].data.id;
    Ext.getCmp('class_progress_chart').series.get(0).yField = subject+"_progress";
    Ext.getCmp('class_progress_chart').series.get(0).label.field = subject+"_progress";
    Ext.getCmp('class_progress_chart').refresh();
  }

});
/*
 * File: app/view/EditSchoolPasswordsWindow.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.EditSchoolPasswordsWindow', {
  extend: 'Ext.window.Window',

  height: 250,
  width: 614,
  title: 'Edit School Passwords',

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'container',
          layout: {
            type: 'hbox'
          },
          items: [
            {
              xtype: 'fieldcontainer',
              flex: 1,
              margins: '10',
              height: 120,
              width: 400,
              combineLabels: false,
              fieldLabel: 'Change Educator Password',
              labelAlign: 'top',
              items: [
                {
                  xtype: 'container',
                  items: [
                    {
                      xtype: 'textfield',
                      id: 'old_password',
                      width: 212,
                      inputType: 'password',
                      fieldLabel: 'Old Password',
                      maxLength: 30
                    }
                  ]
                },
                {
                  xtype: 'container',
                  items: [
                    {
                      xtype: 'textfield',
                      id: 'new_password',
                      width: 213,
                      inputType: 'password',
                      fieldLabel: 'New Password',
                      minLength: 6,
                      minLengthText: 'The minimum password length is {0}',
                      regex: /[A-z0-9]{6,}/m,
                      regexText: 'The password can only contain numbers and letters.'
                    },
                    {
                      xtype: 'textfield',
                      id: 'new_password_again',
                      width: 213,
                      inputType: 'password',
                      fieldLabel: 'Reenter',
                      maxLengthText: 'The maximum password length is {0}',
                      minLength: 6,
                      minLengthText: 'The minimum password length is {0}',
                      regex: /[A-z0-9]{6,}/m,
                      regexText: 'The password can only contain numbers and letters.'
                    }
                  ]
                },
                {
                  xtype: 'container',
                  items: [
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        // added by Mike Curtis Oct. 2012

                        // check if the old password is correct
                        var old_pass = Ext.getCmp('old_password').value;

                        Ext.Ajax.request({
                          method: 'POST',
                          url: 'routes/routes.php?url=/login&method=post',
                          params: {id: school_data.id, password: old_pass},
                          success: function(result) {
                            var res = Ext.decode(result.responseText);
                            if (res.success && res.access == "educator") {

                              // check if the user gave the same password twice
                              var new_pass = Ext.getCmp('new_password').value;
                              var new_pass_again = Ext.getCmp('new_password_again').value;

                              if (new_pass == new_pass_again && Ext.getCmp('new_password').validate() && Ext.getCmp('new_password_again').validate()) {
                                Ext.Ajax.request({
                                  method: 'POST',
                                  url: 'routes/routes.php?url=/schools&method=put',
                                  params: {ItemName: school_data.id, Password: new_pass},
                                  success: function(result) {
                                    var res = Ext.decode(result.responseText);
                                    if (res.success) {

                                      // update the old password to the new password
                                      Ext.Msg.alert("Success", "Your password has been updated.");

                                    } else {
                                      Ext.Msg.alert("Could not update.", "Please try again.");
                                    }
                                  },
                                  failure: function() {
                                    Ext.Msg.alert("Could not update.", "Please try again.");
                                  }
                                });
                              }
                              else {
                                var msg = new_pass == new_pass_again ? "The new password must be 6 - 30 characters and can only contain letters and numbers." : "The new password fields do not match.  Please try again.";
                                Ext.Msg.alert(msg);
                              }
                            } else {
                              Ext.Msg.alert("Could not authenticate", "Please check your password and try again.");
                            }

                          },
                          failure: function() {
                            Ext.Msg.alert("Could not authenticate", "Please check your password and try again.");
                          }
                        });
                      },
                      text: 'Change'
                    }
                  ]
                }
              ]
            },
            {
              xtype: 'fieldcontainer',
              flex: 1,
              margins: '10',
              floating: false,
              height: 120,
              width: 400,
              fieldLabel: 'Change Default Student Password',
              labelAlign: 'top',
              preventMark: false,
              items: [
                {
                  xtype: 'textfield',
                  id: 'default_student_password_field',
                  validateOnChange: false,
                  listeners: {
                    afterrender: {
                      fn: me.onDefault_student_password_fieldAfterRender,
                      scope: me
                    }
                  }
                },
                {
                  xtype: 'button',
                  handler: function(button, event) {
                    var new_pass = Ext.getCmp('default_student_password_field').value;
                    Ext.Ajax.request({
                      method: 'POST',
                      url: 'routes/routes.php?url=/schools&method=put',
                      params: {ItemName: school_data.id, DefaultStudentPassword: new_pass},
                      success: function(result) {
                        var res = Ext.decode(result.responseText);
                        if (res.success) {

                          Ext.Msg.alert("Success", "The default password has been updated.");

                        } else {
                          Ext.Msg.alert("Could not update.", "Please try again.");
                        }
                      },
                      failure: function() {
                        Ext.Msg.alert("Could not update.", "Please try again.");
                      }
                    });
                  },
                  text: 'Change'
                }
              ]
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onDefault_student_password_fieldAfterRender: function(abstractcomponent, options) {
    abstractcomponent.value = Ext.getStore("SchoolStore").data.items[0].data.DefaultStudentPassword;
  }

});
/*
 * File: app/view/WeeklyUsageGraph.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.WeeklyUsageGraph', {
  extend: 'Ext.container.Container',
  alias: 'widget.WeeklyUsageGraph',

  layout: {
    align: 'stretch',
    type: 'vbox'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          style: 'text-align:center;font-size:200%;font-style:normal',
          text: 'Usage'
        },
        {
          xtype: 'chart',
          flex: 1,
          id: 'school_progressing_students',
          animate: true,
          insetPadding: 20,
          store: 'WeeklyProgressStore',
          theme: 'Fancy',
          axes: [
            {
              type: 'Category',
              fields: [
                'date'
              ],
              position: 'bottom',
              title: ''
            },
            {
              type: 'Numeric',
              fields: [
                'f',
                'p',
                'np'
              ],
              position: 'left',
              title: '# of Students',
              decimals: 0
            }
          ],
          series: [
            {
              type: 'column',
              highlight: true,
              tips: {
                trackMouse: true,
                width: 100,
                height: 28,
                renderer: function(storeItem, item) {
                  var student_label = 'students';
                  if (item.value[1] == 1) {
                    student_label = 'student'; 
                  }       
                  this.setTitle(item.value[1] + ' ' + student_label);
                }
              },
              title: [
                'Fluent',
                'Progressing > 20 min/wk',
                'Progressing < 20 min/wk',
                'Not Progressing'
              ],
              xField: 'date',
              yField: [
                'f',
                'p',
                'np'
              ],
              stacked: true
            }
          ],
          legend: {
            position: 'float',
            x: 90,
            y: -15
          }
        }
      ]
    });

    me.callParent(arguments);
  }

});
/*
 * File: app/view/AvgerageImprovementGraphs.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.AvgerageImprovementGraphs', {
  extend: 'Ext.container.Container',
  alias: 'widget.avgerageimprovementgraphs',

  height: 250,
  width: 400,
  layout: {
    align: 'stretch',
    type: 'vbox'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'label',
          style: 'text-align:center;font-size:200%;font-style:normal',
          text: 'Average Improvement:'
        },
        {
          xtype: 'chart',
          height: 250,
          width: 400,
          animate: true,
          insetPadding: 20,
          store: 'AverageImprovementStore',
          axes: [
            {
              type: 'Category',
              fields: [
                'grade'
              ],
              label: {
                renderer: function(v){
                  var grade = v + "th grade";
                  if (v == 3) {
                    grade = v + "rd grade";
                  }        
                  return "Average\nPre/Post Test\n" + grade;
                }
              },
              position: 'bottom',
              title: ''
            },
            {
              type: 'Numeric',
              fields: [
                'pretest_avg',
                'posttest_avg'
              ],
              position: 'left',
              title: '',
              maximum: 100,
              minimum: 0
            }
          ],
          series: [
            {
              type: 'column',
              highlight: true,
              tips: {
                trackMouse: true,
                width: 30,
                height: 28,
                renderer: function(storeItem, item) {
                  this.setTitle(item.value[1] + '%');
                }
              },
              title: [
                'Pre-Test Averages',
                'Post-Test Averages'
              ],
              xField: 'grade',
              yField: [
                'pretest_avg',
                'posttest_avg'
              ]
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  }

});
/*
 * File: app/view/EducatorTreeViewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.EducatorTreeViewport', {
  extend: 'Ext.container.Viewport',

  requires: [
    'BigBrainzLauncher.view.WeeklyUsageGraph'
  ],

  id: 'educator_tree_viewport',
  layout: {
    type: 'fit'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'container',
          hidden: false,
          layout: {
            align: 'stretch',
            type: 'vbox'
          },
          items: [
            {
              xtype: 'container',
              height: 90,
              html: '<div id="banner">\r\n	<div id="banner-left"></div>\r\n    <div id="banner-content"></div>\r\n	<div id="banner-right"></div>\r\n</div>\r\n<div id="logo"></div>\r\n<div id="deluxe"></div>',
              id: 'unlock_container',
              maxHeight: 90,
              minHeight: 90,
              minWidth: 200,
              width: 200
            },
            {
              xtype: 'container',
              flex: 1,
              layout: {
                align: 'stretch',
                type: 'vbox'
              },
              items: [
                {
                  xtype: 'toolbar',
                  style: 'border: solid 1px #99BBE8; margin: 0;background-color:#D9E5F3;',
                  ui: 'footer',
                  items: [
                    {
                      xtype: 'button',
                      autoWidth: true,
                      overflowText: '...',
                      text: 'Add',
                      textAlign: 'left',
                      menu: {
                        xtype: 'menu',
                        minWidth: 200,
                        plain: true,
                        items: [
                          {
                            xtype: 'menuitem',
                            handler: function(item, event) {
                              var win = Ext.create("BigBrainzLauncher.view.AddClassesWindow");
                              win.show();
                            },
                            text: 'Add Classes'
                          },
                          {
                            xtype: 'menuitem',
                            handler: function(item, event) {
                              if (Ext.getCmp('school_tree').getSelectionModel().getSelection().length < 1 || Ext.getCmp('school_tree').getSelectionModel().getSelection()[0].data.id === "0") {
                                Ext.MessageBox.show({
                                  title   : 'Please select a class',
                                  msg     : 'Please select a class before adding students.'
                                });

                              } else {
                                var win = Ext.create("BigBrainzLauncher.view.AddStudentsWindow");
                                win.show();
                              }
                            },
                            text: 'Add Students'
                          }
                        ]
                      }
                    },
                    {
                      xtype: 'tbseparator'
                    },
                    {
                      xtype: 'button',
                      autoWidth: true,
                      text: 'Delete',
                      textAlign: 'left',
                      menu: {
                        xtype: 'menu',
                        minWidth: 200,
                        plain: true,
                        items: [
                          {
                            xtype: 'menuitem',
                            handler: function(item, event) {
                              var selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
                              if (selected.length < 1) {
                                Ext.MessageBox.alert('Big Brainz', 'Please select a class or student to delete');
                              }
                              selected = selected[0];
                              if (selected.data.id === 0) {
                                Ext.MessageBox.alert('Big Brainz', 'Please select a class or student to delete');
                              }
                              var ts = new Date().getTime();
                              ts = Math.floor(ts/1000);
                              if (selected.data.leaf) {
                                Ext.MessageBox.confirm('Delete Student?', 'Are you sure you want to delete ' + selected.data.text + '?', function(btn) {
                                  if (btn == "yes") {    

                                    var params = {ItemName:selected.data.id, DeletionDate:ts};
                                    Ext.Ajax.request({
                                      method: 'POST',
                                      url: 'routes/routes.php?url=/games&method=put',
                                      params: params,
                                      success: function(result) {
                                        res = Ext.decode(result.responseText);
                                        if (res) {
                                          setTimeout(function() {
                                            var delNode;
                                            var treePanel = Ext.getCmp('school_tree');
                                            while (delNode = treePanel.getRootNode().childNodes[0]) {
                                              treePanel.getRootNode().removeChild(delNode);
                                            }
                                            Ext.getStore("ClassStore").load();
                                            Ext.getStore("SchoolTreeStore").load();
                                          } , 1000);
                                        } else {
                                          Ext.Msg.alert(res.error); 
                                        }
                                      },
                                      failure: function() {
                                        Ext.Msg.alert("Could not delete classes.  Please try again.");
                                      }
                                    });           
                                  }
                                });
                              } else {  
                                var class_record = Ext.getStore('ClassStore').data.items[Ext.getStore('ClassStore').find('id', selected.data.id)];

                                if(class_record.data.PilotClass) {
                                  Ext.MessageBox.show({
                                    title   : 'Cannot Delete This Class',
                                    msg     : 'This is a special class and cannot be deleted.'
                                  });
                                  return; 
                                }

                                Ext.MessageBox.confirm('Delete Class?', 'Are you sure you want to delete "' + selected.data.text + '" class and all of it\'s students?', function(btn) {
                                  if (btn == "yes") {    
                                    var params = {ItemName:selected.data.id, DeletionDate:ts};
                                    Ext.Ajax.request({
                                      method: 'POST',
                                      url: 'routes/routes.php?url=/classes&method=put',
                                      params: params,
                                      success: function(result) {
                                        res = Ext.decode(result.responseText);
                                        if (res) {
                                          setTimeout(function() {
                                            var delNode;
                                            var treePanel = Ext.getCmp('school_tree');
                                            while (delNode = treePanel.getRootNode().childNodes[0]) {
                                              treePanel.getRootNode().removeChild(delNode);
                                            }
                                            Ext.getStore("ClassStore").load();
                                            Ext.getStore("SchoolTreeStore").load();
                                          } , 1000);
                                        } else {
                                          Ext.Msg.alert(res.error); 
                                        }
                                      },
                                      failure: function() {
                                        Ext.Msg.alert("Could not delete classes.  Please try again.");
                                      }
                                    });                        
                                  }
                                });
                              }

                            },
                            text: 'Delete Selected'
                          },
                          {
                            xtype: 'menuitem',
                            handler: function(item, event) {
                              var win = Ext.create("BigBrainzLauncher.view.DeleteMultipleClasses");
                              win.show();
                            },
                            text: 'Delete Multiple Classes'
                          }
                        ]
                      }
                    },
                    {
                      xtype: 'tbseparator'
                    },
                    {
                      xtype: 'button',
                      autoWidth: true,
                      overflowText: '...',
                      text: 'Edit',
                      textAlign: 'left',
                      menu: {
                        xtype: 'menu',
                        floating: true,
                        hidden: true,
                        id: 'edit_menu',
                        minWidth: 200,
                        plain: true,
                        items: [
                          {
                            xtype: 'menuitem',
                            handler: function(item, event) {
                              var win = Ext.create("BigBrainzLauncher.view.EditSchoolPasswordsWindow");
                              win.show();
                            },
                            text: 'Edit School Passwords'
                          },
                          {
                            xtype: 'menuitem',
                            handler: function(item, event) {
                              var win = Ext.create("BigBrainzLauncher.view.EditStudentsWindow");
                              win.show();
                            },
                            text: 'Edit Student Names/Passwords'
                          }
                        ]
                      }
                    },
                    {
                      xtype: 'tbseparator'
                    },
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        var login = Ext.create('BigBrainzLauncher.view.SchoolSelectionWindow');
                        login.show();
                        Ext.getCmp('educator_tree_viewport').destroy();
                      },
                      text: 'Back'
                    },
                    {
                      xtype: 'tbseparator'
                    },
                    {
                      xtype: 'button',
                      handler: function(button, event) {
                        win = Ext.create('BigBrainzLauncher.view.PizzaPartySignup');
                        win.show();

                      },
                      hidden: true,
                      text: 'Pizza Party'
                    },
                    {
                      xtype: 'tbseparator',
                      hidden: true
                    }
                  ]
                },
                {
                  xtype: 'container',
                  flex: 1,
                  hidden: false,
                  layout: {
                    align: 'stretch',
                    padding: 10,
                    type: 'hbox'
                  },
                  items: [
                    {
                      xtype: 'treepanel',
                      id: 'school_tree',
                      width: 146,
                      autoScroll: true,
                      iconCls: 'apple-icon',
                      title: '',
                      store: 'SchoolTreeStore',
                      folderSort: true,
                      useArrows: false,
                      viewConfig: {
                        padding: ''
                      },
                      listeners: {
                        select: {
                          fn: me.onSchool_treeSelect,
                          scope: me
                        },
                        itemexpand: {
                          fn: me.onSchool_treeItemExpand,
                          scope: me
                        },
                        beforeload: {
                          fn: me.onSchool_treeBeforeLoad,
                          scope: me
                        }
                      }
                    },
                    {
                      xtype: 'container',
                      width: 10
                    },
                    {
                      xtype: 'panel',
                      flex: 20,
                      id: 'reports_panel',
                      layout: {
                        align: 'stretch',
                        type: 'vbox'
                      },
                      title: '',
                      dockedItems: [
                        {
                          xtype: 'toolbar',
                          dock: 'top',
                          items: [
                            {
                              xtype: 'label',
                              padding: '0 0 0 10',
                              style: '{font-size:150%;font-family: Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif;}',
                              text: 'Reports'
                            },
                            {
                              xtype: 'tbspacer',
                              flex: 1
                            }
                          ]
                        }
                      ],
                      items: [
                        {
                          xtype: 'tabpanel',
                          LoadWeeklyMinutes: function(field) {
                            try {
                              var minutes = Ext.getStore('GameDataStore').data.items[0].data.weekly_time[field];
                              setTimeout(function() {
                                try {
                                  Ext.getStore('StudentWeeklyMinutes').loadRawData(minutes);
                                } catch (error) {

                                }
                              }, 500);
                            } catch (error) {

                            }
                          },
                          flex: 1,
                          hidden: true,
                          id: 'report_tabs',
                          style: '{background-color:yellow;}',
                          activeTab: 0,
                          items: [
                            {
                              xtype: 'panel',
                              cls: 'testing',
                              id: 'multiplication_tab',
                              autoScroll: true,
                              layout: {
                                align: 'stretch',
                                type: 'vbox'
                              },
                              title: 'Multiplication',
                              items: [
                                {
                                  xtype: 'container',
                                  flex: 1,
                                  layout: {
                                    align: 'stretch',
                                    type: 'vbox'
                                  },
                                  items: [
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      id: 'class_multiplication_container',
                                      autoScroll: false,
                                      layout: {
                                        type: 'fit'
                                      },
                                      items: [
                                        {
                                          xtype: 'gridpanel',
                                          id: 'class_multiplication_grid',
                                          autoScroll: true,
                                          title: '',
                                          forceFit: false,
                                          store: 'GameStore',
                                          columnLines: true,
                                          columns: [
                                            {
                                              xtype: 'gridcolumn',
                                              dataIndex: 'name',
                                              flex: 2,
                                              tdCls: 'center-cell',
                                              text: 'Name'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value !== "" && value !== undefined && value > -1) return value+"%";
                                                return "";
                                              },
                                              align: 'center',
                                              dataIndex: 'multiplication_pretest',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Pre-Test'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var id = Ext.id();
                                                var width = Ext.getCmp('class_multiplication_grid').columns[colIndex].getSize().width - 25;
                                                Ext.defer(function () {
                                                  try {
                                                    Ext.widget('progressbar', {
                                                      renderTo: id,
                                                      value: value / 100,
                                                      width: width
                                                    });
                                                  } catch (err) {
                                                    //I'm catching this so that over zealous debuggers leave us alone.
                                                  }
                                                }, 50);
                                                return Ext.String.format('<div id="{0}"></div>', id);
                                                //return (value + '%');
                                              },
                                              dataIndex: 'multiplication_progress',
                                              fixed: false,
                                              flex: 10,
                                              text: 'Progress'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value < 1) return "";
                                                var color = Ext.getCmp('school_report_tabs').get_color(value, 100, [255,255,255], [102,204,0]);
                                                setTimeout(function() {
                                                  var row = view.getNode(record);
                                                  //Capturing the el (I need the div to do the trick)
                                                  try {
                                                    var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                                                  } catch (err) {
                                                    return value;
                                                  }
                                                  try {    
                                                    el.dom.style.setProperty('background-color', '#' + color);
                                                  } catch (err) {
                                                    el.dom.style['backgroundColor'] = '#' + color;
                                                  }
                                                }, 50);

                                                return value + "%";
                                              },
                                              align: 'center',
                                              dataIndex: 'multiplication_posttest',
                                              flex: 1,
                                              text: 'Post-Test'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value < 1) return "";
                                                var minutes = ("00"+value%60).slice(-2);
                                                var hours =  Math.floor(value/60);
                                                return hours + ":"+minutes;
                                              },
                                              align: 'center',
                                              dataIndex: 'multiplication_minutes',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Hours'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var est_time = 480 -  Math.floor(480 *(value / 100));
                                                if (est_time < 1) return "";
                                                var minutes = ("00"+est_time%60).slice(-2);
                                                var hours =  Math.floor(est_time/60);
                                                return hours + ":"+minutes;
                                              },
                                              dataIndex: 'multiplication_progress',
                                              text: 'Est. Time Remaining'
                                            }
                                          ],
                                          viewConfig: {

                                          },
                                          listeners: {
                                            select: {
                                              fn: me.onGridpanelSelect2,
                                              scope: me
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      hidden: true,
                                      id: 'student_multiplication_container',
                                      autoScroll: true,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'container',
                                          flex: 3,
                                          layout: {
                                            align: 'middle',
                                            type: 'hbox'
                                          },
                                          items: [
                                            {
                                              xtype: 'container',
                                              flex: 1,
                                              layout: {
                                                type: 'fit'
                                              },
                                              items: [
                                                {
                                                  xtype: 'chart',
                                                  height: 250,
                                                  id: 'StudentWeeklyMinutes',
                                                  width: 400,
                                                  animate: true,
                                                  insetPadding: 20,
                                                  store: 'StudentWeeklyMinutes',
                                                  axes: [
                                                    {
                                                      type: 'Category',
                                                      fields: [
                                                        'week_number'
                                                      ],
                                                      position: 'bottom'
                                                    },
                                                    {
                                                      type: 'Numeric',
                                                      fields: [
                                                        'minutes'
                                                      ],
                                                      position: 'left',
                                                      title: 'Minutes',
                                                      decimals: 0
                                                    }
                                                  ],
                                                  series: [
                                                    {
                                                      type: 'column',
                                                      xField: 'week_number',
                                                      yField: [
                                                        'minutes'
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              xtype: 'container',
                                              flex: 1,
                                              layout: {
                                                type: 'fit'
                                              },
                                              items: [
                                                {
                                                  xtype: 'chart',
                                                  height: 250,
                                                  id: 'student_multiplication_gauge',
                                                  width: 400,
                                                  animate: true,
                                                  insetPadding: 20,
                                                  store: 'GameStore',
                                                  axes: [
                                                    {
                                                      position: 'gauge',
                                                      type: 'Gauge',
                                                      margin: 8,
                                                      maximum: 100,
                                                      minimum: 0
                                                    }
                                                  ],
                                                  series: [
                                                    {
                                                      type: 'gauge',
                                                      angleField: 'multiplication_progress',
                                                      donut: 50
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          xtype: 'container',
                                          flex: 2,
                                          items: [
                                            {
                                              xtype: 'container',
                                              html: '<div id = \'play_multiplication\' align=\'center\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayMultiplication_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayMultiplicationHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayMultiplication_150.png\'"/>\r\n</div>',
                                              style: 'cursor: pointer;',
                                              listeners: {
                                                afterrender: {
                                                  fn: me.onContainerAfterRender21,
                                                  scope: me
                                                }
                                              },
                                              items: [
                                                {
                                                  xtype: 'label',
                                                  hidden: true,
                                                  id: 'new_york_proxy_label',
                                                  padding: '30 0 0 0',
                                                  style: 'color:red;',
                                                  text: 'Please note that many New York Schools have proxies that may interfere with gameplay.  We can quickly solve this problem if you call us at (877) 356-7040'
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              listeners: {
                                show: {
                                  fn: me.onMultiplication_tabShow,
                                  scope: me
                                }
                              }
                            },
                            {
                              xtype: 'panel',
                              cls: 'testing',
                              id: 'division_tab',
                              autoScroll: true,
                              layout: {
                                align: 'stretch',
                                type: 'vbox'
                              },
                              title: 'Division',
                              items: [
                                {
                                  xtype: 'container',
                                  flex: 1,
                                  layout: {
                                    align: 'stretch',
                                    type: 'vbox'
                                  },
                                  items: [
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      id: 'class_division_container',
                                      layout: {
                                        type: 'fit'
                                      },
                                      items: [
                                        {
                                          xtype: 'gridpanel',
                                          id: 'class_division_grid',
                                          minWidth: 270,
                                          autoScroll: true,
                                          title: '',
                                          store: 'GameStore',
                                          columnLines: true,
                                          columns: [
                                            {
                                              xtype: 'gridcolumn',
                                              dataIndex: 'name',
                                              flex: 2,
                                              tdCls: 'center-cell',
                                              text: 'Name'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value > 0) return value+"%";
                                                return "";
                                              },
                                              align: 'center',
                                              dataIndex: 'Division_pretest',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Pre-Test'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var id = Ext.id();
                                                var width = Ext.getCmp('class_division_grid').columns[colIndex].getSize().width - 25;
                                                Ext.defer(function () {
                                                  try {
                                                    Ext.widget('progressbar', {
                                                      renderTo: id,
                                                      value: value / 100,
                                                      width: width
                                                    });
                                                  } catch (err) {
                                                    //I'm catching this so that over zealous debuggers leave us alone.
                                                  }
                                                }, 50);
                                                return Ext.String.format('<div id="{0}"></div>', id);
                                                //return (value + '%');
                                              },
                                              dataIndex: 'Division_progress',
                                              fixed: false,
                                              flex: 10,
                                              text: 'Progress'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value < 1) return "";
                                                var color = Ext.getCmp('school_report_tabs').get_color(value, 100, [255,255,255], [102,204,0]);
                                                setTimeout(function() {
                                                  var row = view.getNode(record);
                                                  //Capturing the el (I need the div to do the trick)
                                                  try {
                                                    var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                                                  } catch (err) {
                                                    return value;
                                                  }
                                                  try {    
                                                    el.dom.style.setProperty('background-color', '#' + color);
                                                  } catch (err) {
                                                    el.dom.style['backgroundColor'] = '#' + color;
                                                  }
                                                }, 50);

                                                return value + "%";
                                              },
                                              align: 'center',
                                              dataIndex: 'Division_posttest',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Post-Test'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value < 1) return "";
                                                var minutes = ("00"+value%60).slice(-2);
                                                var hours =  Math.floor(value/60);
                                                return hours + ":"+minutes;
                                              },
                                              align: 'center',
                                              dataIndex: 'Division_minutes',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Hours'
                                            }
                                          ],
                                          viewConfig: {

                                          },
                                          listeners: {
                                            select: {
                                              fn: me.onGridpanelSelect1,
                                              scope: me
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      hidden: true,
                                      id: 'student_division_container',
                                      autoScroll: true,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'container',
                                          flex: 3,
                                          layout: {
                                            align: 'middle',
                                            type: 'hbox'
                                          },
                                          items: [
                                            {
                                              xtype: 'container',
                                              flex: 1,
                                              layout: {
                                                type: 'fit'
                                              },
                                              items: [
                                                {
                                                  xtype: 'chart',
                                                  height: 250,
                                                  id: 'StudentWeeklyMinutesDivision',
                                                  width: 400,
                                                  animate: true,
                                                  insetPadding: 20,
                                                  store: 'StudentWeeklyMinutes',
                                                  axes: [
                                                    {
                                                      type: 'Category',
                                                      fields: [
                                                        'week_number'
                                                      ],
                                                      position: 'bottom'
                                                    },
                                                    {
                                                      type: 'Numeric',
                                                      fields: [
                                                        'minutes'
                                                      ],
                                                      position: 'left',
                                                      title: 'Minutes',
                                                      decimals: 0
                                                    }
                                                  ],
                                                  series: [
                                                    {
                                                      type: 'column',
                                                      xField: 'week_number',
                                                      yField: [
                                                        'minutes'
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              xtype: 'container',
                                              flex: 1,
                                              layout: {
                                                type: 'fit'
                                              },
                                              items: [
                                                {
                                                  xtype: 'chart',
                                                  height: 250,
                                                  id: 'student_division_gauge',
                                                  width: 400,
                                                  animate: true,
                                                  insetPadding: 20,
                                                  store: 'GameStore',
                                                  axes: [
                                                    {
                                                      position: 'gauge',
                                                      type: 'Gauge',
                                                      margin: 8,
                                                      maximum: 100,
                                                      minimum: 0
                                                    }
                                                  ],
                                                  series: [
                                                    {
                                                      type: 'gauge',
                                                      angleField: 'Division_progress',
                                                      donut: 50
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          xtype: 'container',
                                          flex: 2,
                                          items: [
                                            {
                                              xtype: 'container',
                                              html: '<div id = \'play_division\' align=\'center\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayDivision_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayDivisionHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayDivision_150.png\'"/>\r\n</div>',
                                              style: 'cursor: pointer;',
                                              listeners: {
                                                afterrender: {
                                                  fn: me.onContainerAfterRender122,
                                                  scope: me
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              listeners: {
                                show: {
                                  fn: me.onDivision_tabShow,
                                  scope: me
                                }
                              }
                            },
                            {
                              xtype: 'panel',
                              cls: 'testing',
                              id: 'addsubtract_tab',
                              autoScroll: true,
                              layout: {
                                align: 'stretch',
                                type: 'vbox'
                              },
                              title: 'Addition/Subtraction',
                              items: [
                                {
                                  xtype: 'container',
                                  flex: 1,
                                  layout: {
                                    align: 'stretch',
                                    type: 'vbox'
                                  },
                                  items: [
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      id: 'class_addsub_container',
                                      layout: {
                                        type: 'fit'
                                      },
                                      items: [
                                        {
                                          xtype: 'gridpanel',
                                          minWidth: 270,
                                          autoScroll: true,
                                          title: '',
                                          store: 'GameStore',
                                          columnLines: true,
                                          columns: [
                                            {
                                              xtype: 'gridcolumn',
                                              dataIndex: 'name',
                                              flex: 2,
                                              tdCls: 'center-cell',
                                              text: 'Name'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value > 0) return value+"%";
                                                return "";
                                              },
                                              align: 'center',
                                              dataIndex: 'addsubtract_pretest',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Pre-Test'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                var id = Ext.id();
                                                var width = Ext.getCmp('class_multiplication_grid').columns[colIndex].getSize().width;
                                                Ext.defer(function () {
                                                  Ext.widget('progressbar', {
                                                    renderTo: id,
                                                    value: value / 100,
                                                    width: width-20      
                                                  });
                                                }, 50);
                                                return Ext.String.format('<div id="{0}"></div>', id);
                                              },
                                              dataIndex: 'addsubtract_progress',
                                              fixed: false,
                                              flex: 10,
                                              text: 'Progress'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value < 1) return "";
                                                var color = Ext.getCmp('school_report_tabs').get_color(value, 100, [255,255,255], [102,204,0]);
                                                setTimeout(function() {
                                                  var row = view.getNode(record);
                                                  //Capturing the el (I need the div to do the trick)
                                                  try {
                                                    var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                                                  } catch (err) {
                                                    return value;
                                                  }
                                                  try {    
                                                    el.dom.style.setProperty('background-color', '#' + color);
                                                  } catch (err) {
                                                    el.dom.style['backgroundColor'] = '#' + color;
                                                  }
                                                }, 50);

                                                return value + "%";
                                              },
                                              align: 'center',
                                              dataIndex: 'addsubtract_posttest',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Post-Test'
                                            },
                                            {
                                              xtype: 'gridcolumn',
                                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if (value < 1) return "";
                                                var minutes = ("00"+value%60).slice(-2);
                                                var hours =  Math.floor(value/60);
                                                return hours + ":"+minutes;
                                              },
                                              align: 'center',
                                              dataIndex: 'addsubtract_minutes',
                                              flex: 1,
                                              tdCls: 'center-cell',
                                              text: 'Hours'
                                            }
                                          ],
                                          viewConfig: {

                                          },
                                          listeners: {
                                            select: {
                                              fn: me.onGridpanelSelect,
                                              scope: me
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      hidden: true,
                                      id: 'student_addsub_container',
                                      autoScroll: true,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'container',
                                          flex: 3,
                                          layout: {
                                            align: 'middle',
                                            type: 'hbox'
                                          },
                                          items: [
                                            {
                                              xtype: 'container',
                                              flex: 1,
                                              layout: {
                                                type: 'fit'
                                              },
                                              items: [
                                                {
                                                  xtype: 'chart',
                                                  height: 250,
                                                  id: 'StudentWeeklyMinutesAddSub',
                                                  width: 400,
                                                  animate: true,
                                                  insetPadding: 20,
                                                  store: 'StudentWeeklyMinutes',
                                                  axes: [
                                                    {
                                                      type: 'Category',
                                                      fields: [
                                                        'week_number'
                                                      ],
                                                      position: 'bottom'
                                                    },
                                                    {
                                                      type: 'Numeric',
                                                      fields: [
                                                        'minutes'
                                                      ],
                                                      position: 'left',
                                                      title: 'Minutes',
                                                      decimals: 0
                                                    }
                                                  ],
                                                  series: [
                                                    {
                                                      type: 'column',
                                                      xField: 'week_number',
                                                      yField: [
                                                        'minutes'
                                                      ]
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              xtype: 'container',
                                              flex: 1,
                                              layout: {
                                                type: 'fit'
                                              },
                                              items: [
                                                {
                                                  xtype: 'chart',
                                                  height: 250,
                                                  id: 'student_addsub_gauge',
                                                  width: 400,
                                                  animate: true,
                                                  insetPadding: 20,
                                                  store: 'GameStore',
                                                  axes: [
                                                    {
                                                      position: 'gauge',
                                                      type: 'Gauge',
                                                      margin: 8,
                                                      maximum: 100,
                                                      minimum: 0
                                                    }
                                                  ],
                                                  series: [
                                                    {
                                                      type: 'gauge',
                                                      angleField: 'addsubtract_progress',
                                                      donut: 50
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          xtype: 'container',
                                          flex: 2,
                                          html: '<div id = \'play_addsub\' align=\'center\'>  \r\n  <img src="http://bigbrainz.com/games/launcher/images/Button_PlayAddSub_150.png" onmouseover="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayAddSubHover_150.png\'" onmouseout="this.src=\'http://bigbrainz.com/games/launcher/images/Button_PlayAddSub_150.png\'"/>\r\n</div>',
                                          style: 'cursor: pointer;',
                                          listeners: {
                                            afterrender: {
                                              fn: me.onContainerAfterRender1211,
                                              scope: me
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ],
                              listeners: {
                                show: {
                                  fn: me.onAddsubtract_tabShow,
                                  scope: me
                                }
                              }
                            }
                          ]
                        },
                        {
                          xtype: 'tabpanel',
                          get_cell_color: function(field, row_index, value, record, colIndex, view) {
                            if (value === 0) return "";
                            var total_pretests = Ext.getStore('ClassStore').data.items[row_index].data[field];
                            var color = this.get_color(value, total_pretests);
                            setTimeout(function() {
                              var row = view.getNode(record);
                              //Capturing the el (I need the div to do the trick)
                              try {
                                var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                              } catch (err) {
                                return value;
                              }
                              try {
                                el.dom.style.setProperty('background-color', '#' + color);
                              } catch (err) {
                                el.dom.style['backgroundColor'] = '#' + color;
                              }
                            }, 50);
                            return value;
                          },
                          get_color: function(progress, total, start, end) {
                            if (progress === 0 || progress === " " || progress === "") {
                              return "";
                            }
                            start = typeof start !== 'undefined' ? start : [255,255,255];
                            end = typeof end !== 'undefined' ? end : [0,176,240];
                            var percent = (progress / total)*100;
                            if (percent > 100) {
                              percent = 100;
                            }

                            var red_step   = (end[0] - start[0])/100;
                            var green_step = (end[1] - start[1])/100;
                            var blue_step  = (end[2] - start[2])/100;

                            var red =   Math.floor(start[0] + percent * red_step);
                            var green = Math.floor(start[1] + percent * green_step);
                            var blue =  Math.floor(start[2] + percent * blue_step);

                            var red_hex = pad(red.toString(16), 2);
                            var green_hex = pad(green.toString(16), 2);
                            var blue_hex = pad(blue.toString(16), 2);

                            var color = red_hex+green_hex+blue_hex;  

                            return color;
                          },
                          flex: 1,
                          id: 'school_report_tabs',
                          style: '{background-color:yellow;}',
                          activeTab: 0,
                          items: [
                            {
                              xtype: 'panel',
                              cls: 'testing',
                              id: 'school_multiplication_tab',
                              autoScroll: false,
                              layout: {
                                align: 'stretch',
                                type: 'vbox'
                              },
                              title: 'Multiplication',
                              items: [
                                {
                                  xtype: 'container',
                                  flex: 1,
                                  autoScroll: true,
                                  layout: {
                                    align: 'stretch',
                                    type: 'hbox'
                                  },
                                  items: [
                                    {
                                      xtype: 'WeeklyUsageGraph',
                                      flex: 2
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Pre-Test Scores'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'PretestChartStore',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'percent'
                                              ],
                                              label: {
                                                renderer: function(v) {return v+'%'; }
                                              },
                                              position: 'bottom'
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'value'
                                              ],
                                              majorTickSteps: 2,
                                              position: 'left',
                                              title: '# of Students',
                                              decimals: 0,
                                              minimum: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              renderer: function(sprite, record, attributes, index, store) {
                                                return Ext.apply(attributes, {
                                                  fill: '#ff0000'
                                                });
                                              },
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (storeItem.get('value') == '1') {
                                                    student_label = 'students'; 
                                                  }
                                                  this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                                }
                                              },
                                              yField: [
                                                'value'
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Post-Test Scores'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'PosttestChartStore',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'percent'
                                              ],
                                              label: {
                                                renderer: function(v) {return v+'%'; }
                                              },
                                              position: 'bottom'
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'value'
                                              ],
                                              majorTickSteps: 1,
                                              position: 'left',
                                              decimals: 0,
                                              minimum: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              renderer: function(sprite, record, attributes, index, store) {
                                                return Ext.apply(attributes, {
                                                  fill: '#0066cc'
                                                });
                                              },
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (storeItem.get('value') == '1') {
                                                    student_label = 'students'; 
                                                  }
                                                  this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                                }
                                              },
                                              xField: 'percent',
                                              yField: [
                                                'value'
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  xtype: 'gridpanel',
                                  flex: 2,
                                  id: 'school_report_grid_mult',
                                  autoScroll: false,
                                  title: '',
                                  store: 'ClassStore',
                                  columnLines: true,
                                  columns: [
                                    {
                                      xtype: 'gridcolumn',
                                      dataIndex: 'name',
                                      flex: 2,
                                      text: 'Class'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return "";
                                        return value;
                                      },
                                      width: 87,
                                      align: 'center',
                                      dataIndex: 'm_pretest_taken',
                                      flex: 1,
                                      text: 'Pre-Tests Taken'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return '';
                                        return value + '%';
                                      },
                                      width: 81,
                                      align: 'center',
                                      dataIndex: 'm_pretest_avg',
                                      flex: 1,
                                      text: 'Avg. Pre-Test'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_10',
                                      flex: 1,
                                      text: '10%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_20',
                                      flex: 1,
                                      text: '20%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_30',
                                      flex: 1,
                                      text: '30%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_40',
                                      flex: 1,
                                      text: '40%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_50',
                                      flex: 1,
                                      text: '50%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_60',
                                      flex: 1,
                                      text: '60%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_70',
                                      flex: 1,
                                      text: '70%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_80',
                                      flex: 1,
                                      text: '80%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'm_90',
                                      flex: 1,
                                      text: '90%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("m_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 93,
                                      align: 'center',
                                      dataIndex: 'm_posttest_taken',
                                      flex: 1,
                                      text: 'Post-Tests Taken'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return "";

                                        var total_pretests = Ext.getStore('ClassStore').data.items[rowIndex].data.m_pretest_taken;
                                        var color = Ext.getCmp('school_report_tabs').get_color(value, 100, [255,255,255], [102,204,0]);

                                        setTimeout(function() {
                                          var row = view.getNode(record);
                                          //Capturing the el (I need the div to do the trick)
                                          var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                                          try {    
                                            el.dom.style.setProperty('background-color', '#' + color);
                                          } catch (err) {
                                            el.dom.style['backgroundColor'] = '#' + color;
                                          }
                                        }, 50);

                                        return value + "%";
                                      },
                                      width: 83,
                                      align: 'center',
                                      dataIndex: 'm_posttest_avg',
                                      flex: 1,
                                      text: 'Avg. Post-Test'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return "";
                                        return value;
                                      },
                                      width: 65,
                                      align: 'center',
                                      dataIndex: 'm_total_hours',
                                      flex: 1,
                                      text: 'Total Hous'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value < 1) return "";
                                        var minutes = ("00"+value%60).slice(-2);
                                        var hours =  Math.floor(value/60);
                                        return hours + ":"+minutes;
                                      },
                                      width: 63,
                                      align: 'center',
                                      dataIndex: 'm_avg_time',
                                      flex: 1,
                                      text: 'Avg. Time'
                                    }
                                  ],
                                  viewConfig: {
                                    autoScroll: false
                                  }
                                }
                              ],
                              listeners: {
                                activate: {
                                  fn: me.onSchool_multiplication_tabActivate,
                                  scope: me
                                }
                              }
                            },
                            {
                              xtype: 'panel',
                              cls: 'testing',
                              id: 'school_division_tab',
                              autoScroll: true,
                              layout: {
                                align: 'stretch',
                                type: 'vbox'
                              },
                              title: 'Division',
                              items: [
                                {
                                  xtype: 'container',
                                  flex: 1,
                                  layout: {
                                    align: 'stretch',
                                    type: 'hbox'
                                  },
                                  items: [
                                    {
                                      xtype: 'container',
                                      flex: 2,
                                      autoScroll: false,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Usage'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          id: 'school_progressing_students_division',
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'WeeklyProgressStore',
                                          theme: 'Fancy',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'date'
                                              ],
                                              position: 'bottom',
                                              title: ''
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'p',
                                                'np'
                                              ],
                                              position: 'left',
                                              title: '# of Students',
                                              decimals: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (item.value[1] == 1) {
                                                    student_label = 'student'; 
                                                  }       
                                                  this.setTitle(item.value[1] + ' ' + student_label);
                                                }
                                              },
                                              title: [
                                                'Playing > 20 min/wk',
                                                'Playing some: < 20 min/wk'
                                              ],
                                              xField: 'date',
                                              yField: [
                                                'p',
                                                'np'
                                              ],
                                              stacked: true
                                            }
                                          ],
                                          legend: {
                                            position: 'right'
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Pre-Test Scores'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'PretestChartStore',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'percent'
                                              ],
                                              label: {
                                                renderer: function(v) {return v+'%'; }
                                              },
                                              position: 'bottom'
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'value'
                                              ],
                                              majorTickSteps: 2,
                                              position: 'left',
                                              title: '# of Students',
                                              decimals: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              renderer: function(sprite, record, attributes, index, store) {
                                                return Ext.apply(attributes, {
                                                  fill: '#ff0000'
                                                });
                                              },
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (storeItem.get('value') == '1') {
                                                    student_label = 'students'; 
                                                  }
                                                  this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                                }
                                              },
                                              yField: [
                                                'value'
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Post-Test Scores'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'PosttestScoresStore',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'percent'
                                              ],
                                              label: {
                                                renderer: function(v) {return v+'%'; }
                                              },
                                              position: 'bottom'
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'value'
                                              ],
                                              majorTickSteps: 2,
                                              position: 'left',
                                              decimals: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              renderer: function(sprite, record, attributes, index, store) {
                                                return Ext.apply(attributes, {
                                                  fill: '#0066cc'
                                                });
                                              },
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (storeItem.get('value') == '1') {
                                                    student_label = 'students'; 
                                                  }
                                                  this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                                }
                                              },
                                              xField: 'percent',
                                              yField: [
                                                'value'
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  xtype: 'gridpanel',
                                  flex: 2,
                                  id: 'school_report_grid_div',
                                  autoScroll: true,
                                  title: '',
                                  store: 'ClassStore',
                                  columnLines: true,
                                  columns: [
                                    {
                                      xtype: 'gridcolumn',
                                      dataIndex: 'name',
                                      flex: 2,
                                      text: 'Class'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return '';
                                        return value;
                                      },
                                      width: 89,
                                      align: 'center',
                                      dataIndex: 'd_pretest_taken',
                                      flex: 1,
                                      text: 'Pre-Tests Taken'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return '';
                                        return value + '%';
                                      },
                                      width: 77,
                                      align: 'center',
                                      dataIndex: 'd_pretest_avg',
                                      flex: 1,
                                      text: 'Avg. Pre-Test'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_10',
                                      flex: 1,
                                      text: '10%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_20',
                                      flex: 1,
                                      text: '20%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_30',
                                      flex: 1,
                                      text: '30%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_40',
                                      flex: 1,
                                      text: '40%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_50',
                                      flex: 1,
                                      text: '50%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_60',
                                      flex: 1,
                                      text: '60%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_70',
                                      flex: 1,
                                      text: '70%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_80',
                                      flex: 1,
                                      text: '80%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'd_90',
                                      flex: 1,
                                      text: '90%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("d_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 92,
                                      align: 'center',
                                      dataIndex: 'd_posttest_taken',
                                      flex: 1,
                                      text: 'Post-Tests Taken'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return "";

                                        var total_pretests = Ext.getStore('ClassStore').data.items[rowIndex].data.m_pretest_taken;
                                        var color = Ext.getCmp('school_report_tabs').get_color(value, 100, [255,255,255], [102,204,0]);

                                        setTimeout(function() {
                                          var row = view.getNode(record);
                                          //Capturing the el (I need the div to do the trick)
                                          var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                                          try {    
                                            el.dom.style.setProperty('background-color', '#' + color);
                                          } catch (err) {
                                            el.dom.style['backgroundColor'] = '#' + color;
                                          }
                                        }, 50);

                                        return value + "%";
                                      },
                                      width: 85,
                                      align: 'center',
                                      dataIndex: 'd_posttest_avg',
                                      flex: 1,
                                      text: 'Avg. Post-Test'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return '';
                                        return value;
                                      },
                                      width: 62,
                                      align: 'center',
                                      dataIndex: 'd_total_hours',
                                      flex: 1,
                                      text: 'Total Hous'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value < 1) return "";
                                        var minutes = value%60;
                                        var hours =  Math.floor(value/60);
                                        return hours + ":"+minutes;
                                      },
                                      width: 63,
                                      align: 'center',
                                      dataIndex: 'd_avg_time',
                                      flex: 1,
                                      text: 'Avg. Time'
                                    }
                                  ],
                                  viewConfig: {
                                    autoScroll: false
                                  }
                                }
                              ],
                              listeners: {
                                activate: {
                                  fn: me.onSchool_division_tabActivate,
                                  scope: me
                                }
                              }
                            },
                            {
                              xtype: 'panel',
                              cls: 'testing',
                              id: 'school_addsubtract_tab',
                              autoScroll: true,
                              layout: {
                                align: 'stretch',
                                type: 'vbox'
                              },
                              title: 'Addition/Subtraction',
                              items: [
                                {
                                  xtype: 'container',
                                  flex: 1,
                                  layout: {
                                    align: 'stretch',
                                    type: 'hbox'
                                  },
                                  items: [
                                    {
                                      xtype: 'container',
                                      flex: 2,
                                      autoScroll: false,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Usage'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          id: 'school_progressing_students_addsub',
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'WeeklyProgressStore',
                                          theme: 'Fancy',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'date'
                                              ],
                                              position: 'bottom',
                                              title: ''
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'p',
                                                'np'
                                              ],
                                              position: 'left',
                                              title: '# of Students',
                                              decimals: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (item.value[1] == 1) {
                                                    student_label = 'student'; 
                                                  }       
                                                  this.setTitle(item.value[1] + ' ' + student_label);
                                                }
                                              },
                                              title: [
                                                'Playing > 20 min/wk',
                                                'Playing some: < 20 min/wk'
                                              ],
                                              xField: 'date',
                                              yField: [
                                                'p',
                                                'np'
                                              ],
                                              stacked: true
                                            }
                                          ],
                                          legend: {
                                            position: 'right'
                                          }
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Pre-Test Scores'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'PretestChartStore',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'percent'
                                              ],
                                              label: {
                                                renderer: function(v) {return v+'%'; }
                                              },
                                              position: 'bottom'
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'value'
                                              ],
                                              majorTickSteps: 2,
                                              position: 'left',
                                              title: '# of Students',
                                              decimals: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              renderer: function(sprite, record, attributes, index, store) {
                                                return Ext.apply(attributes, {
                                                  fill: '#ff0000'
                                                });
                                              },
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (storeItem.get('value') == '1') {
                                                    student_label = 'students'; 
                                                  }
                                                  this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                                }
                                              },
                                              yField: [
                                                'value'
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      xtype: 'container',
                                      flex: 1,
                                      layout: {
                                        align: 'stretch',
                                        type: 'vbox'
                                      },
                                      items: [
                                        {
                                          xtype: 'label',
                                          style: 'text-align:center;font-size:200%;font-style:normal',
                                          text: 'Post-Test Scores'
                                        },
                                        {
                                          xtype: 'chart',
                                          flex: 1,
                                          animate: true,
                                          insetPadding: 20,
                                          store: 'PosttestScoresStore',
                                          axes: [
                                            {
                                              type: 'Category',
                                              fields: [
                                                'percent'
                                              ],
                                              label: {
                                                renderer: function(v) {return v+'%'; }
                                              },
                                              position: 'bottom'
                                            },
                                            {
                                              type: 'Numeric',
                                              fields: [
                                                'value'
                                              ],
                                              majorTickSteps: 2,
                                              position: 'left',
                                              decimals: 0
                                            }
                                          ],
                                          series: [
                                            {
                                              type: 'column',
                                              renderer: function(sprite, record, attributes, index, store) {
                                                return Ext.apply(attributes, {
                                                  fill: '#0066cc'
                                                });
                                              },
                                              highlight: true,
                                              tips: {
                                                trackMouse: true,
                                                width: 100,
                                                height: 28,
                                                renderer: function(storeItem, item) {
                                                  var student_label = 'students';
                                                  if (storeItem.get('value') == '1') {
                                                    student_label = 'students'; 
                                                  }
                                                  this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                                }
                                              },
                                              xField: 'percent',
                                              yField: [
                                                'value'
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  xtype: 'gridpanel',
                                  flex: 2,
                                  id: 'school_report_grid_addsub',
                                  autoScroll: true,
                                  title: '',
                                  store: 'ClassStore',
                                  columnLines: true,
                                  columns: [
                                    {
                                      xtype: 'gridcolumn',
                                      dataIndex: 'name',
                                      flex: 2,
                                      text: 'Class'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return '';
                                        return value;
                                      },
                                      width: 89,
                                      align: 'center',
                                      dataIndex: 'as_pretest_taken',
                                      flex: 1,
                                      text: 'Pre-Tests Taken'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return '';
                                        return value + '%';
                                      },
                                      width: 80,
                                      align: 'center',
                                      dataIndex: 'as_pretest_avg',
                                      flex: 1,
                                      text: 'Avg. Pre-Test'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_10',
                                      flex: 1,
                                      text: '10%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_20',
                                      flex: 1,
                                      text: '20%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_30',
                                      flex: 1,
                                      text: '30%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_40',
                                      flex: 1,
                                      text: '40%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_50',
                                      flex: 1,
                                      text: '50%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_60',
                                      flex: 1,
                                      text: '60%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_70',
                                      flex: 1,
                                      text: '70%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_80',
                                      flex: 1,
                                      text: '80%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 35,
                                      align: 'center',
                                      dataIndex: 'as_90',
                                      flex: 1,
                                      text: '90%'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return Ext.getCmp('school_report_tabs').get_cell_color("as_pretest_taken", rowIndex, value, record, colIndex, view);
                                      },
                                      width: 92,
                                      align: 'center',
                                      dataIndex: 'as_posttest_taken',
                                      flex: 1,
                                      text: 'Post-Tests Taken'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return "";

                                        var total_pretests = Ext.getStore('ClassStore').data.items[rowIndex].data.m_pretest_taken;
                                        var color = Ext.getCmp('school_report_tabs').get_color(value, 100, [255,255,255], [102,204,0]);

                                        setTimeout(function() {
                                          var row = view.getNode(record);
                                          //Capturing the el (I need the div to do the trick)
                                          var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                                          try {    
                                            el.dom.style.setProperty('background-color', '#' + color);
                                          } catch (err) {
                                            el.dom.style['backgroundColor'] = '#' + color;
                                          }
                                        }, 50);

                                        return value + "%";
                                      },
                                      width: 85,
                                      align: 'center',
                                      dataIndex: 'as_posttest_avg',
                                      flex: 1,
                                      text: 'Avg. Post-Test'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value === 0) return '';
                                        return value;
                                      },
                                      width: 66,
                                      align: 'center',
                                      dataIndex: 'as_total_hours',
                                      flex: 1,
                                      text: 'Total Hous'
                                    },
                                    {
                                      xtype: 'gridcolumn',
                                      renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        if (value < 1) return "";
                                        var minutes = value%60;
                                        var hours =  Math.floor(value/60);
                                        return hours + ":"+minutes;
                                      },
                                      width: 64,
                                      align: 'center',
                                      dataIndex: 'as_avg_time',
                                      flex: 1,
                                      text: 'Avg. Time'
                                    }
                                  ],
                                  viewConfig: {
                                    autoScroll: false
                                  }
                                }
                              ],
                              listeners: {
                                activate: {
                                  fn: me.onSchool_addsubtract_tabActivate,
                                  scope: me
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      listeners: {
        afterrender: {
          fn: me.onEducator_tree_viewportAfterRender,
          scope: me
        }
      }
    });

    me.callParent(arguments);
  },

  onSchool_treeSelect: function(selModel, record, index, options) {
    if (Ext.getCmp('school_tree').getSelectionModel().getSelection() < 1 || Ext.getCmp('school_tree').getSelectionModel().getSelection()[0].data.id === "0") {  
      //Selected the root
      Ext.getCmp('school_report_tabs').show();
      Ext.getCmp('report_tabs').hide();
      return;
    }
    Ext.getCmp('school_report_tabs').hide();
    Ext.getCmp('report_tabs').show();
    if (record.data.leaf) {
      //Selected a student  
      Ext.getCmp('class_multiplication_container').hide();
      Ext.getCmp('student_multiplication_container').show();

      Ext.getCmp('class_division_container').hide();
      Ext.getCmp('student_division_container').show();

      Ext.getCmp('class_addsub_container').hide();
      Ext.getCmp('student_addsub_container').show();  

      var str1 = record.data.id;
      var re = new RegExp(str1, "g");
      Ext.getStore('GameStore').clearFilter();
      Ext.getStore('GameStore').filter("id", re);

      Ext.getStore("GameDataStore").proxy.url = "routes/routes.php?url=/games/"+record.data.id+"/report_data";    
      Ext.getStore("GameDataStore").load({callback: function(r, options, success)  {     
        var data = Ext.getStore('GameDataStore').data.items[0].data.weekly_time.TimePlayedta9;
        try {
          Ext.getStore('StudentWeeklyMinutes').loadRawData(data);
        } catch (error) {

        }
      }});
    } else {
      //class
      /*
      if (Ext.getCmp('student_multiplication_container').getSize().height == 0) {
      Ext.getCmp('class_multiplication_container').setHeight(Ext.getCmp('report_tabs').getSize().height);
      Ext.getCmp('class_division_container').setHeight(Ext.getCmp('report_tabs').getSize().height);
      Ext.getCmp('class_addsub_container').setHeight(Ext.getCmp('report_tabs').getSize().height);
      }*/


      var id = record.data.id;
      var class_idx = Ext.getStore('ClassStore').find('id',id);
      var class_record = Ext.getStore('ClassStore').data.items[class_idx];

      var pilot_class = class_record.data.PilotClass;
      if (pilot_class == "True") pilot_class = true;
      var node = Ext.getStore('SchoolTreeStore').getNodeById(id);
      Ext.getCmp('school_tree').expandPath(node.getPath());
      Ext.getCmp('school_tree').selectPath(node.getPath());

      Ext.getStore('GameStore').clearFilter();
      Ext.getStore("GameStore").proxy.url = "routes/routes.php?url=/classes/"+record.data.id+"/children";  
      Ext.getStore("GameStore").load({callback: function(r, options, success)  {     
        Ext.getCmp('class_multiplication_container').show();
        Ext.getCmp('student_multiplication_container').hide();

        Ext.getCmp('class_division_container').show();
        Ext.getCmp('student_division_container').hide();

        Ext.getCmp('class_addsub_container').show();
        Ext.getCmp('student_addsub_container').hide();

        var num_of_games = Ext.getStore("GameStore").data.items.length;    

        var message = 'It looks like you have not added any students.  Would you like to add some now?';
        if (pilot_class) {
          message = 'It looks like you have not added any students to this Pilot Class.  Would you like to add some now?  Remember, you can add up to 30 students who can play the deluxe version of the game.';
        }
        if (num_of_games < 1) {
          setTimeout(function () {
            Ext.MessageBox.confirm('Add Students', message, function(btn) {
              if (btn == "yes") {    
                var win = Ext.create("BigBrainzLauncher.view.AddStudentsWindow");
                win.show();
              }
            });}, 500);
          }
        }}); 
      }

  },

  onSchool_treeItemExpand: function(treepanel, options) {

    if (treepanel.data.leaf) {
      //student
    } else {
      Ext.getStore("GameStore").proxy.url = "routes/routes.php?url=/classes/"+treepanel.data.id+"/children";  
      Ext.getStore("GameStore").load({callback: function(r, options, success)  { 
      }});    
    }
  },

  onSchool_treeBeforeLoad: function(store, operation, options) {
    Ext.getStore("SchoolTreeStore").getRootNode().data.text = Ext.util.Cookies.get('__school_name_saved');
  },

  onGridpanelSelect2: function(selModel, record, index, options) {
    var id = record.data.id;
    var node = Ext.getStore('SchoolTreeStore').getNodeById(id);
    Ext.getCmp('school_tree').selectPath(node.getPath());
  },

  onContainerAfterRender21: function(abstractcomponent, options) {
    Ext.get('play_multiplication').on('click', function(eventObj, elRef) {  
      var selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
      selected = selected[0];
      var game_id = selected.data.id;


      var app_id = 'turbo';
      var game_node = Ext.getCmp('school_tree').getSelectionModel().getSelection()[0];
      var class_name = game_node.parentNode.data.text;
      if(class_name == 'Ninja Apprentice') {
        app_id = 'ninja1';
      } else if (class_name == 'Ninja') {
        app_id = 'ninja2';
      } else if (class_name == 'Ninja Master') {
        app_id = 'ninja3';
      } else if (class_name == 'Ninja Calculated' || class_name.endsWith('_*')) {
        app_id = 'ninjaC';
      }


      window.location.href = 'play.php?appid=' + app_id + '&school_id='+school_data.id+'&id='+game_id;
    });
    setTimeout(function() {
      Ext.getCmp('student_multiplication_container').layout.layout();  
    }, 100);
  },

  onMultiplication_tabShow: function(abstractcomponent, options) {
    if (Ext.getStore('GameDataStore').data.items.length < 1) {
      var selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
      selected = selected[0];
      if (!selected.isLeaf()) {
        return;
      }
      var game_id = selected.data.id;
      Ext.getStore("GameDataStore").proxy.url = "routes/routes.php?url=/games/"+game_id+"/report_data";    
      Ext.getStore("GameDataStore").load({callback: function(r, options, success)  {    
        try {
          Ext.getCmp('report_tabs').LoadWeeklyMinutes('TimePlayedta9');
        } catch (error) {

        }    
      }});
    } else {  
      try {
        Ext.getCmp('report_tabs').LoadWeeklyMinutes('TimePlayedta9');
      } catch (error) {

      }      
    }

  },

  onGridpanelSelect1: function(selModel, record, index, options) {
    var id = record.data.id;
    var node = Ext.getStore('SchoolTreeStore').getNodeById(id);
    Ext.getCmp('school_tree').selectPath(node.getPath());
  },

  onContainerAfterRender122: function(abstractcomponent, options) {
    Ext.get('play_division').on('click', function(eventObj, elRef) {
      var selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
      selected = selected[0];
      var game_id = selected.data.id;
      window.location.href = 'play.php?appid=division&school_id='+school_data.id+'&id='+game_id;
    });
    //setTimeout(function() {
    //  Ext.getCmp('student_division_container').layout.layout(); 
    //console
    //}, 100);
  },

  onDivision_tabShow: function(abstractcomponent, options) {
    if (Ext.getStore('GameDataStore').data.items.length < 1) {
      var selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
      selected = selected[0];
      if (!selected.isLeaf()) {
        return;
      }
      var game_id = selected.data.id;
      Ext.getStore("GameDataStore").proxy.url = "routes/routes.php?url=/games/"+game_id+"/report_data";    
      Ext.getStore("GameDataStore").load({callback: function(r, options, success)  {     
        try {
          Ext.getCmp('report_tabs').LoadWeeklyMinutes('TimePlayeddivision');
        } catch (error) {

        }    
      }});
    } else {  
      try {
        Ext.getCmp('report_tabs').LoadWeeklyMinutes('TimePlayeddivision');
      } catch (error) {

      }
    }

  },

  onGridpanelSelect: function(selModel, record, index, options) {
    var id = record.data.id;
    var node = Ext.getStore('SchoolTreeStore').getNodeById(id);
    Ext.getCmp('school_tree').selectPath(node.getPath());
  },

  onContainerAfterRender1211: function(abstractcomponent, options) {
    Ext.get('play_addsub').on('click', function(eventObj, elRef) {
      var selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
      selected = selected[0];
      var game_id = selected.data.id;
      window.location.href = 'play.php?appid=addsubtract&school_id='+school_data.id+'&id='+game_id;
    });
    //setTimeout(function() {
    //  Ext.getCmp('student_addsub_container').layout.layout();
    //console
    //}, 100);
  },

  onAddsubtract_tabShow: function(abstractcomponent, options) {
    if (Ext.getStore('GameDataStore').data.items.length < 1) {
      var selected = Ext.getCmp('school_tree').getSelectionModel().getSelection();
      selected = selected[0];
      if (!selected.isLeaf()) {
        return;
      }
      var game_id = selected.data.id;
      Ext.getStore("GameDataStore").proxy.url = "routes/routes.php?url=/games/"+game_id+"/report_data";    
      Ext.getStore("GameDataStore").load({callback: function(r, options, success)  {     
        try {
          Ext.getCmp('report_tabs').LoadWeeklyMinutes('TimePlayedaddsubtract');
        } catch (error) {

        }
      }});
    } else {  
      try {
        Ext.getCmp('report_tabs').LoadWeeklyMinutes('TimePlayedaddsubtract');
      } catch (error) {

      }
    }

  },

  onSchool_multiplication_tabActivate: function(abstractcomponent, options) {
    var weekly_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.weekly_progress_ta9);
    Ext.getStore('WeeklyProgressStore').loadRawData(weekly_data);
    var pretest_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.pretests_ta9);
    Ext.getStore('PretestChartStore').loadRawData(pretest_data);
    var posttest_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.posttests_ta9);
    Ext.getStore('PosttestChartStore').loadRawData(posttest_data);
  },

  onSchool_division_tabActivate: function(abstractcomponent, options) {
    var weekly_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.weekly_progress_division);
    Ext.getStore('WeeklyProgressStore').loadRawData(weekly_data);

    var pretest_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.pretests_division);
    Ext.getStore('PretestChartStore').loadRawData(pretest_data);

    var posttest_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.posttests_division);
    Ext.getStore('PosttestChartStore').loadRawData(posttest_data);
  },

  onSchool_addsubtract_tabActivate: function(abstractcomponent, options) {
    var weekly_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.weekly_progress_addsub);
    Ext.getStore('WeeklyProgressStore').loadRawData(weekly_data);

    var pretest_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.pretests_addsub);
    Ext.getStore('PretestChartStore').loadRawData(pretest_data);

    var posttest_data = Ext.decode(Ext.getStore('SchoolStore').data.items[0].data.posttests_addsub);
    Ext.getStore('PosttestChartStore').loadRawData(posttest_data);
  },

  onEducator_tree_viewportAfterRender: function(abstractcomponent, options) {
    var delNode;
    var treePanel = Ext.getCmp('school_tree');
    while (delNode = treePanel.getRootNode().childNodes[0]) {
      treePanel.getRootNode().removeChild(delNode);
    }


    Ext.getStore('SchoolTreeStore').proxy.url = 'routes/routes.php?url=/schools/' + school_data.id + '/classes/tree';
    Ext.getStore('SchoolTreeStore').load({callback: function(records, operation, success) {
      var length = Ext.getStore('ClassStore').data.items.length;
      for (i = 0; i < length; i++) {
        var id = Ext.getStore('ClassStore').data.items[i].data.id        
        var node = Ext.getStore('SchoolTreeStore').getNodeById(id);
        var d = Ext.get(Ext.getCmp('school_tree').view.getNode(node))
        if (Ext.getStore('ClassStore').data.items[i].data.PizzaPartyClass == "true") {
          Ext.get(d.id).addCls("pizzaclassred")
        }
      }
    }});

    var status = Ext.getStore('SchoolStore').getById(school_data.id).data.status;
    if(status.substring(0,5) == 'offer') {
      Ext.get('deluxe').on('click', function(eventObj, elRef) {
        var view = Ext.create('BigBrainzLauncher.view.UnlockDeluxeWindow');
        view.show();
      });
    }

    if (status.substring(0,4) == "free") {
      Ext.get('deluxe').hide();
    } else if (status.substring(0,6) == "deluxe"){
      Ext.get('deluxe').on('click', function(eventObj, elRef) {});
      if (Ext.getStore('SchoolStore').getById(school_data.id).data.purchase_status == "free") {
        Ext.getDom('deluxe').id = "pilotunlocked";
      } else {
        Ext.getDom('deluxe').id = "deluxeunlocked"; 
      }  
    } else if (status === "pizza_offer") {
      Ext.getDom('deluxe').id = "pizza";
      Ext.get('pizza').on('click', function(eventObj, elRef) {
        var view = Ext.create('BigBrainzLauncher.view.PizzaPartySignup');
        view.show();
      });
    } else {  
      if (status == "offer_pilot") {
        Ext.getDom('deluxe').id = "pilotdeluxe";    
      }
    }
    var store = Ext.getStore('SchoolStore');
    var record = store.data.items[store.find('id', school_data.id)];
    var messages_read = Ext.decode(record.data.messages_read);

    messages_read = [0,1,2,3];
    var found = false;
    var messages_length = messages_read.length;
    for(i = 0; i < messages_length; i++) {
      if (messages_read[i] === 0) {
        found = true;
        break;
      }
    }
    if (!found) {
      var win = Ext.create("BigBrainzLauncher.view.StartupMessageWindow");
      win.show();
    }

    if (Ext.getStore('ClassStore').data.items.length < 1) {
      setTimeout(function () {
        Ext.MessageBox.confirm('Add Classes', 'It looks like you have not added any classes.  Would you like to add some now?', function(btn) {
          if (btn == "yes") {    
            var win = Ext.create("BigBrainzLauncher.view.AddClassesWindow");
            win.show();
          }
        });}, 1000);
      }
      if (state_data.name == "New York") {
        Ext.getCmp('new_york_proxy_label').show(); 
      }  
  }

});
/*
 * File: app/view/DistrictOverview.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.DistrictOverview', {
  extend: 'Ext.container.Viewport',

  requires: [
    'BigBrainzLauncher.view.WeeklyUsageGraph',
    'BigBrainzLauncher.view.AvgerageImprovementGraphs'
  ],

  id: 'district_overview',
  layout: {
    align: 'stretch',
    type: 'hbox'
  },

  initComponent: function() {
    var me = this;

    Ext.applyIf(me, {
      items: [
        {
          xtype: 'treepanel',
          load_district_report: function(mask) {
            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/districts/' + district_data.id + '/weekly_progress',
              success: function(result) {
                report_data.data = Ext.decode(result.responseText);    
                Ext.getCmp('district_tree_panel').load_weekly_progress();
              },
              failure: function() {

              }
            });


            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/districts/' + district_data.id + '/report/test_scores/pretest&method=get',
              success: function(result) {
                pretest_data.data = Ext.decode(result.responseText);
                Ext.Ajax.request({
                  method: 'GET',
                  url: 'routes/routes.php?url=/districts/' + district_data.id + '/report/test_scores/posttest&method=get',
                  success: function(result) {
                    posttest_data.data = Ext.decode(result.responseText);    
                    Ext.Ajax.request({
                      method: 'GET',
                      url: 'routes/routes.php?url=/districts/' + district_data.id + '/report/test_scores/posttest&method=get',
                      success: function(result) {
                        posttest_data.data = Ext.decode(result.responseText);    
                        Ext.getCmp('district_tree_panel').load_test_scores();
                      },
                      failure: function() {
                        Ext.Msg.alert("Could not load pretest chart data.  Please try again.");
                      }
                    });
                  },
                  failure: function() {
                    Ext.Msg.alert("Could not load pretest chart data.  Please try again.");
                  }
                });
              },
              failure: function() {
                Ext.Msg.alert("Could not load pretest chart data.  Please try again.");
              }
            });




            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/districts/'+ district_data.id + '/report&method=get',
              success: function(result) {
                report_grid_data.data = Ext.decode(result.responseText);
                Ext.getCmp('district_tree_panel').load_grid_progress();
                if (mask) mask.hide();
              },
              failure: function() {
                Ext.Msg.alert("Could load district report.  Please try again.");
                if (mask) mask.hide();
              }
            });

            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/districts/' + district_data.id  + '/avg_test_scores&method=get',
              success: function(result) {
                avg_improvement.data = Ext.decode(result.responseText);
                Ext.getCmp('district_tree_panel').load_improvement_chart();    
              },
              failure: function() {
                Ext.Msg.alert("Could load district report.  Please try again.");
              }
            });
          },
          load_school_report: function(id, text, mask) {
            school_data.id = id;
            school_data.name = text;

            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/schools/' + id + '/weekly_progress',
              success: function(result) {
                report_data.data = Ext.decode(result.responseText);
                Ext.getCmp('district_tree_panel').load_weekly_progress();
              },
              failure: function() {

              }
            });

            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/districts/' + id + '/report/test_scores/pretest&method=get',
              success: function(result) {
                pretest_data.data = Ext.decode(result.responseText);
                Ext.Ajax.request({
                  method: 'GET',
                  url: 'routes/routes.php?url=/districts/' + id + '/report/test_scores/posttest&method=get',
                  success: function(result) {
                    posttest_data.data = Ext.decode(result.responseText);    
                    Ext.Ajax.request({
                      method: 'GET',
                      url: 'routes/routes.php?url=/districts/' + id + '/report/test_scores/posttest&method=get',
                      success: function(result) {
                        posttest_data.data = Ext.decode(result.responseText);    
                        Ext.getCmp('district_tree_panel').load_test_scores();
                      },
                      failure: function() {
                        Ext.Msg.alert("Could not load pretest chart data.  Please try again.");
                      }
                    });
                  },
                  failure: function() {
                    Ext.Msg.alert("Could not load pretest chart data.  Please try again.");
                  }
                });
              },
              failure: function() {
                Ext.Msg.alert("Could not load pretest chart data.  Please try again.");
              }
            });

            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/schools/'+ id + '/report&method=get',
              success: function(result) {
                report_grid_data.data = Ext.decode(result.responseText);
                Ext.getCmp('district_tree_panel').load_grid_progress();
                if (mask) mask.hide();
              },
              failure: function() {
                Ext.Msg.alert("Could load district report.  Please try again.");
                if (mask) mask.hide();
              }
            });
            Ext.Ajax.request({
              method: 'GET',
              url: 'routes/routes.php?url=/districts/' + id  + '/avg_test_scores&method=get',
              success: function(result) {
                avg_improvement.data = Ext.decode(result.responseText);
                Ext.getCmp('district_tree_panel').load_improvement_chart();    
              },
              failure: function() {
                Ext.Msg.alert("Could load district report.  Please try again.");
              }
            });
          },
          load_test_scores: function() {
            var app_id = 'ta9';
            if (this.next().down('tab').next().next().active) {
              app_id = 'division';
            } else if (this.next().down('tab').next().next().next().active) {
              app_id = 'addsub';
            }
            Ext.getStore('PretestChartStore').loadRawData(pretest_data.data[app_id]);
            Ext.getStore('PosttestChartStore').loadRawData(posttest_data.data[app_id]);
          },
          load_weekly_progress: function() {
            var weekly_data = Ext.decode(report_data.data.ta9);  
            if (this.next().down('tab').next().next().active) {
              weekly_data = Ext.decode(report_data.data.division);     
            } else if (this.next().down('tab').next().next().next().active) {
              weekly_data = Ext.decode(report_data.data.addsub);
            }
            Ext.getStore('WeeklyProgressStore').loadRawData(weekly_data);
          },
          load_grid_progress: function() {
            var weekly_data = report_grid_data.data.ta9;  
            if (this.next().down('tab').next().next().active) {
              weekly_data = report_grid_data.data.division;
            } else if (this.next().down('tab').next().next().next().active) {
              weekly_data = report_grid_data.data.addsub;
            }
            Ext.getStore('DistrictReportStore').loadRawData(weekly_data);
          },
          load_improvement_chart: function() {
            var data = avg_improvement.data.ta9;
            if (this.next().down('tab').next().next().active) {
              data = avg_improvement.data.division;  
            } else if (this.next().down('tab').next().next().next().active) {
              data = avg_improvement.data.addsub;
            }
            Ext.getStore('AverageImprovementStore').loadRawData(data);
          },
          flex: 1,
          id: 'district_tree_panel',
          title: '',
          store: 'DistrictTreeStore',
          viewConfig: {

          },
          listeners: {
            afterrender: {
              fn: me.onDistrict_tree_panelAfterRender,
              scope: me
            },
            select: {
              fn: me.onDistrict_tree_panelSelect,
              scope: me
            }
          }
        },
        {
          xtype: 'panel',
          flex: 7,
          id: 'district_report_panel',
          layout: {
            align: 'stretch',
            type: 'vbox'
          },
          title: 'District Report (Prototype)',
          items: [
            {
              xtype: 'tabpanel',
              flex: 1,
              id: 'district_report_tab',
              activeTab: 0,
              items: [
                {
                  xtype: 'panel',
                  layout: {
                    align: 'stretch',
                    type: 'vbox'
                  },
                  title: 'Reports',
                  tabConfig: {
                    xtype: 'tab',
                    hidden: true
                  },
                  items: [
                    {
                      xtype: 'container',
                      flex: 1,
                      id: 'district_reports_graphs',
                      minHeight: 300,
                      autoScroll: false,
                      layout: {
                        type: 'fit'
                      },
                      items: [
                        {
                          xtype: 'container',
                          minHeight: 270,
                          autoScroll: true,
                          layout: {
                            type: 'table'
                          },
                          items: [
                            {
                              xtype: 'WeeklyUsageGraph',
                              height: 271,
                              minHeight: 270,
                              width: 800
                            },
                            {
                              xtype: 'avgerageimprovementgraphs',
                              height: 271,
                              minHeight: 270
                            },
                            {
                              xtype: 'container',
                              minHeight: 270,
                              width: 400,
                              maintainFlex: true,
                              items: [
                                {
                                  xtype: 'label',
                                  margin: 60,
                                  style: 'text-align:center;font-size:200%;font-style:normal',
                                  text: 'Pre-Test Scores'
                                },
                                {
                                  xtype: 'chart',
                                  height: 250,
                                  id: 'pretest_chart',
                                  width: 450,
                                  animate: true,
                                  insetPadding: 20,
                                  store: 'PretestChartStore',
                                  axes: [
                                    {
                                      type: 'Category',
                                      fields: [
                                        'percent'
                                      ],
                                      label: {
                                        renderer: function(v) {return v+'%';}
                                      },
                                      position: 'bottom',
                                      calculateCategoryCount: false
                                    },
                                    {
                                      type: 'Numeric',
                                      fields: [
                                        'value'
                                      ],
                                      majorTickSteps: 7,
                                      position: 'left',
                                      title: '# of Students',
                                      adjustMaximumByMajorUnit: false,
                                      adjustMinimumByMajorUnit: false,
                                      decimals: 0,
                                      minimum: 0
                                    }
                                  ],
                                  series: [
                                    {
                                      type: 'column',
                                      renderer: function(sprite, record, attributes, index, store) {
                                        return Ext.apply(attributes, {
                                          fill: '#ff0000'
                                        });
                                      },
                                      tips: {
                                        trackMouse: true,
                                        width: 100,
                                        height: 28,
                                        renderer: function(storeItem, item) {
                                          var student_label = 'students';
                                          if (storeItem.get('value') == '1') {
                                            student_label = 'student';
                                          }
                                          this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                        }
                                      },
                                      xField: 'percent',
                                      yField: [
                                        'value'
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              xtype: 'container',
                              padding: 20,
                              width: 400,
                              items: [
                                {
                                  xtype: 'label',
                                  margin: 60,
                                  style: 'text-align:center;font-size:200%;font-style:normal',
                                  text: 'Post-Test Scores'
                                },
                                {
                                  xtype: 'chart',
                                  height: 250,
                                  id: 'posttest_chart',
                                  width: 450,
                                  animate: true,
                                  insetPadding: 20,
                                  store: 'PosttestChartStore',
                                  axes: [
                                    {
                                      type: 'Category',
                                      fields: [
                                        'percent'
                                      ],
                                      label: {
                                        renderer: function(v) {return v+'%';}
                                      },
                                      position: 'bottom'
                                    },
                                    {
                                      type: 'Numeric',
                                      fields: [
                                        'value'
                                      ],
                                      majorTickSteps: 7,
                                      position: 'left',
                                      title: '# of Students',
                                      decimals: 0,
                                      minimum: 0
                                    }
                                  ],
                                  series: [
                                    {
                                      type: 'column',
                                      renderer: function(sprite, record, attributes, index, store) {
                                        return Ext.apply(attributes, {
                                          fill: '#0066cc'
                                        });
                                      },
                                      tips: {
                                        trackMouse: true,
                                        width: 100,
                                        height: 28,
                                        renderer: function(storeItem, item) {
                                          var student_label = 'students';
                                          if (storeItem.get('value') == '1') {
                                            student_label = 'student'; 
                                          }
                                          this.setTitle(storeItem.get('value') + ' ' + student_label + '.');
                                        }
                                      },
                                      xField: 'percent',
                                      yField: [
                                        'value'
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      xtype: 'container',
                      flex: 2,
                      id: 'grid_container',
                      autoScroll: true,
                      layout: {
                        type: 'fit'
                      },
                      items: [
                        {
                          xtype: 'gridpanel',
                          renderNumber: function(value) {
                            if (value < 1) return "";
                            return value;
                          },
                          renderPercentage: function(value) {
                            if (value < 1 || value === "") return "";
                            return value + '%';
                          },
                          colorCell: function(value, outOf, view, record, colIndex, startColor, endColor) {
                            if (value === 0) return "";

                            var color = this.get_color(value, outOf, startColor, endColor);
                            setTimeout(function() {
                              var row = view.getNode(record);
                              //Capturing the el (I need the div to do the trick)
                              try {
                                var el = Ext.fly(Ext.fly(row).query('.x-grid-cell')[colIndex]).down('div');
                                try {
                                  el.dom.style.setProperty('background-color', '#' + color);
                                } catch (err) {
                                  el.dom.style['backgroundColor'] = '#' + color;
                                }
                              } catch (err) {
                                return;
                              }

                            }, 50);
                          },
                          get_color: function(progress, total, start, end) {
                            if (progress === 0 || progress === " " || progress === "") {
                              return "";
                            }
                            start = typeof start !== 'undefined' ? start : [255,255,255];
                            end = typeof end !== 'undefined' ? end : [0,176,240];
                            var percent = (progress / total)*100;
                            if (percent > 100) {
                              percent = 100;
                            }

                            var red_step   = (end[0] - start[0])/100;
                            var green_step = (end[1] - start[1])/100;
                            var blue_step  = (end[2] - start[2])/100;

                            var red =   Math.floor(start[0] + percent * red_step);
                            var green = Math.floor(start[1] + percent * green_step);
                            var blue =  Math.floor(start[2] + percent * blue_step);

                            var red_hex = pad(red.toString(16), 2);
                            var green_hex = pad(green.toString(16), 2);
                            var blue_hex = pad(blue.toString(16), 2);

                            var color = red_hex+green_hex+blue_hex;  

                            return color;
                          },
                          title: '',
                          store: 'DistrictReportStore',
                          viewConfig: {

                          },
                          columns: [
                            {
                              xtype: 'gridcolumn',
                              id: 'region_text_name',
                              dataIndex: 'name',
                              text: 'School'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return this.renderNumber(value);
                              },
                              align: 'center',
                              dataIndex: 'pretest_taken',
                              text: 'Pretest Taken'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return this.renderPercentage(value);
                              },
                              align: 'center',
                              dataIndex: 'pretest_avg',
                              text: 'Pretest Avg'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_10',
                              text: '10%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_20',
                              text: '20%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_30',
                              text: '30%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_40',
                              text: '40%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_50',
                              text: '50%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_60',
                              text: '60%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_70',
                              text: '70%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_80',
                              text: '80%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              width: 35,
                              align: 'center',
                              dataIndex: '_90',
                              text: '90%'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                var total_pretests = Ext.getStore('DistrictReportStore').data.items[rowIndex].data.pretest_taken;
                                this.colorCell(value, total_pretests, view, record, colIndex);
                                return this.renderNumber(value);
                              },
                              align: 'center',
                              dataIndex: 'posttest_taken',
                              text: 'Posttest Taken'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                this.colorCell(value, 100, view, record, colIndex, [255,255,255], [102,204,0]);
                                return this.renderPercentage(value);
                              },
                              align: 'center',
                              dataIndex: 'posttest_avg',
                              text: 'Posttest Avg'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                return this.renderNumber(value);
                              },
                              dataIndex: 'total_hours',
                              text: 'Total Hours'
                            },
                            {
                              xtype: 'gridcolumn',
                              renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                if (value == "0:00" || value == 0) return this.renderNumber();
                                return value;
                              },
                              dataIndex: 'avg_hours',
                              text: 'Avg Hours'
                            },
                            {
                              xtype: 'gridcolumn',
                              flex: 1,
                              text: 'Progress Reports (Coming Soon)'
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  xtype: 'panel',
                  title: 'Multiplication'
                },
                {
                  xtype: 'panel',
                  title: 'Division'
                },
                {
                  xtype: 'panel',
                  title: 'Addition/Subtraction'
                }
              ],
              listeners: {
                beforetabchange: {
                  fn: me.onTabpanelBeforeTabChange,
                  scope: me
                }
              }
            }
          ]
        }
      ]
    });

    me.callParent(arguments);
  },

  onDistrict_tree_panelAfterRender: function(abstractcomponent, options) {
    Ext.define('report_data', {
      singleton: true,
      data : ''
    });
    Ext.define('report_grid_data', {
      singleton: true,
      data : ''
    });

    Ext.define('pretest_data', {
      singleton: true,
      data : ''
    });
    Ext.define('posttest_data', {
      singleton: true,
      data : ''
    });
    Ext.define('avg_improvement', {
      singleton: true,
      data : ''
    });


    var reports_tab = this.down('tab');
    var multiplication_tab = reports_tab.next();
    multiplication_tab.activate();


    var delNode;
    var treePanel = Ext.getCmp('district_tree_panel');
    while (delNode = treePanel.getRootNode().childNodes[0]) {
      treePanel.getRootNode().removeChild(delNode);
    }
    var myMask = new Ext.LoadMask(this.getEl(), {msg:'Loading.  Please wait...'});
    myMask.show();
    this.down().load_district_report(myMask);
    Ext.getStore("DistrictTreeStore").getRootNode().data.text = district_data.name;
    Ext.getStore('DistrictTreeStore').proxy.url = 'routes/routes.php?url=/districts/' + district_data.id + '/schools/tree';
    Ext.getStore('DistrictTreeStore').load({callback: function(records, operation, success) {  
    }});

  },

  onDistrict_tree_panelSelect: function(selModel, record, index, options) {
    var id = record.data.id;
    var leaf = record.data.leaf;
    var text = record.data.text;
    var myMask = new Ext.LoadMask(this.getEl(), {msg:'Loading.  Please wait...'});
    myMask.show();
    if (id === '0')  //root
    {
      this.down().load_district_report(myMask);
    } else {  
      this.down().load_school_report(id, text, myMask);  
    } 

  },

  onTabpanelBeforeTabChange: function(tabPanel, newCard, oldCard, options) {
    var reports_tab = this.down('tab');
    var multiplication_tab = reports_tab.next();
    var division_tab = multiplication_tab.next();
    var addsub_tab = division_tab.next();


    multiplication_tab.deactivate();
    division_tab.deactivate();
    addsub_tab.deactivate();

    switch(newCard.title) {
      case 'Multiplication':  
      multiplication_tab.activate();  
      break;    
      case 'Division':  
      division_tab.activate();
      break;
      case 'Addition/Subtraction':
      addsub_tab.activate();
      break;
    }
    Ext.getCmp('district_tree_panel').load_grid_progress();
    Ext.getCmp('district_tree_panel').load_weekly_progress();
    Ext.getCmp('district_tree_panel').load_test_scores();
    Ext.getCmp('district_tree_panel').load_improvement_chart(); 
    return false;
  }

});
/*
 * File: app/view/Viewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BigBrainzLauncher.view.Viewport', {
  extend: 'BigBrainzLauncher.view.SchoolSelectionWindow',
  renderTo: Ext.getBody(),
  requires: [
    'BigBrainzLauncher.view.AddClassesWindow',
    'BigBrainzLauncher.view.AddStudentsWindow',
    'BigBrainzLauncher.view.EditStudentsWindow',
    'BigBrainzLauncher.view.BigBrainzSchoolReports',
    'BigBrainzLauncher.view.BigBrainzSetup',
    'BigBrainzLauncher.view.EducatorTreeViewport',
    'BigBrainzLauncher.view.EducatorViewport',
    'BigBrainzLauncher.view.PilotDeluxeFreeWindow',
    'BigBrainzLauncher.view.SchoolSelectionWindow',
    'BigBrainzLauncher.view.StartupMessageWindow',
    'BigBrainzLauncher.view.StudentNeedPassword',
    'BigBrainzLauncher.view.StudentViewport',
    'BigBrainzLauncher.view.UnlockDeluxeWindow',
    'BigBrainzLauncher.view.ReportErrorWindow',
    'BigBrainzLauncher.view.LoginWindow',
    'BigBrainzLauncher.view.StudentLoginViewport',
    'BigBrainzLauncher.view.PizzaPartySignup',
    'BigBrainzLauncher.view.DeleteMultipleClasses',
    'BigBrainzLauncher.view.EditSchoolPasswordsWindow',
    'BigBrainzLauncher.view.DistrictOverview'
  ]
});
/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.Loader.setConfig({
  enabled: true
});

Ext.application({
  models: [
    'CountryModel',
    'StateModel',
    'DistrictModel',
    'SchoolModel',
    'ClassModel',
    'GameModel',
    'SubjectModel',
    'TreeModel',
    'GameDataModel',
    'TestModel'
  ],
  stores: [
    'CountryStore',
    'StateStore',
    'DistrictStore',
    'SchoolStore',
    'ClassStore',
    'GameStore',
    'AddGameStore',
    'SubjectStore',
    'AddClassStore',
    'SchoolTreeStore',
    'WeeklyProgressStore',
    'PosttestScoresStore',
    'StudentWeeklyMinutes',
    'GameDataStore',
    'ClassPasswordsStore',
    'DistrictReportStore',
    'DistrictTreeStore',
    'PretestChartStore',
    'PosttestChartStore',
    'AverageImprovementStore'
  ],
  views: [
    'SchoolSelectionWindow',
    'EducatorViewport',
    'AddStudentsWindow',
    'StudentViewport',
    'AddClassesWindow',
    'PilotDeluxeFreeWindow',
    'UnlockDeluxeWindow',
    'EducatorTreeViewport',
    'BigBrainzSetup',
    'StudentNeedPassword',
    'StartupMessageWindow',
    'EditStudentsWindow',
    'ReportErrorWindow',
    'LoginWindow',
    'StudentLoginViewport',
    'PizzaPartySignup',
    'DeleteMultipleClasses',
    'EditSchoolPasswordsWindow',
    'DistrictOverview',
    'WeeklyUsageGraph',
    'AvgerageImprovementGraphs'
  ],
  autoCreateViewport: true,
  name: 'BigBrainzLauncher'
});
setTimeout(function() {var win = Ext.create("BigBrainzLauncher.view.SchoolSelectionWindow");win.show();}, 100);
